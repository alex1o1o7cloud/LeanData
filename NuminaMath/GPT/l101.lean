import Mathlib

namespace solve_for_n_l101_101764

theorem solve_for_n (n : ‚Ñö) (h : n + (n + 1) + (n + 2) + (n + 3) = 20) : 
    n = 3.5 :=
  sorry

end solve_for_n_l101_101764


namespace f_neg_eq_f_l101_101649

def f (x : ‚Ñù) : ‚Ñù := (x^2 + 4) / (x^2 - 4)

theorem f_neg_eq_f (x : ‚Ñù) (h : x^2 ‚â† 4) : f(-x) = f(x) :=
by
  sorry

end f_neg_eq_f_l101_101649


namespace deck_cost_correct_l101_101283

def rare_cards := 19
def uncommon_cards := 11
def common_cards := 30
def rare_card_cost := 1
def uncommon_card_cost := 0.5
def common_card_cost := 0.25

def total_deck_cost := rare_cards * rare_card_cost + uncommon_cards * uncommon_card_cost + common_cards * common_card_cost

theorem deck_cost_correct : total_deck_cost = 32 :=
  by
  -- The proof would go here.
  sorry

end deck_cost_correct_l101_101283


namespace probability_DEQ_greater_than_DFQ_and_EFQ_l101_101374

namespace EquilateralTriangle

noncomputable def probability_in_quadrilateral (DEF : Type) [triangle DEF] : ‚Ñù :=
  let centroid := centroid DEF
  let quadrilateral_area := area (quadrilateral FGHI)
  let total_area := area DEF
  quadrilateral_area / total_area

theorem probability_DEQ_greater_than_DFQ_and_EFQ (Q : Point DEF) :
  Q ‚àà interior DEF ‚Üí
  (area (triangle DEQ) > area (triangle DFQ)) ‚Üí 
  (area (triangle DEQ) > area (triangle EFQ)) ‚Üí
  probability_in_quadrilateral DEF = 1 / 3 := 
by sorry

end EquilateralTriangle

end probability_DEQ_greater_than_DFQ_and_EFQ_l101_101374


namespace count_injective_functions_with_unique_descent_l101_101354

open Nat

theorem count_injective_functions_with_unique_descent 
  (n m : ‚Ñï) (h‚ÇÅ : 2 ‚â§ n) (h‚ÇÇ : n ‚â§ m) :
  (‚àÉ (f : Fin n ‚Üí Fin m), (Injective f) ‚àß (‚àÉ! i : Fin (n - 1), f i > f (i + 1)))
  = Nat.choose m n * (2^n - (n+1)) :=
sorry

end count_injective_functions_with_unique_descent_l101_101354


namespace probability_all_choose_paper_l101_101281

-- Given conditions
def probability_choice_is_paper := 1 / 3

-- The theorem to be proved
theorem probability_all_choose_paper :
  probability_choice_is_paper ^ 3 = 1 / 27 :=
sorry

end probability_all_choose_paper_l101_101281


namespace number_drawn_in_seventh_group_l101_101132

theorem number_drawn_in_seventh_group (m : ‚Ñï) (h1 : m = 6) :
  ‚àÉ n ‚àà (finset.range 70 \ 60), n % 10 = (m + 7) % 10 := 
by {
  use 63,
  split,
  {
    split,
    { linarith, },
    { linarith, },
  },
  exact rfl,
}

end number_drawn_in_seventh_group_l101_101132


namespace max_m_value_and_position_l101_101828

variables (r : ‚Ñù) (h_r : r > 0) (x : ‚Ñù) (h_x : x > 0) (m : ‚Ñù) (A B O M A' B' P : Type)

-- Assume the necessary geometric setup
noncomputable def is_semi_circle_with_tangent (A B O P : Type) := sorry
noncomputable def is_tangent_at_point (M : Type) := sorry
noncomputable def intersects_tangents (A' B' M : Type) := sorry
noncomputable def perpendicular_projection (P : Type) := sorry
noncomputable def rotation_solid_volumes (x m r : ‚Ñù) := sorry

noncomputable def max_m_value := 2/3

theorem max_m_value_and_position (r : ‚Ñù) (x : ‚Ñù) (m : ‚Ñù)
  (h1 : r > 0)
  (h2 : x > 0)
  (h3 : is_semi_circle_with_tangent A B O P)
  (h4 : is_tangent_at_point M)
  (h5 : intersects_tangents A' B' M)
  (h6 : perpendicular_projection P)
  (h7 : rotation_solid_volumes x m r) :

  m = max_m_value ‚àß x = 1 :=
begin
  sorry
end

end max_m_value_and_position_l101_101828


namespace eccentricity_minor_axis_range_of_m_l101_101547

open Real

noncomputable def ellipse (m : ‚Ñù) := {p : ‚Ñù √ó ‚Ñù | (p.1^2 / 4) + (p.2^2 / m) = 1 ‚àß m > 0}

theorem eccentricity_minor_axis {m : ‚Ñù} (hm : m = 2):
  (sqrt (4 - 2) / 2 = (sqrt 2) / 2) ‚àß (2 * sqrt 2 = 2 * sqrt 2) :=
by sorry

theorem range_of_m (m : ‚Ñù) :
  (‚àÄ k : ‚Ñù, ‚àÉ x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ : ‚Ñù, 
    let t1 := (m + 4 * k^2) * x‚ÇÅ^2 + 8 * k^2 * x‚ÇÅ + 4 * k^2 - 4 * m in 
    (t1 = 0 ‚àß x‚ÇÅ * x‚ÇÇ + y‚ÇÅ * y‚ÇÇ = 0 ‚àß (1 + k^2) * x‚ÇÅ * x‚ÇÇ + k^2 * (x‚ÇÅ + x‚ÇÇ) + k^2 = 0) ‚àß
    (k^2 = 4 * m / (4 - 3 * m) ‚àß (4 * m / (4 - 3 * m)) ‚â• 0 ‚àß m > 0 ‚Üí 0 < m ‚àß m ‚â§ 4 / 3 ‚à® - 1 < y‚ÇÅ ‚àß (1 / 4 + 1 / m = 1 ‚àß m = 4 / 3) ) := 
by sorry

end eccentricity_minor_axis_range_of_m_l101_101547


namespace multiples_of_7_with_units_digit_7_number_of_multiples_of_7_with_units_digit_7_l101_101094

theorem multiples_of_7_with_units_digit_7 (n : ‚Ñï) : 
  (n < 150 ‚àß ‚àÉ k : ‚Ñï, n = 7 * k ‚àß n % 10 = 7) ‚Üî 
  n = 7 ‚à® n = 77 ‚à® n = 147 := 
by 
  sorry

theorem number_of_multiples_of_7_with_units_digit_7 : 
  ‚àÉ m, m = 3 ‚àß ‚àÄ n : ‚Ñï, (n < 150 ‚àß ‚àÉ k : ‚Ñï, n = 7 * k ‚àß n % 10 = 7) ‚Üí n = 7 ‚à® n = 77 ‚à® n = 147 := 
by 
  use 3
  intros n
  intros hn
  split
  intro h
  cases h
  sorry

end multiples_of_7_with_units_digit_7_number_of_multiples_of_7_with_units_digit_7_l101_101094


namespace find_w_l101_101410

variables (w x y z : ‚Ñï)

-- conditions
def condition1 : Prop := x = w / 2
def condition2 : Prop := y = w + x
def condition3 : Prop := z = 400
def condition4 : Prop := w + x + y + z = 1000

-- problem to prove
theorem find_w (h1 : condition1 w x) (h2 : condition2 w x y) (h3 : condition3 z) (h4 : condition4 w x y z) : w = 200 :=
by sorry

end find_w_l101_101410


namespace gcd_binomial_coeffs_correct_l101_101908

noncomputable def gcd_binomial_coeffs (n : ‚Ñï) (h : n > 0) (k : ‚Ñï) (h1 : 2^k ‚à£ n) (h2 : ¬¨ 2^(k+1) ‚à£ n) : ‚Ñï :=
  let binom := Œª i, Nat.choose (2 * n) i in
  Nat.gcd (List.gcd (List.map binom (List.filter (Œª i, i % 2 = 1) (List.range (2 * n))))) (2^(k+1))

theorem gcd_binomial_coeffs_correct (n : ‚Ñï) (h : n > 0) (k : ‚Ñï) (h1 : 2^k ‚à£ n) (h2 : ¬¨ 2^(k+1) ‚à£ n) : gcd_binomial_coeffs n h k h1 h2 = 2^(k+1) :=
  sorry

end gcd_binomial_coeffs_correct_l101_101908


namespace hidden_dots_sum_l101_101706

-- Lean 4 equivalent proof problem definition
theorem hidden_dots_sum (d1 d2 d3 d4 : ‚Ñï)
    (h1 : d1 ‚â† d2 ‚àß d1 + d2 = 7)
    (h2 : d3 ‚â† d4 ‚àß d3 + d4 = 7)
    (h3 : d1 = 2 ‚à® d1 = 4 ‚à® d2 = 2 ‚à® d2 = 4)
    (h4 : d3 + 4 = 7) :
    d1 + 7 + 7 + d3 = 24 :=
sorry

end hidden_dots_sum_l101_101706


namespace find_x_l101_101114

theorem find_x (x : ‚Ñï) (h : 2^x - 2^(x - 2) = 3 * 2^10) : x = 12 :=
by 
  sorry

end find_x_l101_101114


namespace factor_tree_value_l101_101992

theorem factor_tree_value :
  ‚àÄ (X Y Z F G : ‚Ñï),
  X = Y * Z ‚Üí 
  Y = 7 * F ‚Üí 
  F = 2 * 5 ‚Üí 
  Z = 11 * G ‚Üí 
  G = 7 * 3 ‚Üí 
  X = 16170 := 
by
  intros X Y Z F G
  sorry

end factor_tree_value_l101_101992


namespace percentage_increase_l101_101588

variable {x y : ‚Ñù}
variable {P : ‚Ñù} -- percentage

theorem percentage_increase (h1 : y = x * (1 + P / 100)) (h2 : x = y * 0.5882352941176471) : P = 70 := 
by
  sorry

end percentage_increase_l101_101588


namespace not_factorial_tails_count_l101_101456

def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) -- you can extend further if needed

def is_factorial_tail (n : ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, m > 0 ‚àß f(m) = n

theorem not_factorial_tails_count : 
  ‚àÉ c : ‚Ñï, c = 500 ‚àß ‚àÄ k : ‚Ñï, k < 2500 ‚Üí ¬¨is_factorial_tail k ‚Üí k < 2500 - c :=
by
  sorry

end not_factorial_tails_count_l101_101456


namespace g_at_1001_l101_101686

open Function

variable (g : ‚Ñù ‚Üí ‚Ñù)

axiom g_property : ‚àÄ x y : ‚Ñù, g (x * y) + 2 * x = x * g y + g x
axiom g_at_1 : g 1 = 3

theorem g_at_1001 : g 1001 = -997 :=
by
  sorry

end g_at_1001_l101_101686


namespace distinct_pairs_sum_l101_101277

theorem distinct_pairs_sum (a1 b1 a2 b2 : ‚Ñï)
  (h1 : a1 < b1) (h2 : a2 < b2)
  (h3 : (a1 + b1 * complex.I) * (b1 - a1 * complex.I) = 2020)
  (h4 : (a2 + b2 * complex.I) * (b2 - a2 * complex.I) = 2020)
  (h5 : a1 * b1 = 1010) (h6 : a2 * b2 = 1010) :
  a1 + b1 + a2 + b2 = 714 :=
  sorry

end distinct_pairs_sum_l101_101277


namespace alt_series_converges_l101_101750

noncomputable def alt_series (n : ‚Ñï) : ‚Ñù := (-1)^(n-1) / Real.sqrt n

theorem alt_series_converges :
  (‚àÄ n : ‚Ñï, n > 0 ‚Üí alt_series n > 0) ‚àß 
  (‚àÄ n : ‚Ñï, n > 0 ‚Üí alt_series (n + 1) < alt_series n) ‚àß 
  (Tendsto (fun n => alt_series n) atTop (ùìù 0)) ‚Üí
  CauchySeq (partial_sum alt_series) ‚àß
  ‚àÉ N, N ‚â• 9999 := 
sorry

end alt_series_converges_l101_101750


namespace minimal_positive_period_of_function_l101_101703

theorem minimal_positive_period_of_function :
  minimal_positive_period (Œª x, (Real.sin (4 * x)) / (1 + Real.cos (4 * x))) = œÄ / 2 :=
by
  sorry

end minimal_positive_period_of_function_l101_101703


namespace common_pts_above_curve_l101_101157

open Real

theorem common_pts_above_curve {x y t : ‚Ñù} (h1 : 0 ‚â§ x ‚àß x ‚â§ 1) (h2 : 0 ‚â§ y ‚àß y ‚â§ 1) (h3 : 0 < t ‚àß t < 1) :
  (‚àÄ t, y ‚â• (t-1)/t * x + 1 - t) ‚Üî (sqrt x + sqrt y ‚â• 1) := 
by
  sorry

end common_pts_above_curve_l101_101157


namespace collinear_vectors_l101_101543

theorem collinear_vectors (x : ‚Ñù) :
  (‚àÉ k : ‚Ñù, (2, 4) = (k * 2, k * 4) ‚àß (k * 2 = x ‚àß k * 4 = 6)) ‚Üí x = 3 :=
by
  intros h
  sorry

end collinear_vectors_l101_101543


namespace sum_divisors_of_37_is_38_l101_101322

theorem sum_divisors_of_37_is_38 (h : Nat.Prime 37) : (‚àë d in (Finset.filter (Œª d, 37 % d = 0) (Finset.range (37 + 1))), d) = 38 := by
  sorry

end sum_divisors_of_37_is_38_l101_101322


namespace sin_A_in_right_triangle_cos_given_l101_101996

theorem sin_A_in_right_triangle_cos_given {A : ‚Ñù} (h : real.cos A = 1/2) : real.sin A = real.sqrt(3)/2 :=
sorry

end sin_A_in_right_triangle_cos_given_l101_101996


namespace negation_of_proposition_l101_101237

theorem negation_of_proposition :
  (¬¨ ‚àÉ x : ‚Ñù, x^2 - x - 1 = 0) ‚Üî (‚àÄ x : ‚Ñù, x^2 - x - 1 ‚â† 0) :=
by sorry

end negation_of_proposition_l101_101237


namespace deck_total_cost_is_32_l101_101288

-- Define the costs of each type of card
def rare_cost := 1
def uncommon_cost := 0.50
def common_cost := 0.25

-- Define the quantities of each type of card in Tom's deck
def rare_quantity := 19
def uncommon_quantity := 11
def common_quantity := 30

-- Define the total cost calculation
def total_cost : ‚Ñù := (rare_quantity * rare_cost) + (uncommon_quantity * uncommon_cost) + (common_quantity * common_cost)

-- Prove that the total cost of the deck is $32
theorem deck_total_cost_is_32 : total_cost = 32 := by
  sorry

end deck_total_cost_is_32_l101_101288


namespace not_factorial_tails_l101_101465

noncomputable def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) + ...

theorem not_factorial_tails :
  let n := 2500 in ‚àÉ (k : ‚Ñï), k = 500 ‚àß ‚àÄ m < n, ¬¨(f m = k) :=
by {
  sorry
}

end not_factorial_tails_l101_101465


namespace evaluate_polynomial_l101_101014

theorem evaluate_polynomial (x : ‚Ñù) (h : x^2 - 3 * x - 9 = 0) (hx : 0 < x) : 
  x^4 - 3 * x^3 - 9 * x^2 + 27 * x - 8 = -8 := 
sorry

end evaluate_polynomial_l101_101014


namespace constant_term_proof_l101_101938

noncomputable def constant_term (n : ‚Ñï) (x : ‚Ñù) : ‚Ñù :=
  (‚àë r in Finset.range (n + 1), 
      if 6 - (3/2 : ‚Ñù) * r = 0 then 
        (-1)^r * 2^(n-r) * Nat.choose n r else 0)

theorem constant_term_proof :
  ‚àë i in Finset.range (6 + 1), Nat.choose 6 i = 64 ‚Üí
  constant_term 6 1 = 60 :=
begin
  sorry
end

end constant_term_proof_l101_101938


namespace ratio_EZ_FZ_l101_101748

-- Define the main structures and conditions
variables {Point Line : Type} (A B C D E F W X Y Z : Point)
variables (lineBC lineWX lineEF lineAB lineAC lineDE : Line)
variables [EquilateralTriangle ABC] [EquilateralTriangle DEF]
variables [SameSide lineBC ABC DEF]
variables [Collinear E B C F] [LineIntersects lineAB lineWX W]
variables [LineIntersects lineAC lineWX X]
variables [LineIntersects lineDE lineWX Y]
variables [LineIntersects lineEF lineWX Z]

-- Given ratios
variables (h1 : AW / WB = 2 / 9)
variables (h2 : AX / CX = 5 / 6)
variables (h3 : DY / EY = 9 / 2)

-- Prove the ratio and find m + n
theorem ratio_EZ_FZ :
  ‚àÉ (m n : ‚Ñï), (gcd m n = 1) ‚àß m + n = 33 ‚àß EZ / FZ = m / n :=
sorry

end ratio_EZ_FZ_l101_101748


namespace red_car_speed_l101_101858

noncomputable def speed_blue : ‚Ñï := 80
noncomputable def speed_green : ‚Ñï := 8 * speed_blue
noncomputable def speed_red : ‚Ñï := 2 * speed_green

theorem red_car_speed : speed_red = 1280 := by
  unfold speed_red
  unfold speed_green
  unfold speed_blue
  sorry

end red_car_speed_l101_101858


namespace maximum_height_l101_101822

noncomputable def h (t : ‚Ñù) : ‚Ñù :=
  -20 * t ^ 2 + 100 * t + 30

theorem maximum_height : 
  ‚àÉ t : ‚Ñù, h t = 155 ‚àß ‚àÄ t' : ‚Ñù, h t' ‚â§ 155 := 
sorry

end maximum_height_l101_101822


namespace spotlight_distance_l101_101406

open Real

-- Definitions for the ellipsoid parameters
def ellipsoid_parameters (a b c : ‚Ñù) : Prop :=
  a^2 = b^2 + c^2 ‚àß a - c = 1.5

-- Given conditions as input parameters
variables (a b c : ‚Ñù)
variables (h_a : a = 2.7) -- semi-major axis half length
variables (h_c : c = 1.5) -- focal point distance

-- Prove that the distance from F2 to F1 is 12 cm
theorem spotlight_distance (h : ellipsoid_parameters a b c) : 2 * a - (a - c) = 12 :=
by sorry

end spotlight_distance_l101_101406


namespace inequality_verified_l101_101777

noncomputable def verify_inequality
  (n : ‚Ñï)
  (a : Fin n ‚Üí ‚Ñù)
  (h_n : 0 < n) : Prop :=
  sqrt (‚àë i, a i ^ 2 / n) ‚â• ‚àë i, a i / n

theorem inequality_verified
  (n : ‚Ñï)
  (a : Fin n ‚Üí ‚Ñù)
  (h_n : 0 < n)
  : verify_inequality n a h_n :=
  sorry

end inequality_verified_l101_101777


namespace zoo_feeding_sequences_l101_101387

def num_alternating_sequences (n : ‚Ñï) (start_gender : bool) (end_gender : bool) :=
  if n = 5 ‚àß start_gender = true ‚àß end_gender = false then 4 * 4 * 3 * 3 * 2 * 2 * 1 else 0

theorem zoo_feeding_sequences : 
  num_alternating_sequences 5 tt ff = 576 :=
by
  -- Initial condition: 5 pairs of animals, starting with the male lion (true), ending with the female bear (false)
  have h : num_alternating_sequences 5 tt ff = 4 * 4 * 3 * 3 * 2 * 2 * 1,
  -- proof omitted
  sorry
  -- Final result
  exact h

end zoo_feeding_sequences_l101_101387


namespace sum_of_geometric_sequence_first_9000_terms_l101_101253

noncomputable def geomSum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r ^ n) / (1 - r)

theorem sum_of_geometric_sequence_first_9000_terms (a r : ‚Ñù) (h1 : geomSum a r 3000 = 500) (h2 : geomSum a r 6000 = 950) :
  geomSum a r 9000 = 1355 :=
by
  sorry

end sum_of_geometric_sequence_first_9000_terms_l101_101253


namespace ratio_of_female_democrats_l101_101276

theorem ratio_of_female_democrats 
    (M F : ‚Ñï) 
    (H1 : M + F = 990)
    (H2 : M / 4 + 165 = 330) 
    (H3 : 165 = 165) : 
    165 / F = 1 / 2 := 
sorry

end ratio_of_female_democrats_l101_101276


namespace fifi_hangers_l101_101983

-- Definitions based on conditions
def P : ‚Ñï := 7
def G : ‚Ñï    -- green hangers
def B : ‚Ñï := G - 1
def Y : ‚Ñï := G - 2

-- The main theorem statement
theorem fifi_hangers : P + G + B + Y = 16 -> G = 4 := by
  sorry

end fifi_hangers_l101_101983


namespace abs_add_lt_abs_sub_l101_101648

-- Define the conditions
variables {a b : ‚Ñù} (h1 : a * b < 0)

-- Prove the statement
theorem abs_add_lt_abs_sub (h1 : a * b < 0) : |a + b| < |a - b| := sorry

end abs_add_lt_abs_sub_l101_101648


namespace problem1_l101_101414

theorem problem1 : -3^2 + (2023 - real.pi)^0 + (1/2)^(-(3:‚Ñ§)) = 0 :=
by sorry

end problem1_l101_101414


namespace not_factorial_tails_l101_101462

noncomputable def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) + ...

theorem not_factorial_tails :
  let n := 2500 in ‚àÉ (k : ‚Ñï), k = 500 ‚àß ‚àÄ m < n, ¬¨(f m = k) :=
by {
  sorry
}

end not_factorial_tails_l101_101462


namespace a_in_range_l101_101077

noncomputable def kOM (t : ‚Ñù) : ‚Ñù := (Real.log t) / t
noncomputable def kON (a t : ‚Ñù) : ‚Ñù := (a + a * t - t^2) / t

theorem a_in_range (a : ‚Ñù) : 
  (‚àÄ t ‚àà Set.Ici 1, 0 ‚â§ (1 - Real.log t + a) / t^2 + 1) ‚Üí
  a ‚àà Set.Ici (-2) := 
by
  sorry

end a_in_range_l101_101077


namespace complex_division_l101_101779

theorem complex_division :
  (‚ü®5, -1‚ü© : ‚ÑÇ) / (‚ü®1, -1‚ü© : ‚ÑÇ) = (‚ü®3, 2‚ü© : ‚ÑÇ) :=
sorry

end complex_division_l101_101779


namespace sqrt_factorial_l101_101757

theorem sqrt_factorial : Real.sqrt (Real.ofNat (Nat.factorial 5) * Real.ofNat (Nat.factorial 5)) = 120 := 
by 
  sorry

end sqrt_factorial_l101_101757


namespace smallest_non_multiple_of_5_abundant_l101_101005

def properDivisors (n : ‚Ñï) : List ‚Ñï :=
  (List.range (n - 1 + 1) ).filter (fun d => d < n ‚àß n % d = 0)

def isAbundant (n : ‚Ñï) : Prop :=
  properDivisors n |>.sum > n

def isNotMultipleOfFive (n : ‚Ñï) : Prop :=
  n % 5 ‚â† 0

theorem smallest_non_multiple_of_5_abundant :
  ‚àÉ n, isAbundant n ‚àß isNotMultipleOfFive n ‚àß 
       ‚àÄ m, isAbundant m ‚àß isNotMultipleOfFive m ‚Üí n ‚â§ m :=
  sorry

end smallest_non_multiple_of_5_abundant_l101_101005


namespace area_of_sector_l101_101340

/-- The area of a sector of a circle with radius 10 meters and central angle 42 degrees is 35/3 * pi square meters. -/
theorem area_of_sector (r Œ∏ : ‚Ñï) (h_r : r = 10) (h_Œ∏ : Œ∏ = 42) : 
  (Œ∏ / 360 : ‚Ñù) * (Real.pi : ‚Ñù) * (r : ‚Ñù)^2 = (35 / 3 : ‚Ñù) * (Real.pi : ‚Ñù) :=
by {
  sorry
}

end area_of_sector_l101_101340


namespace tile_area_l101_101715

-- Define the properties and conditions of the tile

structure Tile where
  sides : Fin 9 ‚Üí ‚Ñù 
  six_of_length_1 : ‚àÄ i : Fin 6, sides i = 1 
  congruent_quadrilaterals : Fin 3 ‚Üí Quadrilateral

structure Quadrilateral where
  length : ‚Ñù
  width : ‚Ñù

-- Given the tile structure, calculate the area
noncomputable def area_of_tile (t: Tile) : ‚Ñù := sorry

-- Statement: Prove the area of the tile given the conditions
theorem tile_area (t : Tile) : area_of_tile t = (4 * Real.sqrt 3 / 3) :=
  sorry

end tile_area_l101_101715


namespace well_diameter_correct_l101_101891

-- The conditions given in the problem
def depth_of_well : ‚Ñù := 14
def cost_per_cubic_meter : ‚Ñù := 17
def total_cost : ‚Ñù := 1682.32
def volume_of_well : ‚Ñù := total_cost / cost_per_cubic_meter

-- The goal is to compute and prove the diameter of the well
def diameter_of_well : ‚Ñù := 2 * real.sqrt (volume_of_well / (real.pi * depth_of_well))

theorem well_diameter_correct : diameter_of_well = 2.996 :=
by 
  -- The detailed proof steps go here
  sorry

end well_diameter_correct_l101_101891


namespace optionA_is_incorrect_l101_101105

theorem optionA_is_incorrect :
  ¬¨((deriv (Œª x : ‚Ñù, x^(-2))) = (Œª x : ‚Ñù, -2 * x^(-1))) :=
by sorry

end optionA_is_incorrect_l101_101105


namespace inequality_solution_l101_101887

noncomputable def f (x : ‚Ñù) : ‚Ñù :=
  (2 / (x + 2)) + (4 / (x + 8))

theorem inequality_solution {x : ‚Ñù} :
  f x ‚â• 1/2 ‚Üî ((-8 < x ‚àß x ‚â§ -4) ‚à® (-2 ‚â§ x ‚àß x ‚â§ 2)) :=
sorry

end inequality_solution_l101_101887


namespace largest_possible_value_of_s_l101_101163

theorem largest_possible_value_of_s (r s : Nat) (h1 : r ‚â• s) (h2 : s ‚â• 3)
  (h3 : (r - 2) * s * 61 = (s - 2) * r * 60) : s = 121 :=
sorry

end largest_possible_value_of_s_l101_101163


namespace func_necessary_sufficient_l101_101001

variable {‚Ñù : Type*} [NonEmpty ‚Ñù] [OrderedCommGroup ‚Ñù]

-- Define the function f and its properties
variable (f : ‚Ñù ‚Üí ‚Ñù)

noncomputable def func_cond1 := ‚àÄ x : ‚Ñù, f(x) = f(2 - x)

noncomputable def func_cond2 := ‚àÄ x : ‚Ñù, (f' x) * (x - 1) > 0

-- Statement of the theorem to be proved
theorem func_necessary_sufficient (h1 : func_cond1 f) (h2 : func_cond2 f) : 
  ‚àÄ x1 x2 : ‚Ñù, (x1 < x2) ‚Üí (f(x1) > f(x2) ‚Üî x1 + x2 < 2) := 
sorry

end func_necessary_sufficient_l101_101001


namespace minimum_perimeter_of_tiled_rectangle_in_meters_l101_101300

-- Define the problem conditions
def numberOfTiles : Nat := 24
def sideLengthCm : Nat := 40
def sideLengthM : Float := 0.4

-- Define the proof statement to verify the minimum perimeter
theorem minimum_perimeter_of_tiled_rectangle_in_meters :
  ‚àÄ (n s: Nat), n = numberOfTiles ‚Üí s = sideLengthCm ‚Üí 
  ‚àÉ (p : Float), p = 8 :=
by
  intro n s hn hs
  use 8
  sorry

end minimum_perimeter_of_tiled_rectangle_in_meters_l101_101300


namespace product_of_distances_l101_101198

theorem product_of_distances (A B C I I_A : Point)
    (incenter_I : is_incenter I A B C)
    (excenter_I_A : is_excenter I_A A B C)
    (r R : ‚Ñù)
    (inradius_r : inradius I A B C r)
    (circumradius_R : circumradius A B C R) :
    distance I C * distance I I_A = 4 * R * r := 
sorry

end product_of_distances_l101_101198


namespace solution_verification_l101_101021

-- Define the differential equation
def diff_eq (y y' y'': ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x, y'' x - 4 * y' x + 5 * y x = 2 * Real.cos x + 6 * Real.sin x

-- General solution form
def general_solution (C‚ÇÅ C‚ÇÇ : ‚Ñù) (y: ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x, y x = Real.exp (2 * x) * (C‚ÇÅ * Real.cos x + C‚ÇÇ * Real.sin x) + Real.cos x + 1/2 * Real.sin x

-- Proof problem statement
theorem solution_verification (C‚ÇÅ C‚ÇÇ : ‚Ñù) (y y' y'': ‚Ñù ‚Üí ‚Ñù) :
  (‚àÄ x, y' x = deriv y x) ‚Üí
  (‚àÄ x, y'' x = deriv (deriv y) x) ‚Üí
  diff_eq y y' y'' ‚Üí
  general_solution C‚ÇÅ C‚ÇÇ y :=
by
  intros h1 h2 h3
  sorry

end solution_verification_l101_101021


namespace focus_parabola_l101_101892

theorem focus_parabola (f : ‚Ñù) (d : ‚Ñù) (y : ‚Ñù) :
  (‚àÄ y, ((- (1 / 8) * y^2 - f) ^ 2 + y^2 = (- (1 / 8) * y^2 - d) ^ 2)) ‚Üí 
  (d - f = 4) ‚Üí 
  (f^2 = d^2) ‚Üí 
  f = -2 :=
by
  sorry

end focus_parabola_l101_101892


namespace sum_first_9000_terms_l101_101248

noncomputable def geometric_sequence_sum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r^n) / (1 - r)

theorem sum_first_9000_terms (a r : ‚Ñù) :
  geometric_sequence_sum a r 3000 = 500 ‚Üí
  geometric_sequence_sum a r 6000 = 950 ‚Üí
  geometric_sequence_sum a r 9000 = 1355 :=
by
  intros h1 h2
  sorry

end sum_first_9000_terms_l101_101248


namespace unique_poly_degree_4_l101_101736

theorem unique_poly_degree_4 
  (Q : ‚Ñö[X]) 
  (h_deg : Q.degree = 4) 
  (h_lead_coeff : Q.leading_coeff = 1)
  (h_root : Q.eval (sqrt 3 + sqrt 7) = 0) : 
  Q = X^4 - 12 * X^2 + 16 ‚àß Q.eval 2 = 0 :=
by sorry

end unique_poly_degree_4_l101_101736


namespace exists_k_x0_max_V_2_to_781_l101_101106

-- Definition of greatest prime factor
def greatestPrimeFactor (n : ‚Ñï) : ‚Ñï := sorry

-- Definition of the sequence x_i
noncomputable def sequence (x‚ÇÄ : ‚Ñï) : ‚Ñï ‚Üí ‚Ñï
| 0 => x‚ÇÄ
| (n + 1) => sequence n - greatestPrimeFactor (sequence n)

-- Theorem 1: For any integer \(x_0\) greater than 1, there exists a natural number \(k(x_0)\) such that \(x_{k(x_0)+1} = 0\)
theorem exists_k_x0 (x‚ÇÄ : ‚Ñï) (hx : 1 < x‚ÇÄ) :
  ‚àÉ k : ‚Ñï, sequence x‚ÇÄ k + 1 = 0 := sorry

-- Function V(x‚ÇÄ)
def V (x‚ÇÄ : ‚Ñï) : ‚Ñï := sorry

-- Theorem 2: The largest number in \(V(2), V(3), \cdots, V(781)\) is 2
theorem max_V_2_to_781 : ‚àÄ x, (2 ‚â§ x ‚àß x ‚â§ 781) ‚Üí V x ‚â§ 2 := sorry

end exists_k_x0_max_V_2_to_781_l101_101106


namespace chess_tournament_games_l101_101987

theorem chess_tournament_games (n : ‚Ñï) (total_games : ‚Ñï) :
  n = 24 ‚Üí total_games = 276 ‚Üí (n - 1) = 23 :=
by
  intros h1 h2
  rw [h1] at h2
  sorry

end chess_tournament_games_l101_101987


namespace sum_first_9000_terms_l101_101246

noncomputable def geometric_sequence_sum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r^n) / (1 - r)

theorem sum_first_9000_terms (a r : ‚Ñù) :
  geometric_sequence_sum a r 3000 = 500 ‚Üí
  geometric_sequence_sum a r 6000 = 950 ‚Üí
  geometric_sequence_sum a r 9000 = 1355 :=
by
  intros h1 h2
  sorry

end sum_first_9000_terms_l101_101246


namespace pheromone_correct_choice_l101_101403

noncomputable def pheromone_formula := (10, 18, 1) -- Represent (C count, H count, O count)
def carbon_count (formula : Nat √ó Nat √ó Nat) := formula.1
def hydrogen_count (formula : Nat √ó Nat √ó Nat) := formula.2
def oxygen_count (formula : Nat √ó Nat √ó Nat) := formula.3

def statement_1 (formula : Nat √ó Nat √ó Nat) : Prop :=
  carbon_count formula > 0 ‚àß hydrogen_count formula > 0 ‚àß oxygen_count formula > 0

def mass_ratio (formula : Nat √ó Nat √ó Nat) : (Nat √ó Nat √ó Nat) :=
  (12 * carbon_count formula, hydrogen_count formula, 16 * oxygen_count formula)

def statement_2 (formula : Nat √ó Nat √ó Nat) : Prop :=
  mass_ratio formula = (120, 18, 16)

def statement_3 : Prop := -- Compound vs elements semantics
  False -- Given the problem's definition

def total_atoms (formula : Nat √ó Nat √ó Nat) : Nat :=
  carbon_count formula + hydrogen_count formula + oxygen_count formula

def statement_4 (formula : Nat √ó Nat √ó Nat) : Prop :=
  total_atoms formula = 29

def correct_choice (formula : Nat √ó Nat √ó Nat) : Prop :=
  statement_1 formula ‚àß ¬¨statement_2 formula ‚àß ¬¨statement_3 ‚àß statement_4 formula

theorem pheromone_correct_choice :
  correct_choice pheromone_formula := by
  sorry

end pheromone_correct_choice_l101_101403


namespace exists_8_equilateral_triangles_with_conditions_l101_101428

noncomputable def equilateral_triangle_exists 
  (O1 O2 : Point) (r1 r2 : ‚Ñù) 
  (C: Point ‚Üí Bool) (radical_axis : Line) : Prop :=
    ‚àÉ t1 t2 t3 t4 t5 t6 t7 t8 : (Triangle), 
      (‚àÄ t, t ‚àà {t1, t2, t3, t4, t5, t6, t7, t8} -> 
        (equilateral t ‚àß tangent_touches_circle t.side1 (circle O1 r1) ‚àß tangent_touches_circle t.side2 (circle O2 r2) ‚àß on_radical_axis t.vertex3 O1 O2))

-- Define placeholder structures and properties to avoid incomplete references
structure Point
constant Line : Type
structure Circle (center : Point) (radius : ‚Ñù)
structure Triangle :=
  (side1: Line)
  (side2: Line)
  (vertex3: Point)
def equilateral : Triangle ‚Üí Prop := sorry
def tangent_touches_circle : Line ‚Üí Circle ‚Üí Prop := sorry
def on_radical_axis : Point ‚Üí Point ‚Üí Point ‚Üí Prop := sorry

-- Statement of the mathematically equivalent proof problem as a Lean 4 statement
theorem exists_8_equilateral_triangles_with_conditions
  (O1 O2 : Point) (r1 r2 : ‚Ñù) 
  (radical_axis : Line) : 
  ‚àÉ t : Set Triangle, 
    (‚àÄ t, t ‚àà t ‚Üí 
      ‚àÉ C : Point ‚Üí Prop, 
        C t.vertex3 ‚àß 
        equilateral t ‚àß 
        tangent_touches_circle t.side1 (circle O1 r1) ‚àß 
        tangent_touches_circle t.side2 (circle O2 r2) ‚àß 
        on_radical_axis t.vertex3 O1 O2 ‚àß 
        8 = (finite.to_finset t).card) :=
begin
  -- The detailed proof is not required
  sorry
end

end exists_8_equilateral_triangles_with_conditions_l101_101428


namespace range_of_k_l101_101577

-- Conditions
def f (k x : ‚Ñù) : ‚Ñù := (‚àö3) * Real.sin ((œÄ * x) / k)
def circle (k x y : ‚Ñù) : Prop := x^2 + y^2 = k^2

-- Question: Prove the range of k such that |k| ‚â• 2
theorem range_of_k (k : ‚Ñù) :
  (‚àÉ x_max, f k x_max = ‚àö3 ‚àß circle k x_max (‚àö3)) ‚Üí
  (‚àÉ x_min, f k x_min = -‚àö3 ‚àß circle k x_min (-‚àö3)) ‚Üí
  |k| ‚â• 2 :=
sorry

end range_of_k_l101_101577


namespace find_a_for_distinct_solutions_l101_101889

theorem find_a_for_distinct_solutions :
  ‚àÉ (a : ‚Ñù), 
  ((‚àÉ x1 x2 : ‚Ñù, -œÄ/6 ‚â§ x1 ‚àß x1 ‚â§ 3*œÄ/2 ‚àß -œÄ/6 ‚â§ x2 ‚àß x2 ‚â§ 3*œÄ/2 ‚àß x1 ‚â† x2 ‚àß
  (2 * sin x1 + a^2 + a)^3 - (cos (2 * x1) + 3 * a * sin x1 + 11)^3 = 
  12 - 2 * sin^2 x1 + (3 * a - 2) * sin x1 - a^2 - a ‚àß
  (2 * sin x2 + a^2 + a)^3 - (cos (2 * x2) + 3 * a * sin x2 + 11)^3 = 
  12 - 2 * sin^2 x2 + (3 * a - 2) * sin x2 - a^2 - a))  ‚à®
  (‚àÉ (a : ‚Ñù), ((2.5 ‚â§ a ‚àß a < 4) ‚à® (-5 ‚â§ a ‚àß a < -2))) :=
sorry

end find_a_for_distinct_solutions_l101_101889


namespace num_valid_x0_values_l101_101044

theorem num_valid_x0_values : 
  ‚àÉ (s : Finset ‚Ñù), (‚àÄ x_0 ‚àà s, 0 ‚â§ x_0 ‚àß x_0 < 1 ‚àß let f (x : ‚Ñù) := if 2 * x < 1 then 2 * x else 2 * x - 1 
                                                                in f (f (f x_0)) = x_0)
  ‚àß s.card = 8 := 
sorry

end num_valid_x0_values_l101_101044


namespace tetrahedral_intersection_parallelogram_l101_101196

-- Definitions for the problem
variables {Point Plane Line : Type}
variables (TetrahedralAngle : Point ‚Üí Plane ‚Üí Prop)
variables (intersection_line : Plane ‚Üí Plane ‚Üí Line)
variables (parallel_planes : Plane ‚Üí Plane ‚Üí Prop)

-- The problem statement
theorem tetrahedral_intersection_parallelogram
  (Œ± Œ±' Œ≤ Œ≤' : Plane)
  (a b : Line)
  (vertex : Point)
  (hŒ±Œ±' : intersection_line Œ± Œ±' = a)
  (hŒ≤Œ≤' : intersection_line Œ≤ Œ≤' = b)
  (h_parallel Œ± Œ±' : parallel_planes Œ± Œ±')
  (h_parallel Œ≤ Œ≤' : parallel_planes Œ≤ Œ≤')
  (h_a_through_vertex : TetrahedralAngle vertex Œ±)
  (h_b_through_vertex : TetrahedralAngle vertex Œ≤)
  : ‚àÉ (œÄ : Plane), ‚àÉ (lŒ± lŒ±' lŒ≤ lŒ≤' : Line),
    lŒ± = intersection_line Œ± œÄ ‚àß
    lŒ±' = intersection_line Œ±' œÄ ‚àß
    lŒ≤ = intersection_line Œ≤ œÄ ‚àß
    lŒ≤' = intersection_line Œ≤' œÄ ‚àß
    lŒ± = a ‚àß
    lŒ±' = a ‚àß
    lŒ≤ = b ‚àß
    lŒ≤' = b ‚àß
    parallel_planes lŒ± lŒ±' ‚àß
    parallel_planes lŒ≤ lŒ≤' := 
sorry

end tetrahedral_intersection_parallelogram_l101_101196


namespace inverse_proportion_relation_l101_101922

theorem inverse_proportion_relation :
  let y1 := 3 / (-2)
  let y2 := 3 / (-1)
  let y3 := 3 / 1
  y2 < y1 ‚àß y1 < y3 :=
by
  -- Variable definitions according to conditions
  let y1 := 3 / (-2)
  let y2 := 3 / (-1)
  let y3 := 3 / 1
  -- Proof steps go here (not required for the statement)
  -- Since proof steps are omitted, we use sorry to indicate it
  sorry

end inverse_proportion_relation_l101_101922


namespace not_perfect_square_l101_101653

noncomputable theory

-- Define the relevant parameters and conditions
variables (a b : ‚Ñï)
variables (ha : a ‚â† 0) (hb : b ‚â† 0)

-- Define the main theorem stating that the given integer is not a perfect square
theorem not_perfect_square : ¬¨ ‚àÉ c : ‚Ñ§, a^2 + ‚åà(4 * a^2 : ‚Ñö) / b‚åâ = c^2 := 
sorry

end not_perfect_square_l101_101653


namespace critics_voted_same_actor_actress_l101_101787

theorem critics_voted_same_actor_actress :
  ‚àÉ (critic1 critic2 : ‚Ñï) 
  (actor_vote1 actor_vote2 actress_vote1 actress_vote2 : ‚Ñï),
  1 ‚â§ critic1 ‚àß critic1 ‚â§ 3366 ‚àß
  1 ‚â§ critic2 ‚àß critic2 ‚â§ 3366 ‚àß
  (critic1 ‚â† critic2) ‚àß
  ‚àÉ (vote_count : Fin 100 ‚Üí ‚Ñï) 
  (actor actress : Fin 3366 ‚Üí Fin 100),
  (‚àÄ n : Fin 100, ‚àÉ act : Fin 100, vote_count act = n + 1) ‚àß
  actor critic1 = actor_vote1 ‚àß actress critic1 = actress_vote1 ‚àß
  actor critic2 = actor_vote2 ‚àß actress critic2 = actress_vote2 ‚àß
  actor_vote1 = actor_vote2 ‚àß actress_vote1 = actress_vote2 :=
by
  -- Proof omitted
  sorry

end critics_voted_same_actor_actress_l101_101787


namespace cos_minus_sin_l101_101904

theorem cos_minus_sin (Œ± : ‚Ñù) (h1 : sin Œ± * cos Œ± = 1 / 8) (h2 : œÄ / 4 < Œ± ‚àß Œ± < œÄ / 2) :
  cos Œ± - sin Œ± = - (real.sqrt 3) / 2 :=
sorry

end cos_minus_sin_l101_101904


namespace curve_line_intersect_range_l101_101579

theorem curve_line_intersect_range :
  ‚àÄ k : ‚Ñù, (‚àÉ (x1 x2 : ‚Ñù), x1 ‚â† x2 ‚àß y_sq_unit_circle x1 = y_line k x1 ‚àß y_sq_unit_circle x2 = y_line k x2) ‚Üí
  0 < k ‚àß k ‚â§ 1/2 :=
by
  -- Definitions
  let y_sq_unit_circle (x : ‚Ñù) : ‚Ñù := sqrt (1 - x^2)
  let y_line (k x : ‚Ñù) : ‚Ñù := k * (x - 1) + 1
  sorry

end curve_line_intersect_range_l101_101579


namespace quadratic_is_perfect_square_l101_101273

theorem quadratic_is_perfect_square (a b c : ‚Ñ§) 
  (h : ‚àÄ x : ‚Ñ§, ‚àÉ d e : ‚Ñ§, a*x^2 + b*x + c = (d*x + e)^2) : 
  ‚àÉ d e : ‚Ñ§, a = d^2 ‚àß b = 2*d*e ‚àß c = e^2 :=
sorry

end quadratic_is_perfect_square_l101_101273


namespace international_postage_surcharge_l101_101860

theorem international_postage_surcharge 
  (n_letters : ‚Ñï) 
  (std_postage_per_letter : ‚Ñö) 
  (n_international : ‚Ñï) 
  (total_cost : ‚Ñö) 
  (cents_per_dollar : ‚Ñö) 
  (std_total_cost : ‚Ñö) 
  : 
  n_letters = 4 ‚Üí
  std_postage_per_letter = 108 / 100 ‚Üí
  n_international = 2 ‚Üí
  total_cost = 460 / 100 ‚Üí
  cents_per_dollar = 100 ‚Üí
  std_total_cost = n_letters * std_postage_per_letter ‚Üí
  (total_cost - std_total_cost) / n_international * cents_per_dollar = 14 := 
sorry

end international_postage_surcharge_l101_101860


namespace sues_nuts_percentage_l101_101212

-- Define the conditions as formal Lean statements
variables (N: ‚Ñù) -- percentage of nuts in Sue's trail mix
variable (S_dried_fruit : ‚Ñù := 70) -- percentage of dried fruit in Sue's trail mix
variable (J_nuts : ‚Ñù := 60) -- percentage of nuts in Jane's trail mix
variable (J_chocolate_chips : ‚Ñù := 40) -- percentage of chocolate chips in Jane's trail mix
variable (combined_nuts : ‚Ñù := 45) -- percentage of nuts in the combined mixture
variable (combined_dried_fruit : ‚Ñù := 35) -- percentage of dried fruit in the combined mixture

-- Theorem statement to prove
theorem sues_nuts_percentage : 
  (N + J_nuts) / 2 = combined_nuts ‚Üí
  (combined_dried_fruit) = S_dried_fruit / 2 ‚Üí
  N = 30 :=
begin
  sorry,
end

end sues_nuts_percentage_l101_101212


namespace cos_double_angle_l101_101041

variable (Œ∏ : ‚Ñù)

theorem cos_double_angle (h : Real.tan (Œ∏ + Real.pi / 4) = 3) : Real.cos (2 * Œ∏) = 3 / 5 :=
sorry

end cos_double_angle_l101_101041


namespace median_AD_eq_altitude_BH_eq_l101_101989

noncomputable def Point := (‚Ñù √ó ‚Ñù)
noncomputable def Line := {l : ‚Ñù √ó ‚Ñù √ó ‚Ñù // l ‚â† 0}

def A : Point := (1, 3)
def B : Point := (5, 1)
def C : Point := (-1, -1)

-- Definitions for the midpoints and slope calculations
def midpoint (p1 p2 : Point) : Point :=
  let (x1, y1) := p1
  let (x2, y2) := p2
  ((x1 + x2) / 2, (y1 + y2) / 2)

def slope (p1 p2 : Point) : ‚Ñù :=
  let (x1, y1) := p1
  let (x2, y2) := p2
  (y2 - y1) / (x2 - x1)

def line_from_points (p1 p2 : Point) : Line :=
  let (x1, y1) := p1
  let (x2, y2) := p2
  ‚ü®(y2 - y1, x1 - x2, x2*y1 - x1*y2), by sorry‚ü©

def line_from_point_slope (p : Point) (m : ‚Ñù) : Line :=
  let (x1, y1) := p
  ‚ü®(m, -1, y1 - m*x1), by sorry‚ü©

-- Defining the points for computation
def D : Point := midpoint B C -- Midpoint of BC
def kAC : ‚Ñù := slope A C -- Slope of AC
def kBH : ‚Ñù := -(1 / kAC) -- Slope of BH, the negative reciprocal of AC

-- Lean statements for the proof problems
theorem median_AD_eq : line_from_points A D = ‚ü®(3, 1, -6), by sorry‚ü© := sorry

theorem altitude_BH_eq : line_from_point_slope B kBH = ‚ü®(1, 2, -7), by sorry‚ü© := sorry

end median_AD_eq_altitude_BH_eq_l101_101989


namespace deck_total_cost_is_32_l101_101287

-- Define the costs of each type of card
def rare_cost := 1
def uncommon_cost := 0.50
def common_cost := 0.25

-- Define the quantities of each type of card in Tom's deck
def rare_quantity := 19
def uncommon_quantity := 11
def common_quantity := 30

-- Define the total cost calculation
def total_cost : ‚Ñù := (rare_quantity * rare_cost) + (uncommon_quantity * uncommon_cost) + (common_quantity * common_cost)

-- Prove that the total cost of the deck is $32
theorem deck_total_cost_is_32 : total_cost = 32 := by
  sorry

end deck_total_cost_is_32_l101_101287


namespace color_lines_no_blue_perimeter_l101_101854

theorem color_lines_no_blue_perimeter (n : ‚Ñï) :
  ‚àÉ k, k ‚â• ‚åä‚àö(n / 2)‚åã ‚àß
       ‚àÄ (lines : fin n ‚Üí line), (‚àÄ i j, i ‚â† j ‚Üí ¬¨parallel (lines i) (lines j)) ‚àß
       (‚àÄ i j k, i ‚â† j ‚àß j ‚â† k ‚àß i ‚â† k ‚Üí ¬¨concurrent (lines i) (lines j) (lines k)) ‚Üí
       ‚àÉ (coloring : fin n ‚Üí bool), (coloring_count coloring = k) ‚àß
                                     (‚àÄ region, is_finite_region region ‚Üí 
                                                 perimeter_color region coloring ‚â† all_blue) := sorry

-- Definitions to make this precise would follow.

end color_lines_no_blue_perimeter_l101_101854


namespace coffee_cups_weekend_l101_101362

theorem coffee_cups_weekend (brew_per_hour : ‚Ñï) (hours_per_day : ‚Ñï)
                            (weekdays : ‚Ñï) (total_cups_per_week : ‚Ñï)
                            (weekend_cups : ‚Ñï) :
    brew_per_hour = 10 ‚Üí
    hours_per_day = 5 ‚Üí
    weekdays = 5 ‚Üí
    total_cups_per_week = 370 ‚Üí
    weekend_cups = total_cups_per_week - (brew_per_hour * hours_per_day * weekdays) ‚Üí
    weekend_cups = 120 :=
by
  intros h1 h2 h3 h4 h5
  rw [h1, h2, h3, mul_assoc] at h5
  simp at h5
  assumption

end coffee_cups_weekend_l101_101362


namespace martha_blue_butterflies_l101_101666

variables (B Y : Nat)

theorem martha_blue_butterflies (h_total : B + Y + 5 = 11) (h_twice : B = 2 * Y) : B = 4 :=
by
  sorry

end martha_blue_butterflies_l101_101666


namespace value_of_2_sin_alpha_l101_101970

theorem value_of_2_sin_alpha (Œ± : ‚Ñù) (hŒ± : Œ± = real.pi / 4) : 2 * real.sin Œ± = real.sqrt 2 :=
by
  sorry

end value_of_2_sin_alpha_l101_101970


namespace generalized_trig_identity_l101_101548

theorem generalized_trig_identity (Œ∏ : ‚Ñù) : 
    sin(Œ∏)^2 + cos(Œ∏ + (30 * (œÄ / 180)))^2 + sin(Œ∏) * cos(Œ∏ + (30 * (œÄ / 180))) = 3 / 4 := 
by
  sorry

end generalized_trig_identity_l101_101548


namespace range_of_t_l101_101660

theorem range_of_t
  (f : ‚Ñù ‚Üí ‚Ñù)
  (a t : ‚Ñù)
  (h_odd : ‚àÄ x, f (-x) = -f x)
  (h_increasing : ‚àÄ x y, x < y ‚Üí f x ‚â§ f y)
  (h_f_neg1 : f (-1) = -1)
  (h_a : a ‚àà set.Icc (-1:‚Ñù) 1)
  (h_ineq : ‚àÄ x ‚àà set.Icc (-1:‚Ñù) 1, f x ‚â§ t^2 - 2 * a * t + 1) :
  t ‚â• 2 ‚à® t ‚â§ -2 ‚à® t = 0 :=
sorry

end range_of_t_l101_101660


namespace zero_point_probability_l101_101824

open Set

theorem zero_point_probability :
  ‚àÄ a ‚àà Icc (-2 : ‚Ñù) 2, 
  (‚àÉ x, 4^x - a * 2^(x + 1) + 1 = 0) ‚Üí 
  (measure_of (Icc 1 2) (measure_space.volume.to_measure (by {})) / measure_of (Icc (-2 : ‚Ñù) 2) (measure_space.volume.to_measure (by {}))) = 1 / 4 :=
sorry

end zero_point_probability_l101_101824


namespace problem_solution_l101_101563

-- Definitions of the complex numbers and conditions
variables (a b c d e f : ‚Ñù)

def complex1 : ‚ÑÇ := ‚ü®a, b‚ü©
def complex2 : ‚ÑÇ := ‚ü®c, d‚ü©
def complex3 : ‚ÑÇ := ‚ü®e, f‚ü©

-- Stating the problem conditions
def condition_b : Prop := b = 4
def condition_e : Prop := e = -2 * a - c
def condition_sum : Prop := complex1 + complex2 + complex3 = ‚ü®0, 5‚ü©

-- The proof problem statement
theorem problem_solution (h_b : condition_b) (h_e : condition_e) (h_sum : condition_sum) : d + 2 * f = 1 :=
sorry

end problem_solution_l101_101563


namespace Q_evaluation_at_2_l101_101735

noncomputable def Q : Polynomial ‚Ñö := 
  (Polynomial.X^2 + Polynomial.C 4)^2

theorem Q_evaluation_at_2 : 
  Q.eval 2 = 64 :=
by 
  -- We'll skip the proof as per the instructions.
  sorry

end Q_evaluation_at_2_l101_101735


namespace general_term_sequence_x_l101_101630

-- Definitions used in Lean statement corresponding to the conditions.
noncomputable def sequence_a (n : ‚Ñï) : ‚Ñù := sorry

noncomputable def sequence_x (n : ‚Ñï) : ‚Ñù := sorry

axiom condition_1 : ‚àÄ n : ‚Ñï, 
  ((sequence_a (n + 2))‚Åª¬π = ((sequence_a n)‚Åª¬π + (sequence_a (n + 1))‚Åª¬π) / 2)

axiom condition_2 {n : ‚Ñï} : sequence_x n > 0

axiom condition_3 : sequence_x 1 = 3

axiom condition_4 : sequence_x 1 + sequence_x 2 + sequence_x 3 = 39

axiom condition_5 (n : ‚Ñï) : (sequence_x n)^(sequence_a n) = 
  (sequence_x (n + 1))^(sequence_a (n + 1)) ‚àß 
  (sequence_x (n + 1))^(sequence_a (n + 1)) = 
  (sequence_x (n + 2))^(sequence_a (n + 2))

-- Theorem stating that the general term of sequence {x_n} is 3^n.
theorem general_term_sequence_x : ‚àÄ n : ‚Ñï, sequence_x n = 3^n :=
by
  sorry

end general_term_sequence_x_l101_101630


namespace maximum_length_of_third_side_l101_101214

noncomputable def maximum_third_side (a b : ‚Ñù) (A B C : ‚Ñù) : ‚Ñù :=
  if A = 60 ‚à® B = 60 ‚à® C = 60 then
    let c_squared := a^2 + b^2 - 2 * a * b * Real.cos (Real.pi / 3)
    in Real.sqrt c_squared
  else 0

theorem maximum_length_of_third_side {A B C : ‚Ñù} {a b : ‚Ñù}
  (h1 : a = 7) (h2 : b = 24)
  (h3 : Real.cos (2 * A) + Real.cos (2 * B) + Real.cos (2 * C) = 1)
  (h4 : A = 60 ‚à® B = 60 ‚à® C = 60) :
  maximum_third_side 7 24 A B C = Real.sqrt 457 :=
by {
  sorry
}

end maximum_length_of_third_side_l101_101214


namespace min_length_of_normal_chord_l101_101707

/-- 
Given a parabola P with focus a distance m from the directrix,
and a chord AB normal to P at A, the minimum length of AB is 3‚àö3 * p.
-/
theorem min_length_of_normal_chord 
  (p m : ‚Ñù) (h_focus_dist : m = p / 2) 
  (A B : ‚Ñù √ó ‚Ñù) 
  (hA_on_parabola : A.2 ^ 2 = 2 * p * A.1)
  (hAB_normal : A.2 = -2 * A.2 * (B.1 - A.1) + 4 * p * (A.2 ^ 3) + 2 * p * A.2)
  : dist A B >= 3 * real.sqrt 3 * p := sorry

end min_length_of_normal_chord_l101_101707


namespace largest_k_log3_l101_101475

-- Define the tower function T 
def T : ‚Ñï ‚Üí ‚Ñù 
| 1 := 3
| (n + 1) := 3 ^ (T n)

-- Definitions of A and B
def A := T 4
def B := A ^ A

-- Prove that the largest integer k for which the nested log_3 is defined is 4
theorem largest_k_log3 (k : ‚Ñï) : 
  (k = 4) ‚Üí ‚àÄ B, ‚àÉ A, A = 3 ^ (3 ^ (3 ^ 27)) ‚Üí B = A ^ A ‚Üí ¬¨ defined (iterate (log 3) k B) := sorry

end largest_k_log3_l101_101475


namespace complex_division_product_l101_101929

theorem complex_division_product
  (i : ‚ÑÇ)
  (h_exp: i * i = -1)
  (a b : ‚Ñù)
  (h_div: (1 + 7 * i) / (2 - i) = a + b * i)
  : a * b = -3 := 
sorry

end complex_division_product_l101_101929


namespace count_multiples_of_7_with_units_digit_7_less_than_150_l101_101084

-- Definition of the problem's conditions and expected result
theorem count_multiples_of_7_with_units_digit_7_less_than_150 : 
  let multiples_of_7 := { n : Nat // n < 150 ‚àß n % 7 = 0 }
  let units_digit_7_multiples := { n : Nat // n < 150 ‚àß n % 7 = 0 ‚àß n % 10 = 7 }
  List.length (units_digit_7_multiples.members) = 3 :=
by
  sorry

end count_multiples_of_7_with_units_digit_7_less_than_150_l101_101084


namespace value_of_n_l101_101763

theorem value_of_n (n : ‚Ñù) (h : n + (n + 1) + (n + 2) + (n + 3) = 20) : n = 3.5 :=
by sorry

end value_of_n_l101_101763


namespace general_formula_an_sum_b_formula_l101_101661

-- Definitions for the given conditions
def seq_a (n : ‚Ñï) : ‚Ñï := 
  if n = 0 then 0 -- Not defined for n=0, but ensuring n ‚àà ‚Ñï as per Lean's type system.
  else if n = 1 then 1
  else 4 * 3^(n - 2)

def sum_first_n (n : ‚Ñï) : ‚Ñï := 
  nat.rec_on n 0 (Œª n sum_n, sum_n + seq_a (n + 1))

axiom initial_condition : seq_a 1 = 1
axiom recursive_condition : ‚àÄ n : ‚Ñï, n > 0 ‚Üí sum_first_n (n + 1) = 3 * (sum_first_n n) + 1

def seq_b (n : ‚Ñï) : ‚Ñö := 
  if n = 1 then 8 / (seq_a 2 - seq_a 1)
  else 8 * n / (seq_a (n + 1) - seq_a n)

def sum_b (n : ‚Ñï) : ‚Ñö := 
  (finset.range n).sum (Œª i, seq_b (i + 1))

-- Proof problems
theorem general_formula_an : 
  ‚àÄ n : ‚Ñï, 
  if n = 1 then seq_a n = 1
  else seq_a n = 4 * 3^(n - 2) :=
sorry

theorem sum_b_formula : 
  ‚àÄ n : ‚Ñï, 
  sum_b n = 77 / 12 - (2 * n + 3) / (4 * 3^(n - 2)) :=
sorry

end general_formula_an_sum_b_formula_l101_101661


namespace unicorn_tether_l101_101832

theorem unicorn_tether (a b c : ‚Ñï) (h_c_prime : Prime c) :
  (‚àÉ (a b c : ‚Ñï), c = 1 ‚àß (25 - 15 = 10 ‚àß 10^2 + 10^2 = 15^2 ‚àß 
  a = 10 ‚àß b = 125) ‚àß a + b + c = 136) :=
  sorry

end unicorn_tether_l101_101832


namespace sum_of_first_9000_terms_of_geometric_sequence_l101_101261

noncomputable def geometric_sum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r^n) / (1 - r)

theorem sum_of_first_9000_terms_of_geometric_sequence 
  (a r : ‚Ñù)
  (h‚ÇÅ : geometric_sum a r 3000 = 500)
  (h‚ÇÇ : geometric_sum a r 6000 = 950)
  : geometric_sum a r 9000 = 1355 :=
sorry

end sum_of_first_9000_terms_of_geometric_sequence_l101_101261


namespace range_of_a_l101_101112

theorem range_of_a (a : ‚Ñù) :
  (‚àÄ x ‚àà Iic (1 / 2), deriv (Œª x, a * x^2 - (2 - a) * x + 1) x ‚â§ 0) ‚Üî 0 ‚â§ a ‚àß a ‚â§ 1 :=
by
  sorry

end range_of_a_l101_101112


namespace count_multiples_of_7_with_units_digit_7_less_than_150_l101_101085

-- Definition of the problem's conditions and expected result
theorem count_multiples_of_7_with_units_digit_7_less_than_150 : 
  let multiples_of_7 := { n : Nat // n < 150 ‚àß n % 7 = 0 }
  let units_digit_7_multiples := { n : Nat // n < 150 ‚àß n % 7 = 0 ‚àß n % 10 = 7 }
  List.length (units_digit_7_multiples.members) = 3 :=
by
  sorry

end count_multiples_of_7_with_units_digit_7_less_than_150_l101_101085


namespace geometric_sequence_sum_l101_101269

noncomputable theory

-- Define the conditions and the problem statement
theorem geometric_sequence_sum (a r : ‚Ñù) (h‚ÇÅ : a * (1 - r^3000) / (1 - r) = 500) 
  (h‚ÇÇ : a * (1 - r^6000) / (1 - r) = 950) : 
  a * (1 - r^9000) / (1 - r) = 1355 := 
sorry

end geometric_sequence_sum_l101_101269


namespace abs_sum_binom_expansion_l101_101943

theorem abs_sum_binom_expansion :
  let a := (1 - 3 * x)^9,
  let sum_absolutes := ‚àë k in Finset.range 10, |(Nat.choose 9 k) * (-3)^k|,
  sum_absolutes = 4^9 :=
by
  sorry

end abs_sum_binom_expansion_l101_101943


namespace Nishita_preferred_shares_l101_101192

variable (P : ‚Ñï)

def preferred_share_dividend : ‚Ñï := 5 * P
def common_share_dividend : ‚Ñï := 3500 * 3  -- 3.5 * 1000

theorem Nishita_preferred_shares :
  preferred_share_dividend P + common_share_dividend = 16500 ‚Üí P = 1200 :=
by
  unfold preferred_share_dividend common_share_dividend
  intro h
  sorry

end Nishita_preferred_shares_l101_101192


namespace problem_solution_l101_101658

theorem problem_solution (x y : ‚Ñù)
  (h : x * y + x / y + y / x = 3) :
  (‚àÉ a ‚àà {3, 4}, (x + 1) * (y + 1) = a) ‚Üí 
  (x + 1) * (y + 1) ‚àà {3, 4} ‚Üí 
  3 + 4 = 7 :=
by
  -- The proof is omitted
  sorry

end problem_solution_l101_101658


namespace multiples_of_7_with_units_digit_7_number_of_multiples_of_7_with_units_digit_7_l101_101098

theorem multiples_of_7_with_units_digit_7 (n : ‚Ñï) : 
  (n < 150 ‚àß ‚àÉ k : ‚Ñï, n = 7 * k ‚àß n % 10 = 7) ‚Üî 
  n = 7 ‚à® n = 77 ‚à® n = 147 := 
by 
  sorry

theorem number_of_multiples_of_7_with_units_digit_7 : 
  ‚àÉ m, m = 3 ‚àß ‚àÄ n : ‚Ñï, (n < 150 ‚àß ‚àÉ k : ‚Ñï, n = 7 * k ‚àß n % 10 = 7) ‚Üí n = 7 ‚à® n = 77 ‚à® n = 147 := 
by 
  use 3
  intros n
  intros hn
  split
  intro h
  cases h
  sorry

end multiples_of_7_with_units_digit_7_number_of_multiples_of_7_with_units_digit_7_l101_101098


namespace angle_equality_l101_101900

-- Definitions for the problem conditions
variables {A B C M N : Type}
variables [metric_space A] [metric_space B] [metric_space C] [metric_space M] [metric_space N]

-- Assume that triangle ABC is a right triangle at B
axiom right_triangle (A B C : Type) : A ‚â† B ‚Üí B ‚â† C ‚Üí A ‚â† C ‚Üí angle B A C = 90

-- Assume M is an arbitrary point on the side BC
axiom point_on_BC (M : Type) : M ‚àà segment B C

-- Assume MN is perpendicular to AB
axiom perp_MN_to_AB (M N A B : Type) : N ‚àà line A B ‚Üí angle M N A = 90

-- The proof goal
theorem angle_equality {A B C M N : Type} [metric_space A] [metric_space B] [metric_space C] [metric_space M] [metric_space N]
  (h‚ÇÅ : right_triangle A B C)
  (h‚ÇÇ : point_on_BC M)
  (h‚ÇÉ : perp_MN_to_AB M N A B) :
  angle M A N = angle M C N :=
sorry

end angle_equality_l101_101900


namespace reena_interest_paid_l101_101200

-- Definitions based on conditions
def principal : ‚Ñù := 1200
def rate : ‚Ñù := 0.03
def time : ‚Ñù := 3

-- Definition of simple interest calculation based on conditions
def simple_interest (P R T : ‚Ñù) : ‚Ñù := P * R * T

-- Statement to prove that Reena paid $108 as interest
theorem reena_interest_paid : simple_interest principal rate time = 108 := by
  sorry

end reena_interest_paid_l101_101200


namespace find_a_range_l101_101072

noncomputable def f (x : ‚Ñù) : ‚Ñù :=
  if x < 1 then |x| + 2 else x + 2 / x

theorem find_a_range (a : ‚Ñù) :
  (‚àÄ x : ‚Ñù, f x ‚â• |x / 2 + a|) ‚Üî (-2 ‚â§ a ‚àß a ‚â§ 2) :=
by
  sorry

end find_a_range_l101_101072


namespace minimal_sum_of_matrix_elements_l101_101173

theorem minimal_sum_of_matrix_elements (a b c d : ‚Ñ§) 
    (h1 : a ‚â† 0) 
    (h2 : b ‚â† 0) 
    (h3 : c ‚â† 0) 
    (h4 : d ‚â† 0) 
    (h5 : (Matrix.vecCons (Matrix.vecCons a (Matrix.vecCons b Matrix.vecEmpty))
                         (Matrix.vecCons (Matrix.vecCons c (Matrix.vecCons d Matrix.vecEmpty))
                         (Matrix.vecCons 0 (Matrix.vecCons 0 Matrix.vecEmpty))))
          ^2 = 
    (Matrix.vecCons (Matrix.vecCons 12 (Matrix.vecCons 0 Matrix.vecEmpty))
                   (Matrix.vecCons (Matrix.vecCons 0 (Matrix.vecCons 12 Matrix.vecEmpty))
                   (Matrix.vecCons 0 (Matrix.vecCons 0 Matrix.vecEmpty))))) :
    ‚àÉ a b c d, |a| + |b| + |c| + |d| = 10 :=
sorry

end minimal_sum_of_matrix_elements_l101_101173


namespace Q_at_2_l101_101725

-- Define the polynomial Q(x)
def Q (x : ‚Ñö) : ‚Ñö := x^4 - 8 * x^2 + 16

-- Define the properties of Q(x)
def is_special_polynomial (P : (‚Ñö ‚Üí ‚Ñö)) : Prop := 
  degree P = 4 ‚àß leading_coeff P = 1 ‚àß P.is_root(‚àö3 + ‚àö7)

-- Problem: Prove Q(2) = 0 given the polynomial Q meets the conditions.
theorem Q_at_2 (Q : ‚Ñö ‚Üí ‚Ñö) (h1 : degree Q = 4) (h2 : leading_coeff Q = 1) (h3 : is_root Q (‚àö3 + ‚àö7)) : 
  Q 2 = 0 := by
  sorry

end Q_at_2_l101_101725


namespace number_of_integer_points_in_triangle_l101_101240

theorem number_of_integer_points_in_triangle : 
  let triangle_OAB := {p : ‚Ñ§ √ó ‚Ñ§ | 0 < p.1 ‚àß p.1 < 100 ‚àß 0 < p.2 ‚àß p.2 < 2 * p.1} in
  finset.card (finset.filter (Œª p, p ‚àà triangle_OAB) (finset.Icc (0, 0) (100, 200))) = 9801 :=
by 
  sorry

end number_of_integer_points_in_triangle_l101_101240


namespace find_a_b_g_increasing_l101_101550

noncomputable def f (a b x : ‚Ñù) : ‚Ñù := (1 + a * x^2) / (x + b)

noncomputable def g (a b x : ‚Ñù) : ‚Ñù := x * f a b x

theorem find_a_b (a b : ‚Ñù) (h‚ÇÅ : f a b 1 = 3) (h‚ÇÇ : ‚àÄ x : ‚Ñù, g a b x = g a b (-x)) :
  a = 2 ‚àß b = 0 := 
  sorry

theorem g_increasing (a b : ‚Ñù) (h‚ÇÅ : f a b 1 = 3) (h‚ÇÇ : ‚àÄ x : ‚Ñù, g a b x = g a b (-x)) 
  (ha : a = 2) (hb : b = 0) : 
  ‚àÄ x‚ÇÅ x‚ÇÇ : ‚Ñù, 1 < x‚ÇÅ ‚Üí x‚ÇÅ < x‚ÇÇ ‚Üí g a b x‚ÇÅ < g a b x‚ÇÇ := 
  sorry

end find_a_b_g_increasing_l101_101550


namespace diagonal_of_rectangle_l101_101752

noncomputable def L : ‚Ñù := 40 * Real.sqrt 3
noncomputable def W : ‚Ñù := 30 * Real.sqrt 3
noncomputable def d : ‚Ñù := Real.sqrt (L^2 + W^2)

theorem diagonal_of_rectangle :
  d = 50 * Real.sqrt 3 :=
by sorry

end diagonal_of_rectangle_l101_101752


namespace geometric_sequence_sum_l101_101256

theorem geometric_sequence_sum
  (a r : ‚Ñù)
  (h1 : a * (1 - r ^ 3000) / (1 - r) = 500)
  (h2 : a * (1 - r ^ 6000) / (1 - r) = 950) :
  a * (1 - r ^ 9000) / (1 - r) = 1355 :=
sorry

end geometric_sequence_sum_l101_101256


namespace sqrt_factorial_mul_self_eq_sqrt_factorial_mul_self_value_l101_101759

theorem sqrt_factorial_mul_self_eq :
  sqrt ((5!) * (5!)) = 5! :=
by sorry

theorem sqrt_factorial_mul_self_value :
  sqrt ((5!) * (5!)) = 120 :=
by {
  rw sqrt_factorial_mul_self_eq,
  norm_num,
  exact rfl,
  sorry
}

end sqrt_factorial_mul_self_eq_sqrt_factorial_mul_self_value_l101_101759


namespace truck_speed_in_mph_l101_101243

-- Definitions based on the conditions
def truck_length : ‚Ñù := 66  -- Truck length in feet
def tunnel_length : ‚Ñù := 330  -- Tunnel length in feet
def exit_time : ‚Ñù := 6  -- Exit time in seconds
def feet_to_miles : ‚Ñù := 5280  -- Feet per mile

-- Problem statement
theorem truck_speed_in_mph :
  ((tunnel_length + truck_length) / exit_time) * (3600 / feet_to_miles) = 45 := 
sorry

end truck_speed_in_mph_l101_101243


namespace rectangle_area_and_diagonal_length_l101_101141

theorem rectangle_area_and_diagonal_length
  (A B C D : Point)
  (AB AC AD BD : ‚Ñù)
  (hAB : AB = 15)
  (hAC : AC = 17)
  (hRect : rectangle A B C D)
  (hDiag : AC = distance A C) :
  area (rectangle A B C D) = 120 ‚àß distance B D = 17 := by
  sorry

end rectangle_area_and_diagonal_length_l101_101141


namespace log_relationship_l101_101038

noncomputable def log_m (m x : ‚Ñù) : ‚Ñù := Real.log x / Real.log m

theorem log_relationship (m : ‚Ñù) (h‚ÇÄ : 0 < m) (h‚ÇÅ : m < 1) :
  log_m m 0.3 > log_m m 0.5 :=
by
  sorry

end log_relationship_l101_101038


namespace roots_quadratic_reciprocal_l101_101685

theorem roots_quadratic_reciprocal (x1 x2 : ‚Ñù) (h1 : x1 + x2 = -8) (h2 : x1 * x2 = 4) :
  (1 / x1) + (1 / x2) = -2 :=
sorry

end roots_quadratic_reciprocal_l101_101685


namespace general_formula_sequence_sum_of_first_n_terms_maximum_value_S_n_l101_101662

noncomputable def a_n (n : ‚Ñï) := 48 - 8 * n

noncomputable def S_n (n : ‚Ñï) := -4 * n^2 + 44 * n

theorem general_formula_sequence (a_3 : ‚Ñï := 24) (S_11 : ‚Ñï := 0) :
  (a_n 3 = 24) ‚àß (S_n 11 = 0) ‚Üí ‚àÄ n, a_n n = 48 - 8 * n := sorry

theorem sum_of_first_n_terms (a_3 : ‚Ñï := 24) (S_11 : ‚Ñï := 0) :
  (a_n 3 = 24) ‚àß (S_n 11 = 0) ‚Üí ‚àÄ n, S_n n = -4 * n^2 + 44 * n := sorry

theorem maximum_value_S_n (a_3 : ‚Ñï := 24) (S_11 : ‚Ñï := 0) :
  (a_n 3 = 24) ‚àß (S_n 11 = 0) ‚Üí
  (S_n 5 = 120 ‚àß S_n 6 = 120) := sorry

end general_formula_sequence_sum_of_first_n_terms_maximum_value_S_n_l101_101662


namespace water_left_in_cooler_l101_101329

def initial_gallons := 3
def ounces_per_gallon := 128
def dixie_cup_ounces := 6
def rows_of_chairs := 5
def chairs_per_row := 10

theorem water_left_in_cooler :
  let initial_ounces := initial_gallons * ounces_per_gallon,
      total_chairs := rows_of_chairs * chairs_per_row,
      total_ounces_used := total_chairs * dixie_cup_ounces,
      final_ounces := initial_ounces - total_ounces_used
  in final_ounces = 84 :=
  sorry

end water_left_in_cooler_l101_101329


namespace correct_option_l101_101325

theorem correct_option (a b : ‚ÑÇ) :
  ¬¨ (a^2 + a^2 = a^4) ‚àß ¬¨ ((a^2)^3 = a^5) ‚àß ¬¨ (a + 2 = 2a) ‚àß ((ab)^3 = a^3 * b^3) := 
by
  split
  ¬∑ intro h
    apply h
    sorry 
  split
  ¬∑ intro h
    apply h
    sorry
  split
  ¬∑ intro h
    apply h
    sorry
  ¬∑ exact sorry

end correct_option_l101_101325


namespace light_travel_time_l101_101714

open Real

def speedOfLight := 300000 -- speed of light in kilometers per second
def distanceSunToEarth := 150000000 -- distance from the Sun to the Earth in kilometers

theorem light_travel_time :
  (distanceSunToEarth / (speedOfLight * 60)).round = 8.3 :=
by
  -- Proof omitted, only the statement is required
  sorry

end light_travel_time_l101_101714


namespace math_problem_l101_101783

theorem math_problem :
  ((34.2735 * 18.9251) / 6.8307 + 128.0021 - 56.1193) ‚âà 166.8339 :=
by
  sorry

end math_problem_l101_101783


namespace at_least_two_babies_speak_l101_101120

theorem at_least_two_babies_speak (p : ‚Ñö) (h : p = 1/5) :
  let q := 1 - p in
  let none_speak := q^7 in
  let one_speaks := (7.choose 1) * p * q^6 in
  let at_most_one_speaks := none_speak + one_speaks in
  let result := 1 - at_most_one_speaks in
  result = 50477 / 78125 :=
by
  simp [h]
  sorry

end at_least_two_babies_speak_l101_101120


namespace sqrt_factorial_l101_101756

theorem sqrt_factorial : Real.sqrt (Real.ofNat (Nat.factorial 5) * Real.ofNat (Nat.factorial 5)) = 120 := 
by 
  sorry

end sqrt_factorial_l101_101756


namespace length_AB_circ_quad_l101_101615

theorem length_AB_circ_quad (Œ± Œ≤ Œ≥ Œ¥ : ‚Ñù) (a b c d : ‚Ñù)
  (A B C D E : Type) [circle_quad A B C D]
  (h1 : Œ± = 90) (h2 : Œ≤ = 120) (h3 : Œ≥ = 120) (h4 : c = 1):
  ‚àÉ x, x = 2 - real.sqrt 3 :=
begin
  sorry
end

end length_AB_circ_quad_l101_101615


namespace coeff_of_term_with_inverse_x_l101_101542

-- Given condition
def sum_of_binomial_coeff (n : ‚Ñï) : ‚Ñï := 2^n

-- Statement of the problem without providing a direct proof
theorem coeff_of_term_with_inverse_x 
: (sum_of_binomial_coeff 7 = 128) ‚Üí 
  (binom_coeff : ‚àÄ r : ‚Ñï, r ‚â§ 7 ‚Üí 
  Nat.choose 7 r * (2^((7 - r) * 2)) * (-1)^r * x^((7 - r) * 2 - r) ‚Üí Int) ‚Üí 
  (r = 5) ‚Üí 
  (binom_coeff 5 ‚â§ 7 = -84) := 
by sorry

end coeff_of_term_with_inverse_x_l101_101542


namespace average_students_l101_101717

def ClassGiraffe : ‚Ñï := 225

def ClassElephant (giraffe: ‚Ñï) : ‚Ñï := giraffe + 48

def ClassRabbit (giraffe: ‚Ñï) : ‚Ñï := giraffe - 24

theorem average_students (giraffe : ‚Ñï) (elephant : ‚Ñï) (rabbit : ‚Ñï) :
  giraffe = 225 ‚Üí elephant = giraffe + 48 ‚Üí rabbit = giraffe - 24 ‚Üí
  (giraffe + elephant + rabbit) / 3 = 233 := by
  sorry

end average_students_l101_101717


namespace workshop_workers_l101_101219

noncomputable def average_salary_all : ‚Ñù := 850
noncomputable def num_technicians : ‚Ñï := 7
noncomputable def average_salary_technicians : ‚Ñù := 1000
noncomputable def average_salary_non_technicians : ‚Ñù := 780
noncomputable def total_number_of_workers : ‚Ñï := 22

theorem workshop_workers :
  ‚àÉ W : ‚Ñù, W = total_number_of_workers ‚àß 
  (average_salary_all * W = (num_technicians * average_salary_technicians) + 
                           ((W - num_technicians) * average_salary_non_technicians)) :=
by
  use 22
  split
  ¬∑ rfl
  ¬∑ sorry

end workshop_workers_l101_101219


namespace impossible_to_make_all_points_red_l101_101718

-- Definitions taken from step a)
def Circle := { points : List (Bool) // points ‚â† [] }
-- True represents a red point and False represents a blue point

-- Statement for the mathematically equivalent proof problem
theorem impossible_to_make_all_points_red (circle : Circle) : 
  ‚àÉ blue_point ‚àà circle.points, true :=
begin
  sorry

end impossible_to_make_all_points_red_l101_101718


namespace value_of_œâ_value_of_œÜ_sum_S_30_l101_101946

-- First, we define the parameters and constraints.
variables {œâ : ‚Ñù} {œÜ : ‚Ñù}

-- Given function: f(x) = 2 * sin(œâ * x + œÜ)
def f (x : ‚Ñù) : ‚Ñù := 2 * Real.sin (œâ * x + œÜ)

-- Given constraints:
axiom œâ_pos : œâ > 0
axiom œÜ_bound : |œÜ| < Real.pi
axiom passes_through_1 : f (Real.pi / 12) = -2
axiom passes_through_2 : f (7 * Real.pi / 12) = 2
axiom monotonic_in_interval : ‚àÄ x y, (Real.pi / 12 ‚â§ x ‚àß x < y ‚àß y ‚â§ 7 * Real.pi / 12) ‚Üí f x ‚â§ f y

-- Question (I): Prove the values of œâ and œÜ.
theorem value_of_œâ : œâ = 2 := sorry
theorem value_of_œÜ : œÜ = -2 * Real.pi / 3 := sorry

-- Definition of a_n and its sequence.
def a_n (n : ‚Ñï) : ‚Ñù := n * f (n * Real.pi / 3)

-- Sum of the first 30 terms of the sequence {a_n}
def S_30 : ‚Ñù := (Finset.range 30).sum (Œª n, a_n (n + 1))

-- Question (II): Prove the sum S_30.
theorem sum_S_30 : S_30 = -10 * Real.sqrt 3 := sorry

end value_of_œâ_value_of_œÜ_sum_S_30_l101_101946


namespace mono_increasing_omega_range_l101_101551

noncomputable def omega (œâ : ‚Ñù) : Prop :=
  (0 < œâ) ‚àß (œâ ‚â§ 3 / 4)

theorem mono_increasing_omega_range
  (œâ : ‚Ñù) (hœâ : omega œâ) :
  ‚àÄ x ‚àà set.Icc (-œÄ / 4) (2 * œÄ / 3), 
  0 ‚â§ 2 * œâ * real.cos (œâ * x) :=
by
  sorry

end mono_increasing_omega_range_l101_101551


namespace sqrt_factorial_l101_101755

theorem sqrt_factorial : Real.sqrt (Real.ofNat (Nat.factorial 5) * Real.ofNat (Nat.factorial 5)) = 120 := 
by 
  sorry

end sqrt_factorial_l101_101755


namespace three_digit_subtraction_l101_101272

theorem three_digit_subtraction (c d : ‚Ñï) (H1 : 0 ‚â§ c ‚àß c ‚â§ 9) (H2 : 0 ‚â§ d ‚àß d ‚â§ 9) :
  (745 - (300 + c * 10 + 4) = (400 + d * 10 + 1)) ‚àß ((4 + 1) - d % 11 = 0) ‚Üí 
  c + d = 14 := 
sorry

end three_digit_subtraction_l101_101272


namespace total_handshakes_l101_101845

theorem total_handshakes (sets_of_twins : ‚Ñï) (sets_of_triplets : ‚Ñï)
  (total_twins : ‚Ñï) (total_triplets : ‚Ñï)
  (handshakes_among_twins : ‚Ñï) (handshakes_among_triplets : ‚Ñï)
  (cross_handshakes_twins : ‚Ñï) (cross_handshakes_triplets : ‚Ñï) 
  (total_handshakes : ‚Ñï):
  sets_of_twins = 10 ‚Üí sets_of_triplets = 7 ‚Üí
  total_twins = sets_of_twins * 2 ‚Üí
  total_triplets = sets_of_triplets * 3 ‚Üí
  handshakes_among_twins = total_twins * (total_twins - 2) / 2 ‚Üí
  handshakes_among_triplets = total_triplets * (total_triplets - 3) / 2 ‚Üí
  cross_handshakes_twins = total_twins * (total_triplets / 3) ‚Üí
  cross_handshakes_triplets = total_triplets * (total_twins / 4) ‚Üí
  total_handshakes = handshakes_among_twins + handshakes_among_triplets + cross_handshakes_twins + cross_handshakes_triplets ‚Üí
  total_handshakes = 614 :=
by {
  intros h1 h2 h3 h4 h5 h6 h7 h8 h9,
  subst h1,
  subst h2,
  subst h3,
  subst h4,
  subst h5,
  subst h6,
  subst h7,
  subst h8,
  subst h9,
  -- Additional proof details would go here
  sorry
}

end total_handshakes_l101_101845


namespace relationship_y‚ÇÅ_y‚ÇÇ_y‚ÇÉ_l101_101924

variables (y‚ÇÅ y‚ÇÇ y‚ÇÉ : ‚Ñù)

def inverse_proportion (x : ‚Ñù) : ‚Ñù := 3 / x

-- Given points A(-2, y‚ÇÅ), B(-1, y‚ÇÇ), C(1, y‚ÇÉ)
-- and y‚ÇÅ = inverse_proportion(-2), y‚ÇÇ = inverse_proportion(-1), y‚ÇÉ = inverse_proportion(1)
theorem relationship_y‚ÇÅ_y‚ÇÇ_y‚ÇÉ : 
  let y‚ÇÅ := inverse_proportion (-2),
      y‚ÇÇ := inverse_proportion (-1),
      y‚ÇÉ := inverse_proportion (1) in
  y‚ÇÇ < y‚ÇÅ ‚àß y‚ÇÅ < y‚ÇÉ :=
by
  sorry

end relationship_y‚ÇÅ_y‚ÇÇ_y‚ÇÉ_l101_101924


namespace distinct_patterns_count_l101_101788

def initial_table := matrix (fin 3) (fin 3) bool

def toggle (m : matrix (fin 3) (fin 3) bool) (i j : fin 2) : matrix (fin 3) (fin 3) bool :=
  Œª x y => if (x.val = i.val ‚à® x.val = i.val + 1) ‚àß (y.val = j.val ‚à® y.val = j.val + 1) then not (m x y) else (m x y)

def toggle_sequence (seq : list (fin 2 √ó fin 2)) (m : matrix (fin 3) (fin 3) bool) : matrix (fin 3) (fin 3) bool :=
  seq.foldl (Œª m p => toggle m p.1 p.2) m

def patterns (seqs : list (list (fin 2 √ó fin 2))) : set (matrix (fin 3) (fin 3) bool) :=
  seqs.map (toggle_sequence initial_table) |>.to_finset.to_set

def count_patterns : ‚Ñï :=
  patterns (list.fin_enum (list {p : fin 2 √ó fin 2 // true})).card

theorem distinct_patterns_count : count_patterns = 16 := sorry

end distinct_patterns_count_l101_101788


namespace unsatisfactory_grade_fraction_l101_101361

theorem unsatisfactory_grade_fraction 
  (num_A num_B num_C num_D num_F : ‚Ñï) 
  (htotal : num_A = 6 ‚àß num_B = 5 ‚àß num_C = 4 ‚àß num_D = 2 ‚àß num_F = 8)
  (hsatisfactory : (grades : ‚Ñï) ‚Üí grades = num_A + num_B + num_C + num_D + num_F = 25) :
  num_F / (num_A + num_B + num_C + num_D + num_F) = 8 / 25 := 
by
  sorry

end unsatisfactory_grade_fraction_l101_101361


namespace closed_set_B_l101_101002

-- Given definition of a closed set
def isClosed (A : Set ‚Ñ§) : Prop :=
‚àÄ a b ‚àà A, (a + b) ‚àà A ‚àß (a - b) ‚àà A

-- Specific set B
def B : Set ‚Ñ§ := {n | ‚àÉ k : ‚Ñ§, n = 3 * k}

-- The proof problem statement
theorem closed_set_B : isClosed B :=
sorry

end closed_set_B_l101_101002


namespace fifth_term_is_zero_l101_101696

variable (x y : ‚Ñù)

-- First four terms of the arithmetic sequence
def first_term : ‚Ñù := x + 3 * y
def second_term : ‚Ñù := x - 3 * y
def third_term : ‚Ñù := 2 * x * y
def fourth_term : ‚Ñù := 2 * x / y

-- Common difference
def common_difference : ‚Ñù := second_term x y - first_term x y

-- Expression for the fifth term
def fifth_term : ‚Ñù := fourth_term x y + common_difference x y

-- Ensure x and y values satisfy the conditions
def valid_xy : Prop := (x = 9 * y / (1 - 2 * y)) ‚àß (y = -1)

-- The fifth term is equal to 0 given the conditions on x and y
theorem fifth_term_is_zero (h : valid_xy x y) : fifth_term x y = 0 :=
by {
  sorry
}

end fifth_term_is_zero_l101_101696


namespace FourColorTheorem_l101_101692

-- Define the condition of the normal map
def NormalMap (V : Type) (E : Type) : Prop :=
  ‚àÉ (regions : Finset V) (borders : Finset E),
  (‚àÄ e ‚àà borders, ‚àÉ n : ‚Ñï, 1 ‚â§ n ‚àß n ‚â§ 3)
  ‚àß (‚àÄ r‚ÇÅ r‚ÇÇ ‚àà regions, r‚ÇÅ ‚â† r‚ÇÇ ‚Üí ‚àÉ e ‚àà borders, connects e r‚ÇÅ r‚ÇÇ)

-- Define the function stating the coloring condition
def ProperlyColored (V : Type) (E : Type) (colors : V ‚Üí ‚Ñï) : Prop :=
  ‚àÄ (r‚ÇÅ r‚ÇÇ : V), (‚àÉ e : E, connects e r‚ÇÅ r‚ÇÇ) ‚Üí colors r‚ÇÅ ‚â† colors r‚ÇÇ

-- Type definitions for regions and borders
constant V : Type -- Type for regions
constant E : Type -- Type for borders
constant connects : E ‚Üí V ‚Üí V ‚Üí Prop -- Binary relation for connectivity of borders

-- Statement of the theorem
theorem FourColorTheorem : ‚àÄ (G : Type),
  (NormalMap V E) ‚Üí
  ‚àÉ (colors : V ‚Üí ‚Ñï), (‚àÄ r : V, colors r ‚â§ 4) ‚àß ProperlyColored V E colors := 
sorry

end FourColorTheorem_l101_101692


namespace evaluation_of_expression_l101_101012

theorem evaluation_of_expression : (((-2 : ‚Ñù)‚Åª¬≤ - (-3 : ‚Ñù)‚Åª¬π)‚Åª¬π) = 12 / 7 := 
by
  sorry

end evaluation_of_expression_l101_101012


namespace domain_of_sqrt_function_l101_101020

noncomputable def f (x : ‚Ñù) := real.sqrt (2 * x - 1)

theorem domain_of_sqrt_function :
  ‚àÄ x : ‚Ñù, (‚àÉ y : ‚Ñù, f y = x) ‚Üî (x ‚â• 1/2) :=
sorry

end domain_of_sqrt_function_l101_101020


namespace intersection_of_sets_l101_101182

def A (x : ‚Ñù) : Prop := x^2 - 2 * x - 3 ‚â• 0
def B (x : ‚Ñù) : Prop := -2 ‚â§ x ‚àß x < 2

theorem intersection_of_sets :
  {x : ‚Ñù | A x} ‚à© {x : ‚Ñù | B x} = {x : ‚Ñù | -2 ‚â§ x ‚àß x ‚â§ -1} :=
by
  sorry

end intersection_of_sets_l101_101182


namespace exists_function_with_properties_l101_101673

open Classical

noncomputable def f (n : ‚Ñï) : ‚Ñï := (padic_val_rat 2 n.to_rat).natAbs % 1000 + 1

theorem exists_function_with_properties :
  (‚àÉ f : ‚Ñï ‚Üí ‚Ñï, (‚àÄ x : ‚Ñï, f x = (padic_val_rat 2 x.to_rat).natAbs % 1000 + 1) ‚àß
    (‚àÉ N : ‚Ñï, ‚àÄ n m : ‚Ñï, n ‚â† m ‚Üí (f n ‚â† f m ‚ü∂ n ‚â† m)) ‚àß
    (‚àÄ (x1 x2 ... x1000 : ‚Ñ§), x1 ‚â† 0 ‚àß x2 ‚â† 0 ‚àß ... ‚àß x1000 ‚â† 0 ‚àß
      f (|x1|.to_nat) = f (|x2|.to_nat) ‚àß ... ‚àß f (|x1000|.to_nat) ‚Üí
        x1 + 2 * x2 + 2^2 * x3 + ... + 2^999 * x1000 ‚â† 0)) :=
by {
  let f := Œª n : ‚Ñï, (padic_val_rat 2 n.to_rat).natAbs % 1000 + 1,
  use f,
  split,
  { intro n,
    refl },
  split,
  { obtain ‚ü®N, hN‚ü© : ‚àÉ N : ‚Ñï, ‚àÄ n m : ‚Ñï, n ‚â† m ‚Üí (f n ‚â† f m ‚ü∂ n ‚â† m),
    sorry,
    exact ‚ü®N, hN‚ü© },
  { intros x1 x2 ... x1000 h1 h2,
    sorry,
  }
}

end exists_function_with_properties_l101_101673


namespace exists_even_n_square_maker_partition_l101_101575

/-- Conditions for being a square maker -/
def is_square_maker (a b : ‚Ñï) : Prop :=
  ‚àÉ k : ‚Ñï, ab + 1 = k^2

/-- Main theorem for proving the conditions -/
theorem exists_even_n_square_maker_partition (n : ‚Ñï) :
  (‚àÉ (pairs : Finset (‚Ñï √ó ‚Ñï)), 
    pairs.card = n ‚àß 
    (‚àÄ p ‚àà pairs, (p:‚Ñï √ó ‚Ñï).fst < (p:‚Ñï √ó ‚Ñï).snd ‚àß is_square_maker (p:‚Ñï √ó ‚Ñï).fst (p:‚Ñï √ó ‚Ñï).snd) ‚àß 
    ‚àÄ x ‚àà (pairs.bUnion (Œª p, {p.1, p.2})), 1 ‚â§ x ‚àß x ‚â§ 2 * n ‚àß x ‚àà Finset.Icc 1 (2 * n)) ‚Üî 
    ‚àÉ k : ‚Ñï, n = 2 * k :=
sorry

end exists_even_n_square_maker_partition_l101_101575


namespace maximum_at_vertex_l101_101037

def quadratic_function (a b c x : ‚Ñù) : ‚Ñù := a * x^2 + b * x + c

theorem maximum_at_vertex (a b c x_0 : ‚Ñù) (h_a : a < 0) (h_x0 : 2 * a * x_0 + b = 0) :
  ‚àÄ x : ‚Ñù, quadratic_function a b c x ‚â§ quadratic_function a b c x_0 :=
sorry

end maximum_at_vertex_l101_101037


namespace sequence_converges_l101_101159

noncomputable def sequence : ‚Ñï ‚Üí ‚Ñù
| 0     := 2021
| (n+1) := (sequence n)^2 + 2021 / (2 * (sequence n + 1))

theorem sequence_converges :
  ‚àÉ l : ‚Ñù, (‚àÄ Œµ > 0, ‚àÉ N : ‚Ñï, ‚àÄ n ‚â• N, |sequence n - l| < Œµ) ‚àß l = sqrt 2022 - 1 := 
  sorry

end sequence_converges_l101_101159


namespace find_a_for_tangent_line_l101_101940

/--
Given the curve \( y = ax - \ln(x+1) \) has a tangent line at the point (0,0) with the equation \( y = 2x \),
prove that \( a = 3 \).
-/
theorem find_a_for_tangent_line (a : ‚Ñù) :
  (‚àÄ x : ‚Ñù, y = a * x - real.log (x + 1)) ‚àß (‚àÄ x : ‚Ñù, y = 2 * x) ‚Üí
  a = 3 :=
sorry

end find_a_for_tangent_line_l101_101940


namespace min_value_of_y_l101_101003

noncomputable def y (x : ‚Ñù) : ‚Ñù := x^2 + 26 * x + 7

theorem min_value_of_y : ‚àÉ x : ‚Ñù, y x = -162 :=
by
  use -13
  sorry

end min_value_of_y_l101_101003


namespace geometric_sequence_sum_l101_101267

noncomputable theory

-- Define the conditions and the problem statement
theorem geometric_sequence_sum (a r : ‚Ñù) (h‚ÇÅ : a * (1 - r^3000) / (1 - r) = 500) 
  (h‚ÇÇ : a * (1 - r^6000) / (1 - r) = 950) : 
  a * (1 - r^9000) / (1 - r) = 1355 := 
sorry

end geometric_sequence_sum_l101_101267


namespace minimum_value_of_function_l101_101074

open Real

noncomputable def input_function (x : ‚Ñù) : ‚Ñù :=
  x + 2 / (x - 1)

theorem minimum_value_of_function : 
  ‚àÉ x ‚àà Ioo (1:‚Ñù) (‚ä§:‚Ñù), input_function x = 2 * sqrt 2 + 1 :=
sorry

end minimum_value_of_function_l101_101074


namespace negative_870_in_third_quadrant_l101_101271

noncomputable def angle_in_third_quadrant (theta : ‚Ñù) : Prop :=
  180 < theta ‚àß theta < 270

theorem negative_870_in_third_quadrant:
  angle_in_third_quadrant 210 :=
by
  sorry

end negative_870_in_third_quadrant_l101_101271


namespace sin_cos_half_angle_sum_l101_101903

theorem sin_cos_half_angle_sum 
  (Œ∏ : ‚Ñù)
  (hcos : Real.cos Œ∏ = -7/25) 
  (hŒ∏ : Œ∏ ‚àà Set.Ioo (-Real.pi) 0) : 
  Real.sin (Œ∏/2) + Real.cos (Œ∏/2) = -1/5 := 
sorry

end sin_cos_half_angle_sum_l101_101903


namespace star_m_eq_22_l101_101170

def star (x : ‚Ñï) : ‚Ñï := x.digits.sum

def S : set ‚Ñï := {n | star n = 15 ‚àß 100 ‚â§ n ‚àß n < 10^5}

noncomputable def m : ‚Ñï := S.card

theorem star_m_eq_22 : star m = 22 := by
  sorry

end star_m_eq_22_l101_101170


namespace multiples_of_7_with_units_digit_7_number_of_multiples_of_7_with_units_digit_7_l101_101095

theorem multiples_of_7_with_units_digit_7 (n : ‚Ñï) : 
  (n < 150 ‚àß ‚àÉ k : ‚Ñï, n = 7 * k ‚àß n % 10 = 7) ‚Üî 
  n = 7 ‚à® n = 77 ‚à® n = 147 := 
by 
  sorry

theorem number_of_multiples_of_7_with_units_digit_7 : 
  ‚àÉ m, m = 3 ‚àß ‚àÄ n : ‚Ñï, (n < 150 ‚àß ‚àÉ k : ‚Ñï, n = 7 * k ‚àß n % 10 = 7) ‚Üí n = 7 ‚à® n = 77 ‚à® n = 147 := 
by 
  use 3
  intros n
  intros hn
  split
  intro h
  cases h
  sorry

end multiples_of_7_with_units_digit_7_number_of_multiples_of_7_with_units_digit_7_l101_101095


namespace construct_line_l101_101143

variable (Point Line Plane : Type)
variable (a b c : Line)
variable distance : Point ‚Üí Point ‚Üí ‚Ñù
variable parallel : Line ‚Üí Line ‚Üí Prop
variable intersects : Line ‚Üí Line ‚Üí Prop
variable contains : Plane ‚Üí Line ‚Üí Prop
variable intersection : Plane ‚Üí Plane ‚Üí Line

-- Conditions: Definitions and axioms
axiom skew_lines (l1 l2 : Line) : ¬¨(intersects l1 l2)
axiom exists_parallel_line (l p : Line) (pt : Point) : parallel l p ‚Üí ‚àÉ l', parallel l l' ‚àß ‚àÉ pt', contains l pt'

-- Problem statement: Existence of the line m
theorem construct_line (h_skew_a_b : skew_lines a b) (h_exists_parallel_c : ‚àÉ pt, ‚àÉ l, parallel l c ‚àß ‚àÉ pt', contains l pt'):
  ‚àÉ m, parallel m c ‚àß intersects m a ‚àß intersects m b :=
begin
  sorry
end

end construct_line_l101_101143


namespace vector_magnitude_cosine_angle_l101_101043

open Real

variables (a b : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù) -- Assuming vectors a and b in 2D for simplicity.

-- Given: |a| = 4, |b| = 2, and the angle between a and b is 120 degrees.
axiom magnitude_a : |a| = 4
axiom magnitude_b : |b| = 2
axiom angle_ab : angle a b = 120

-- Proving: |3a - b| = 2*sqrt(43)
theorem vector_magnitude : |3 * a - b| = 2 * sqrt 43 :=
by sorry

-- Proving: The cosine value of the angle between a and (a - b) is 5*sqrt(7)/14
theorem cosine_angle : cos (angle a (a - b)) = (5 * sqrt 7) / 14 :=
by sorry

end vector_magnitude_cosine_angle_l101_101043


namespace problem1_problem2_l101_101848

-- Problem 1
theorem problem1 : 
  (-2.8) - (-3.6) + (-1.5) - (3.6) = -4.3 := 
by 
  sorry

-- Problem 2
theorem problem2 :
  (- (5 / 6 : ‚Ñö) + (1 / 3 : ‚Ñö) - (3 / 4 : ‚Ñö)) * (-24) = 30 := 
by 
  sorry

end problem1_problem2_l101_101848


namespace find_lambda_l101_101293

noncomputable def line (Œª : ‚Ñù) : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù := Œª x y, 3 * x - 4 * y + Œª
noncomputable def translated_line (Œª : ‚Ñù) : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù := Œª x y, 3 * (x + 1) - 4 * y + Œª
noncomputable def circle : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù := Œª x y, x^2 + y^2 - 2 * x - 4 * y + 4

theorem find_lambda : ‚àÉ Œª : ‚Ñù, (Œª = -3 ‚à® Œª = 7) ‚àß ‚àÄ x y, translated_line Œª x y = 0 ‚Üî circle x y = 0 :=
sorry

end find_lambda_l101_101293


namespace curve_intersects_itself_l101_101838

theorem curve_intersects_itself :
  ‚àÉ t‚ÇÅ t‚ÇÇ : ‚Ñù, t‚ÇÅ ‚â† t‚ÇÇ ‚àß (t‚ÇÅ^2 - 3, t‚ÇÅ^3 - 6 * t‚ÇÅ + 4) = (3, 4) ‚àß (t‚ÇÇ^2 - 3, t‚ÇÇ^3 - 6 * t‚ÇÇ + 4) = (3, 4) :=
sorry

end curve_intersects_itself_l101_101838


namespace polygon_num_sides_l101_101587

theorem polygon_num_sides (s : ‚Ñï) (h : 180 * (s - 2) > 2790) : s = 18 :=
sorry

end polygon_num_sides_l101_101587


namespace ratio_final_to_original_l101_101979

-- Given conditions
variable (d : ‚Ñù)
variable (h1 : 364 = d * 1.30)

-- Problem statement
theorem ratio_final_to_original : (364 / d) = 1.3 := 
by sorry

end ratio_final_to_original_l101_101979


namespace least_positive_integer_property_l101_101893

theorem least_positive_integer_property : 
  ‚àÉ (n d : ‚Ñï) (p : ‚Ñï) (h‚ÇÅ : 1 ‚â§ d) (h‚ÇÇ : d ‚â§ 9) (h‚ÇÉ : p ‚â• 2), 
  (10^p * d = 24 * n) ‚àß (‚àÉ k : ‚Ñï, (n = 100 * 10^(p-2) / 3) ‚àß (900 = 8 * 10^p + 100 / 3 * 10^(p-2))) := sorry

end least_positive_integer_property_l101_101893


namespace locus_of_right_angle_vertices_l101_101495

-- Definition of points and segment
variable (A B C : Point)
variable (BC : LineSegment B C)

-- Definition of the closed balls with diameters AB and AC
def B1 := closedBall (midpoint A B) (dist A B / 2)
def B2 := closedBall (midpoint A C) (dist A C / 2)

-- Locus of points forming the vertices of described right angles
def locus (O : Point) : Prop := O ‚àà symmetricDifference B1 B2

-- The theorem statement
theorem locus_of_right_angle_vertices (A B C : Point) (BC : LineSegment B C) :
    ‚àÄ O : Point, (‚àÉ K : Point, K ‚àà BC ‚àß (angle A O K = œÄ / 2)) ‚Üí O ‚àà symmetricDifference (closedBall (midpoint A B) (dist A B / 2)) (closedBall (midpoint A C) (dist A C / 2)) :=
by
  intro O h
  sorry

end locus_of_right_angle_vertices_l101_101495


namespace volume_of_pyramid_l101_101674

variables (P A B C D : Type)
variables (h1 : dist A B = 10)
variables (h2 : dist B C = 5)
variables (h3 : ‚àÄ x, perpendicular (vector PA) (vector AD))
variables (h4 : ‚àÄ x, perpendicular (vector PA) (vector AB))
variables (h5 : dist P B = 20)

theorem volume_of_pyramid : 
  volume (pyramid P A B C D) = 500 * real.sqrt 3 / 3 :=
sorry

end volume_of_pyramid_l101_101674


namespace multiples_of_7_with_units_digit_7_number_of_multiples_of_7_with_units_digit_7_l101_101097

theorem multiples_of_7_with_units_digit_7 (n : ‚Ñï) : 
  (n < 150 ‚àß ‚àÉ k : ‚Ñï, n = 7 * k ‚àß n % 10 = 7) ‚Üî 
  n = 7 ‚à® n = 77 ‚à® n = 147 := 
by 
  sorry

theorem number_of_multiples_of_7_with_units_digit_7 : 
  ‚àÉ m, m = 3 ‚àß ‚àÄ n : ‚Ñï, (n < 150 ‚àß ‚àÉ k : ‚Ñï, n = 7 * k ‚àß n % 10 = 7) ‚Üí n = 7 ‚à® n = 77 ‚à® n = 147 := 
by 
  use 3
  intros n
  intros hn
  split
  intro h
  cases h
  sorry

end multiples_of_7_with_units_digit_7_number_of_multiples_of_7_with_units_digit_7_l101_101097


namespace parallelogram_sum_p_plus_a_l101_101879

variable (x1 y1 x2 y2 x3 y3 x4 y4 : ‚Ñ§)
variable (p a : ‚Ñï)

-- Given the conditions
def vertices := (x1, y1) = (0, 0) ‚àß (x2, y2) = (7, 0) ‚àß (x3, y3) = (3, 4) ‚àß (x4, y4) = (10, 4)
def perimeter := p = 24
def area := a = 28

-- The proof statement
theorem parallelogram_sum_p_plus_a (h1 : vertices)
    (h2 : perimeter)
    (h3 : area) : p + a = 52 :=
by
  -- Proof omitted
  sorry

end parallelogram_sum_p_plus_a_l101_101879


namespace problem_statement_l101_101110

noncomputable def P1 (Œ± : ‚Ñù) : ‚Ñù √ó ‚Ñù := (Real.cos Œ±, Real.sin Œ±)
noncomputable def P2 (Œ≤ : ‚Ñù) : ‚Ñù √ó ‚Ñù := (Real.cos Œ≤, -Real.sin Œ≤)
noncomputable def P3 (Œ± Œ≤ : ‚Ñù) : ‚Ñù √ó ‚Ñù := (Real.cos (Œ± + Œ≤), Real.sin (Œ± + Œ≤))
noncomputable def A : ‚Ñù √ó ‚Ñù := (1, 0)

theorem problem_statement (Œ± Œ≤ : ‚Ñù) :
  (Prod.fst (P1 Œ±))^2 + (Prod.snd (P1 Œ±))^2 = 1 ‚àß
  (Prod.fst (P2 Œ≤))^2 + (Prod.snd (P2 Œ≤))^2 = 1 ‚àß
  (Prod.fst (P1 Œ±) * Prod.fst (P2 Œ≤) + Prod.snd (P1 Œ±) * Prod.snd (P2 Œ≤)) = Real.cos (Œ± + Œ≤) :=
by
  sorry

end problem_statement_l101_101110


namespace angle_B_measure_l101_101629

theorem angle_B_measure (a b : ‚Ñù) (A B : ‚Ñù) (h‚ÇÅ : a = 4) (h‚ÇÇ : b = 4 * Real.sqrt 3) (h‚ÇÉ : A = Real.pi / 6) : 
  B = Real.pi / 3 ‚à® B = 2 * Real.pi / 3 :=
by
  sorry

end angle_B_measure_l101_101629


namespace min_cube_count_is_5_l101_101796

def front_view : List (Nat √ó Nat) := [(0, 0), (1, 0), (1, 1), (2, 1), (2, 2), (3, 3), (3, 2), (3, 1), (3, 0)]
def side_view : List (Nat √ó Nat) := [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (2, 1), (2, 2), (3, 3), (3, 2)]

def valid_cube_placement (x y z: Nat) : Prop :=
  ((x, y) ‚àà front_view ‚àß (y, z) ‚àà side_view)
  ‚àß (cube x y z).shares_face_with_another_cube

theorem min_cube_count_is_5 :
  ‚àÉ placement : List (Nat √ó Nat √ó Nat),
    (‚àÄ c ‚àà placement, valid_cube_placement c.1 c.2 c.3) ‚àß placement.length = 5 :=
sorry

end min_cube_count_is_5_l101_101796


namespace zoo_total_animals_l101_101395

def num_tiger_enclosures : ‚Ñï := 4
def num_zebra_enclosures_per_tiger : ‚Ñï := 2
def num_giraffe_enclosures_per_zebra : ‚Ñï := 3
def num_tigers_per_enclosure : ‚Ñï := 4
def num_zebras_per_enclosure : ‚Ñï := 10
def num_giraffes_per_enclosure : ‚Ñï := 2

theorem zoo_total_animals :
  let num_zebra_enclosures := num_tiger_enclosures * num_zebra_enclosures_per_tiger,
      num_giraffe_enclosures := num_zebra_enclosures * num_giraffe_enclosures_per_zebra,
      total_tigers := num_tiger_enclosures * num_tigers_per_enclosure,
      total_zebras := num_zebra_enclosures * num_zebras_per_enclosure,
      total_giraffes := num_giraffe_enclosures * num_giraffes_per_enclosure,
      total_animals := total_tigers + total_zebras + total_giraffes
  in total_animals = 144 :=
by
  intros
  let num_zebra_enclosures := num_tiger_enclosures * num_zebra_enclosures_per_tiger
  let num_giraffe_enclosures := num_zebra_enclosures * num_giraffe_enclosures_per_zebra
  let total_tigers := num_tiger_enclosures * num_tigers_per_enclosure
  let total_zebras := num_zebra_enclosures * num_zebras_per_enclosure
  let total_giraffes := num_giraffe_enclosures * num_giraffes_per_enclosure
  let total_animals := total_tigers + total_zebras + total_giraffes
  exact eq.refl 144

end zoo_total_animals_l101_101395


namespace div_by_72_l101_101119

theorem div_by_72 (x : ‚Ñï) (y : ‚Ñï) (h1 : 0 ‚â§ x ‚àß x ‚â§ 9) (h2 : x = 4)
    (h3 : 0 ‚â§ y ‚àß y ‚â§ 9) (h4 : y = 6) : 
    72 ‚à£ (9834800 + 1000 * x + 10 * y) :=
by 
  sorry

end div_by_72_l101_101119


namespace not_factorial_tails_l101_101461

noncomputable def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) + ...

theorem not_factorial_tails :
  let n := 2500 in ‚àÉ (k : ‚Ñï), k = 500 ‚àß ‚àÄ m < n, ¬¨(f m = k) :=
by {
  sorry
}

end not_factorial_tails_l101_101461


namespace find_original_number_l101_101802

-- Variables and assumptions
variables (N y x : ‚Ñï)

-- Conditions
def crossing_out_condition : Prop := N = 10 * y + x
def sum_condition : Prop := N + y = 54321
def remainder_condition : Prop := x = 54321 % 11
def y_value : Prop := y = 4938

-- The final proof problem statement
theorem find_original_number (h1 : crossing_out_condition N y x) (h2 : sum_condition N y) 
  (h3 : remainder_condition x) (h4 : y_value y) : N = 49383 :=
sorry

end find_original_number_l101_101802


namespace pants_cut_is_0_50_l101_101385

-- Define the conditions
def skirt_cut : ‚Ñù := 0.75
def x : ‚Ñù -- Amount cut from the pants
def condition : Prop := skirt_cut = x + 0.25

-- We need to show that the pants cut is 0.5 inches
theorem pants_cut_is_0_50 (h : condition) : x = 0.50 := by
  sorry

end pants_cut_is_0_50_l101_101385


namespace isosceles_triangle_large_angles_l101_101606

theorem isosceles_triangle_large_angles (y : ‚Ñù) (h : 2 * y + 40 = 180) : y = 70 :=
by
  sorry

end isosceles_triangle_large_angles_l101_101606


namespace inequality_solution_l101_101888

theorem inequality_solution (x : ‚Ñù) : 
  (3 / 20 + abs (2 * x - 5 / 40) < 9 / 40) ‚Üí (1 / 40 < x ‚àß x < 1 / 10) :=
by
  sorry

end inequality_solution_l101_101888


namespace rihlelo_has_4_lines_of_symmetry_l101_101225

-- Definition of the rihl√®l√≤ design based on symmetry
def rihlelo_design : Type := { d : Set (Point √ó Point) // ‚àÉ (s : Finset Line), s.card = 4 ‚àß ‚àÄ l ‚àà s, is_symmetry l }

-- Proof statement
theorem rihlelo_has_4_lines_of_symmetry (d : rihlelo_design) : ‚àÉ s : Finset Line, s.card = 4 ‚àß ‚àÄ l ‚àà s, is_symmetry l :=
begin
  sorry
end

end rihlelo_has_4_lines_of_symmetry_l101_101225


namespace multiples_of_7_units_digit_7_l101_101090

theorem multiples_of_7_units_digit_7 (n : ‚Ñï) (h1 : n < 150) (h2 : ‚àÉ (k : ‚Ñï), n = 7 * k) (h3 : n % 10 = 7) : 
    ‚àÉ (m : ‚Ñï), m = 2 := 
by
  sorry

end multiples_of_7_units_digit_7_l101_101090


namespace equal_distribution_possible_l101_101841

theorem equal_distribution_possible 
  (boxes : ‚Ñï) (balls : ‚Ñï) 
  (initial_distribution : Fin boxes ‚Üí ‚Ñï)
  (add_six_balls : (Fin boxes ‚Üí ‚Ñï) ‚Üí (Fin boxes ‚Üí ‚Ñï)) :
  boxes = 95 ‚àß balls = 19 ‚àß 
  (‚àÄ (f : Fin boxes ‚Üí ‚Ñï), initial_distribution.sum (Œª i, f i) = balls) ‚àß
  (‚àÄ (f : Fin boxes ‚Üí ‚Ñï), 
     ‚àÉ n : ‚Ñï, 
     (iterate n add_six_balls initial_distribution).sum (Œª i, f i) % boxes = 0) 
‚Üí 
  ‚àÉ k : ‚Ñï, ‚àÄ i : Fin boxes, (iterate n add_six_balls initial_distribution) i = k := 
sorry

end equal_distribution_possible_l101_101841


namespace black_balls_number_l101_101046

-- Define the given conditions and the problem statement as Lean statements
theorem black_balls_number (n : ‚Ñï) (h : (2 : ‚Ñù) / (n + 2 : ‚Ñù) = 0.4) : n = 3 :=
by
  sorry

end black_balls_number_l101_101046


namespace shaded_region_area_l101_101148

-- Given conditions
def radius := 5
def diameter_AB := 2 * radius
def diameter_CD := 2 * radius
def are_perpendicular (AB CD : ‚Ñù) := true

-- Goal
theorem shaded_region_area (r : ‚Ñù) (h1 : r = radius) (h2 : diameter_AB = 2 * r) (h3 : diameter_CD = 2 * r) (h4 : are_perpendicular diameter_AB diameter_CD = true) :
  let area := 25 + 12.5 * Real.pi in area = 25 + 12.5 * Real.pi := 
by
  sorry

end shaded_region_area_l101_101148


namespace emily_total_beads_l101_101881

-- Let's define the given conditions
def necklaces : ‚Ñï := 11
def beads_per_necklace : ‚Ñï := 28

-- The statement to prove
theorem emily_total_beads : (necklaces * beads_per_necklace) = 308 := by
  sorry

end emily_total_beads_l101_101881


namespace possible_integer_roots_l101_101376

theorem possible_integer_roots (a3 a2 a1 : ‚Ñ§) :
  (‚àÉ x : ‚Ñ§, x^4 + a3 * x^3 + a2 * x^2 + a1 * x - 27 = 0) ‚Üí
  (x ‚àà {-27, -9, -3, -1, 1, 3, 9, 27} ‚à® ¬¨ ‚àÉ x : ‚Ñ§, x^4 + a3 * x^3 + a2 * x^2 + a1 * x - 27 = 0) :=
by
  sorry

end possible_integer_roots_l101_101376


namespace range_of_a_l101_101552

noncomputable def f (x : ‚Ñù) : ‚Ñù :=
  (Finset.sum (Finset.range 2013) (Œª n, |x - ‚Üën|) + Finset.sum (Finset.range 2012) (Œª n, |x + (n + 1)|))

theorem range_of_a (a : ‚Ñù) (ha : f (a^2 + 2*a + 2) > f a) : a < -2 ‚à® a > -1 :=
by
  sorry

end range_of_a_l101_101552


namespace trig_identity_1_evaluate_function_f_l101_101352

-- Proof Problem 1: Prove that the expression \(\sin (-120^{\circ})\cos 210^{\circ}+\cos (-300^{\circ})\sin (-330^{\circ}) = 1\)
theorem trig_identity_1 : 
  sin (-120 * real.pi / 180) * cos (210 * real.pi / 180) + cos (-300 * real.pi / 180) * sin (-330 * real.pi / 180) = 1 := sorry

-- Proof Problem 2: Prove that \( f\left( -\frac{23\pi}{6} \right) = \sqrt{3} \)
noncomputable def f (Œ± : ‚Ñù) : ‚Ñù :=
  (2 * sin (real.pi + Œ±) * cos (real.pi - Œ±) - cos (real.pi + Œ±)) /
  (1 + sin (Œ±) * sin (Œ±) + cos ((3 * real.pi / 2) + Œ±) - sin ((real.pi / 2) + Œ±) * sin ((real.pi / 2) + Œ±))

theorem evaluate_function_f : f (-23 * real.pi / 6) = real.sqrt 3 := sorry

end trig_identity_1_evaluate_function_f_l101_101352


namespace cube_surface_area_correct_l101_101793

def edge_length : ‚Ñù := 11

def cube_surface_area (e : ‚Ñù) : ‚Ñù := 6 * e^2

theorem cube_surface_area_correct : cube_surface_area edge_length = 726 := by
  sorry

end cube_surface_area_correct_l101_101793


namespace geo_series_sum_eight_terms_l101_101483

theorem geo_series_sum_eight_terms :
  let a_0 := 1 / 3
  let r := 1 / 3 
  let S_8 := a_0 * (1 - r^8) / (1 - r)
  S_8 = 3280 / 6561 :=
by
  /- :: Proof Steps Omitted. -/
  sorry

end geo_series_sum_eight_terms_l101_101483


namespace initial_number_of_players_l101_101280

theorem initial_number_of_players (players_quit remaining_lives_per_player total_remaining_lives : ‚Ñï) 
  (h1 : players_quit = 7)
  (h2 : remaining_lives_per_player = 8)
  (h3 : total_remaining_lives = 24) :
  let remaining_players := total_remaining_lives / remaining_lives_per_player in
  let initial_players := remaining_players + players_quit in
  initial_players = 10 :=
by
  sorry

end initial_number_of_players_l101_101280


namespace reflection_through_x_axis_l101_101952

theorem reflection_through_x_axis (f : ‚Ñù ‚Üí ‚Ñù) (H : f 4 = 2) : 
    ‚àÉ x y, (x, y) = (4, -2) := 
by
  use (4, -2)
  unfold_projs
  rw H
  sorry

end reflection_through_x_axis_l101_101952


namespace center_and_radius_of_circle_M_equation_of_symmetric_circle_equation_of_reflected_light_ray_l101_101368

/-
Proof Problem Statement in Lean 4
-/

def circle_M_eq : (x y : ‚Ñù) ‚Üí Prop :=
  Œª x y, x^2 + y^2 - 4*x - 4*y + 7 = 0

def symmetric_circle_eq : (x y : ‚Ñù) ‚Üí Prop :=
  Œª x y, (x - 2)^2 + (y + 2)^2 = 1

def light_ray_eq : (x y : ‚Ñù) ‚Üí Prop :=
  Œª x y, 4*x - 3*y + 9 = 0

-- Prove the center and radius
theorem center_and_radius_of_circle_M :
  ‚àÉ c : ‚Ñù √ó ‚Ñù, ‚àÉ r : ‚Ñù, (‚àÄ x y : ‚Ñù, circle_M_eq x y ‚Üî (x - c.1)^2 + (y - c.2)^2 = r^2) ‚àß c = (2, 2) ‚àß r = 1 :=
sorry

-- Prove the equation of the symmetric circle
theorem equation_of_symmetric_circle :
  ‚àÄ x y : ‚Ñù, symmetric_circle_eq x y ‚Üî (x - 2)^2 + (y + 2)^2 = 1 :=
sorry

-- Prove the equation of the reflected light ray
theorem equation_of_reflected_light_ray :
  ‚àÄ x y : ‚Ñù, light_ray_eq x y ‚Üî 4*x - 3*y + 9 = 0 :=
sorry

end center_and_radius_of_circle_M_equation_of_symmetric_circle_equation_of_reflected_light_ray_l101_101368


namespace solve_for_a_l101_101572

theorem solve_for_a (x a : ‚Ñ§) (h : x = 3) (heq : 2 * x - 10 = 4 * a) : a = -1 := by
  sorry

end solve_for_a_l101_101572


namespace sum_of_geometric_sequence_first_9000_terms_l101_101254

noncomputable def geomSum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r ^ n) / (1 - r)

theorem sum_of_geometric_sequence_first_9000_terms (a r : ‚Ñù) (h1 : geomSum a r 3000 = 500) (h2 : geomSum a r 6000 = 950) :
  geomSum a r 9000 = 1355 :=
by
  sorry

end sum_of_geometric_sequence_first_9000_terms_l101_101254


namespace find_xy_l101_101840

-- Defining the initial conditions
variable (x y : ‚Ñï)

-- Defining the rectangular prism dimensions and the volume equation
def prism_volume_original : ‚Ñï := 15 * 5 * 4 -- Volume = 300
def remaining_volume : ‚Ñï := 120

-- The main theorem statement to prove the conditions and their solution
theorem find_xy (h1 : prism_volume_original - 5 * y * x = remaining_volume)
    (h2 : x < 4) 
    (h3 : y < 15) : 
    x = 3 ‚àß y = 12 := sorry

end find_xy_l101_101840


namespace range_of_a_for_distinct_real_roots_l101_101581

theorem range_of_a_for_distinct_real_roots (a : ‚Ñù) :
  (‚àÉ x y : ‚Ñù, x ‚â† y ‚àß (a - 1) * x^2 - 2 * x + 1 = 0 ‚àß (a - 1) * y^2 - 2 * y + 1 = 0) ‚Üî (a < 2 ‚àß a ‚â† 1) :=
by
  sorry

end range_of_a_for_distinct_real_roots_l101_101581


namespace solve_real_x_l101_101886

theorem solve_real_x (x : ‚Ñù) : 
  (16^x + 81^x) / (24^x + 36^x) = 8 / 7 ‚Üî 
  x = Real.log(15 / 7) / (2 * Real.log(3 / 2)) :=
by sorry

end solve_real_x_l101_101886


namespace magnitude_of_complex_number_l101_101506

theorem magnitude_of_complex_number (z : ‚ÑÇ) (h : conj z * (3 + 4 * complex.I) = 4 + 3 * complex.I) : |z| = 1 :=
sorry

end magnitude_of_complex_number_l101_101506


namespace gain_percent_l101_101371

theorem gain_percent (CP SP : ‚Ñï) (h1 : CP = 20) (h2 : SP = 25) : 
  (SP - CP) * 100 / CP = 25 := by
  sorry

end gain_percent_l101_101371


namespace unique_common_element_l101_101054

variable (A B : Set ‚Ñù)
variable (a : ‚Ñù)

theorem unique_common_element :
  A = {1, 3, a} ‚Üí 
  B = {4, 5} ‚Üí
  A ‚à© B = {4} ‚Üí
  a = 4 := 
by
  intro hA hB hAB
  sorry

end unique_common_element_l101_101054


namespace count_multiples_of_7_with_units_digit_7_less_than_150_l101_101088

-- Definition of the problem's conditions and expected result
theorem count_multiples_of_7_with_units_digit_7_less_than_150 : 
  let multiples_of_7 := { n : Nat // n < 150 ‚àß n % 7 = 0 }
  let units_digit_7_multiples := { n : Nat // n < 150 ‚àß n % 7 = 0 ‚àß n % 10 = 7 }
  List.length (units_digit_7_multiples.members) = 3 :=
by
  sorry

end count_multiples_of_7_with_units_digit_7_less_than_150_l101_101088


namespace find_a_l101_101906

noncomputable def f (a : ‚Ñù) (x : ‚Ñù) : ‚Ñù :=
  if x > 0 then exp x + a * x
  else if x < 0 then exp (-x) - a * x
  else 0

theorem find_a :
  (‚àÉ c1 c2 : ‚Ñù, c1 > 0 ‚àß c2 > 0 ‚àß (c1 ‚â† 0 ‚à® c2 ‚â† 0) ‚àß
                f (-e) c1 = 0 ‚àß f (-e) (-c2) = 0) ‚Üí
                ‚àÄ x : ‚Ñù, f (-e) x = 0 ‚Üî x = 0 ‚à® x = 1 ‚à® x = -1 :=
begin
sorry
end

end find_a_l101_101906


namespace product_of_possible_values_of_b_l101_101863

noncomputable def f (b x : ‚Ñù) := b / (3 * x - 4)

theorem product_of_possible_values_of_b (b : ‚Ñù) :
  (f b 3 = (Œª y, f y b) (2 * b - 1)) ‚Üí 
  let eq : ‚Ñù := (20 / 6) in eq = 10 / 3 :=
sorry

end product_of_possible_values_of_b_l101_101863


namespace collinear_triples_count_l101_101872

open Set

def lattice_4x4x4 : Set (‚Ñï √ó ‚Ñï √ó ‚Ñï) :=
  {p | p.1 ‚àà {0, 1, 2, 3} ‚àß p.2 ‚àà {0, 1, 2, 3} ‚àß p.3 ‚àà {0, 1, 2, 3}}

def collinear (p1 p2 p3 : ‚Ñù √ó ‚Ñù √ó ‚Ñù) : Prop :=
  ‚àÉ l : ‚Ñù, ‚àÉ m : ‚Ñù, ‚àÉ n : ‚Ñù, ‚àÄ (x y z : ‚Ñù), (x - y) * (p1.1 - p2.1) = l * (p1.2 - p2.2)
  ‚àß (y - z) * (p1.2 - p3.2) = m * (p1.3 - p2.3)
  ‚àß (x - z) * (p1.3 - p3.3) = n * (p1.1 - p2.1)
  -- Ensure the points are not all identical and are collinear

def count_collinear_triples (points : Set (‚Ñù √ó ‚Ñù √ó ‚Ñù)) : ‚Ñï :=
  Card {t | ‚àÉ (p1 p2 p3 : ‚Ñù √ó ‚Ñù √ó ‚Ñù), t = {p1, p2, p3} ‚àß p1 ‚â† p2 ‚àß p2 ‚â† p3 ‚àß p1 ‚â† p3 ‚àß collinear p1 p2 p3}

theorem collinear_triples_count : count_collinear_triples lattice_4x4x4 = 376 := by
  sorry

end collinear_triples_count_l101_101872


namespace find_original_number_l101_101806

-- Variables and assumptions
variables (N y x : ‚Ñï)

-- Conditions
def crossing_out_condition : Prop := N = 10 * y + x
def sum_condition : Prop := N + y = 54321
def remainder_condition : Prop := x = 54321 % 11
def y_value : Prop := y = 4938

-- The final proof problem statement
theorem find_original_number (h1 : crossing_out_condition N y x) (h2 : sum_condition N y) 
  (h3 : remainder_condition x) (h4 : y_value y) : N = 49383 :=
sorry

end find_original_number_l101_101806


namespace magnitude_of_sum_l101_101963

variables (k : ‚Ñù)
def vector_a := (1 : ‚Ñù, 2 : ‚Ñù)
def vector_b := (-2 : ‚Ñù, k)

-- Definition of collinearity
def collinear (a b : ‚Ñù √ó ‚Ñù) : Prop :=
  ‚àÉ (Œª : ‚Ñù), a.1 = Œª * b.1 ‚àß a.2 = Œª * b.2

-- Prove that the magnitude of 3a + b is ‚àö5 given collinear condition
theorem magnitude_of_sum (h : collinear vector_a vector_b)
  (h1 : k = -4) :
  let vector_sum := (3 * 1 + (-2), 3 * 2 + (-4)) in
  ‚à•vector_sum‚à• = real.sqrt 5 := 
by
  sorry -- Proof goes here

end magnitude_of_sum_l101_101963


namespace liam_markers_liam_first_markers_over_500_l101_101184

def seq (n : ‚Ñï) : ‚Ñï := 5 * 3^n

theorem liam_markers (n : ‚Ñï) (h1 : seq 0 = 5) (h2 : seq 1 = 10) (h3 : ‚àÄ k < n, 5 * 3^k ‚â§ 500) : 
  seq n > 500 := by sorry

theorem liam_first_markers_over_500 (h1 : seq 0 = 5) (h2 : seq 1 = 10) :
  ‚àÉ n, seq n > 500 ‚àß ‚àÄ k < n, seq k ‚â§ 500 := by sorry

end liam_markers_liam_first_markers_over_500_l101_101184


namespace car_speed_is_8_times_walking_speed_l101_101279

theorem car_speed_is_8_times_walking_speed :
  ‚àÄ (d t_car t_walk t_meet t_arrive : ‚Ñï), 
  d = 2 ‚Üí t_car = 30 ‚Üí t_walk = 40 ‚Üí t_meet = 10 ‚Üí t_arrive = 20 ‚Üí
  let car_speed := d * 2 / (t_arrive - t_meet) in
  let walk_speed := d / t_walk in
  car_speed = 8 * walk_speed :=
by
  sorry

end car_speed_is_8_times_walking_speed_l101_101279


namespace distance_light_travels_250_years_l101_101061

def distance_light_travels_one_year : ‚Ñù := 5.87 * 10^12
def years : ‚Ñù := 250

theorem distance_light_travels_250_years :
  distance_light_travels_one_year * years = 1.4675 * 10^15 :=
by
  sorry

end distance_light_travels_250_years_l101_101061


namespace solution_set_inequality_l101_101226

variable {f : ‚Ñù ‚Üí ‚Ñù}

-- Declare the conditions as definitions and assumptions
def condition1 : Prop := ‚àÄ x, f x + deriv f x < 2
def condition2 : Prop := f 1 = 3

theorem solution_set_inequality (h1 : condition1) (h2 : condition2) :
  {x : ‚Ñù | exp x * f x > 2 * exp x + exp 1} = {x : ‚Ñù | x < 1} :=
sorry

end solution_set_inequality_l101_101226


namespace zoo_total_animals_l101_101393

theorem zoo_total_animals (tiger_enclosure : ‚Ñï) (zebra_enclosure_per_tiger : ‚Ñï) 
  (giraffe_enclosures_ratio : ‚Ñï) (tigers_per_enclosure : ‚Ñï) 
  (zebras_per_enclosure : ‚Ñï) (giraffes_per_enclosure : ‚Ñï) 
  (Htiger : tiger_enclosure = 4) (Hzebra_per_tiger : zebra_enclosure_per_tiger = 2) 
  (Hgiraffe_ratio : giraffe_enclosures_ratio = 3) (Ht_pe : tigers_per_enclosure = 4) 
  (Hz_pe : zebras_per_enclosure = 10) (Hg_pe : giraffes_per_enclosure = 2) : 
  let zebra_enclosures := tiger_enclosure * zebra_enclosure_per_tiger in
  let giraffe_enclosures := zebra_enclosures * giraffe_enclosures_ratio in
  let total_tigers := tiger_enclosure * tigers_per_enclosure in
  let total_zebras := zebra_enclosures * zebras_per_enclosure in
  let total_giraffes := giraffe_enclosures * giraffes_per_enclosure in
  total_tigers + total_zebras + total_giraffes = 144 :=
by
  sorry

end zoo_total_animals_l101_101393


namespace min_value_dot_product_l101_101511

-- Side length of the square
def side_length: ‚Ñù := 1

-- Definition of points in vector space
variables {A B C D O M N P: Type}

-- Definitions assuming standard Euclidean geometry
variables (O P : ‚Ñù) (a b c : ‚Ñù)

-- Points M and N on the edges AD and BC respectively, line MN passes through O
-- Point P satisfies 2 * vector OP = l * vector OA + (1-l) * vector OB
theorem min_value_dot_product (l : ‚Ñù) (O P M N : ‚Ñù) :
  (2 * (O + P)) = l * (O - a) + (1 - l) * (b + c) ‚àß
  ((O - P) * (O + P) - ((l^2 - l + 1/2) / 4) = -7/16) :=
by
  sorry

end min_value_dot_product_l101_101511


namespace sum_of_geometric_sequence_first_9000_terms_l101_101250

noncomputable def geomSum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r ^ n) / (1 - r)

theorem sum_of_geometric_sequence_first_9000_terms (a r : ‚Ñù) (h1 : geomSum a r 3000 = 500) (h2 : geomSum a r 6000 = 950) :
  geomSum a r 9000 = 1355 :=
by
  sorry

end sum_of_geometric_sequence_first_9000_terms_l101_101250


namespace value_of_n_l101_101762

theorem value_of_n (n : ‚Ñù) (h : n + (n + 1) + (n + 2) + (n + 3) = 20) : n = 3.5 :=
by sorry

end value_of_n_l101_101762


namespace route_x_distance_route_y_distance_l101_101670

-- Definitions based on conditions:
def scale (map_inches : ‚Ñù) : ‚Ñù := 24 / 1.5 * map_inches -- 1 inch represents 16 miles

def route_x_map_dist_cm : ‚Ñù := 44 -- Route X: 44 cm
def route_y_map_dist_cm : ‚Ñù := 62 -- Route Y: 62 cm

def inches_to_cm (inches : ‚Ñù) : ‚Ñù := inches * 2.54
def cm_to_inches (cm : ‚Ñù) : ‚Ñù := cm / 2.54

-- Converted distances in inches:
def route_x_map_dist_inch := cm_to_inches route_x_map_dist_cm
def route_y_map_dist_inch := cm_to_inches route_y_map_dist_cm

-- Expected ground distances:
def expected_route_x_miles := 277.12
def expected_route_y_miles := 390.56

-- Calculations using the scale:
def ground_distance (map_dist_inch: ‚Ñù) : ‚Ñù := map_dist_inch * 16 -- 16 miles per inch

-- Proofs for route distances:
theorem route_x_distance :
  ground_distance route_x_map_dist_inch = expected_route_x_miles := by
    sorry

theorem route_y_distance :
  ground_distance route_y_map_dist_inch = expected_route_y_miles := by
    sorry

end route_x_distance_route_y_distance_l101_101670


namespace calculate_X_value_l101_101109

theorem calculate_X_value : 
  let M := (2025 : ‚Ñù) / 3
  let N := M / 4
  let X := M - N
  X = 506.25 :=
by 
  sorry

end calculate_X_value_l101_101109


namespace eccentricity_of_ellipse_l101_101063

noncomputable def ellipse_eccentricity (a b : ‚Ñù) (h : a > b ‚àß b > 0) : ‚Ñù :=
  let A := (-a, 0)
  let B := (0, b)
  let AB := Œª (x y : ‚Ñù), b*x - a*y + a*b = 0
  let F := (-sqrt (a^2 - b^2), 0)
  let distance := abs (b * sqrt (a^2 - b^2) + a*b) / sqrt (a^2 + b^2)
  in if distance = b / sqrt 7 then 1/2
     else sorry

theorem eccentricity_of_ellipse (a b : ‚Ñù) (h : a > b ‚àß b > 0) :
  let e := ellipse_eccentricity a b h in
  e = 1/2 :=
by rw [ellipse_eccentricity] ; sorry

end eccentricity_of_ellipse_l101_101063


namespace find_original_number_l101_101799

open Int

theorem find_original_number (N y x : ‚Ñï) (h1 : N = 10 * y + x) (h2 : N + y = 54321) (h3 : x = 54321 % 11) (h4 : y = 4938) : N = 49383 := by
  sorry

end find_original_number_l101_101799


namespace original_number_l101_101816

theorem original_number (N y x : ‚Ñï) 
  (h1: N + y = 54321)
  (h2: N = 10 * y + x)
  (h3: 11 * y + x = 54321)
  (h4: x = 54321 % 11)
  (hy: y = 4938) : 
  N = 49383 := 
  by 
  sorry

end original_number_l101_101816


namespace original_five_digit_number_l101_101810

theorem original_five_digit_number :
  ‚àÉ N y x : ‚Ñï, (N = 10 * y + x) ‚àß (N + y = 54321) ‚àß (N = 49383) :=
by
  -- The proof script goes here
  sorry

end original_five_digit_number_l101_101810


namespace power_function_unique_l101_101957

theorem power_function_unique (f : ‚Ñù ‚Üí ‚Ñù) (h : f 27 = 3) : f = (Œª x, x^(1/3)) :=
sorry

end power_function_unique_l101_101957


namespace zoo_total_animals_l101_101396

def num_tiger_enclosures : ‚Ñï := 4
def num_zebra_enclosures_per_tiger : ‚Ñï := 2
def num_giraffe_enclosures_per_zebra : ‚Ñï := 3
def num_tigers_per_enclosure : ‚Ñï := 4
def num_zebras_per_enclosure : ‚Ñï := 10
def num_giraffes_per_enclosure : ‚Ñï := 2

theorem zoo_total_animals :
  let num_zebra_enclosures := num_tiger_enclosures * num_zebra_enclosures_per_tiger,
      num_giraffe_enclosures := num_zebra_enclosures * num_giraffe_enclosures_per_zebra,
      total_tigers := num_tiger_enclosures * num_tigers_per_enclosure,
      total_zebras := num_zebra_enclosures * num_zebras_per_enclosure,
      total_giraffes := num_giraffe_enclosures * num_giraffes_per_enclosure,
      total_animals := total_tigers + total_zebras + total_giraffes
  in total_animals = 144 :=
by
  intros
  let num_zebra_enclosures := num_tiger_enclosures * num_zebra_enclosures_per_tiger
  let num_giraffe_enclosures := num_zebra_enclosures * num_giraffe_enclosures_per_zebra
  let total_tigers := num_tiger_enclosures * num_tigers_per_enclosure
  let total_zebras := num_zebra_enclosures * num_zebras_per_enclosure
  let total_giraffes := num_giraffe_enclosures * num_giraffes_per_enclosure
  let total_animals := total_tigers + total_zebras + total_giraffes
  exact eq.refl 144

end zoo_total_animals_l101_101396


namespace sqrt_factorial_mul_self_eq_sqrt_factorial_mul_self_value_l101_101760

theorem sqrt_factorial_mul_self_eq :
  sqrt ((5!) * (5!)) = 5! :=
by sorry

theorem sqrt_factorial_mul_self_value :
  sqrt ((5!) * (5!)) = 120 :=
by {
  rw sqrt_factorial_mul_self_eq,
  norm_num,
  exact rfl,
  sorry
}

end sqrt_factorial_mul_self_eq_sqrt_factorial_mul_self_value_l101_101760


namespace delta_f_l101_101427

open BigOperators

def f (n : ‚Ñï) : ‚Ñï := ‚àë i in Finset.range n, (i + 1) * (n - i)

theorem delta_f (k : ‚Ñï) : f (k + 1) - f k = ‚àë i in Finset.range (k + 1), (i + 1) :=
by
  sorry

end delta_f_l101_101427


namespace find_cos_A_l101_101134

variable (A B C : Type) [RealNotorder√∂d]

-- Assume triangle ABC is acute
def acute_triangle (a b c : Real) : Prop := a < œÄ / 2 ‚àß b < œÄ / 2 ‚àß c < œÄ / 2

-- Assume area of triangle ABC is given
def area_triangle (ab ac sinA : Real) := (1 / 2) * ab * ac * sinA = 3 * sqrt 3 / 2

noncomputable def cos_a (a b c : Real) (ab ac : Real) (area : Real) : Prop :=
  let sinA := (area * 2) / (ab * ac)
  sinA = sqrt 3 / 2 ‚Üí cos a = 1 / 2

-- Prove cos A
theorem find_cos_A (A B C : Real) (h1 : acute_triangle A B C) (h2 : area_triangle 2 3) : cos A = 1 / 2 :=
by
  sorry

end find_cos_A_l101_101134


namespace inverse_proportional_l101_101684

theorem inverse_proportional (p q : ‚Ñù) (k : ‚Ñù) 
  (h1 : ‚àÄ (p q : ‚Ñù), p * q = k)
  (h2 : p = 25)
  (h3 : q = 6) 
  (h4 : q = 15) : 
  p = 10 := 
by
  sorry

end inverse_proportional_l101_101684


namespace max_volume_of_tetrahedron_l101_101512

-- Define the conditions of the problem
variable (P A B C : Type) [MetricSpace P]
variable [MetricSpace A] [MetricSpace B] [MetricSpace C]
variable [HasDist A] [HasDist B] [HasDist C]

variable (d_PA : ‚Ñö) (d_PB : ‚Ñö) (d_AB : ‚Ñö) (d_BC : ‚Ñö) (d_CA : ‚Ñö)
variable (max_volume : ‚Ñö)

hypothesis h1 : d_PA = 3
hypothesis h2 : d_PB = 3
hypothesis h3 : d_AB = 2
hypothesis h4 : d_BC = 2
hypothesis h5 : d_CA = 2

-- Define the problem to prove
theorem max_volume_of_tetrahedron : 
  max_volume = (2 * Real.sqrt 6) / 3 := by
  sorry

end max_volume_of_tetrahedron_l101_101512


namespace multiples_of_7_with_unit_digit_7_and_lt_150_l101_101101

/--
Given a positive integer n,
Let \(7n\) be a multiple of 7,
\(7n < 150\),
and \(7n \mod 10 = 7\),
prove there are 11 such multiples of 7.
-/
theorem multiples_of_7_with_unit_digit_7_and_lt_150 :
  ‚àÉ! (n : ‚Ñï), n ‚â§ 11 ‚àß ‚àÄ (m : ‚Ñï), (1 ‚â§ m ‚àß m ‚â§ n) ‚Üí (7 * (2 * m - 1) < 150 ‚àß (7 * (2 * m - 1)) % 10 = 7) := by
sorry

end multiples_of_7_with_unit_digit_7_and_lt_150_l101_101101


namespace min_value_dist_sq_l101_101917

noncomputable def circle (x y : ‚Ñù) : Prop := (x - 3)^2 + (y - 4)^2 = 4

def point_A : ‚Ñù √ó ‚Ñù := (-1, 0)
def point_B : ‚Ñù √ó ‚Ñù := (1, 0)

def dist_sq (p‚ÇÅ p‚ÇÇ : ‚Ñù √ó ‚Ñù) : ‚Ñù :=
  (p‚ÇÅ.1 - p‚ÇÇ.1)^2 + (p‚ÇÅ.2 - p‚ÇÇ.2)^2

theorem min_value_dist_sq {x y : ‚Ñù} (hP : circle x y) :
  (dist_sq point_A (x, y) + dist_sq point_B (x, y)) = 20 := sorry

end min_value_dist_sq_l101_101917


namespace coefficient_of_x3_term_l101_101617

-- Definition of polynomial conditions
def polynomial : ‚Ñ§[X] := (X^2 - 2 * X) * (1 + X)^6

-- Statement to prove the coefficient of the x^3 term
theorem coefficient_of_x3_term : polynomial.coeff 3 = -24 := by
  -- This is a placeholder to indicate that the proof itself is to be provided
  sorry

end coefficient_of_x3_term_l101_101617


namespace tax_deduction_is_correct_l101_101850

-- Define the hourly wage and tax rate
def hourly_wage_dollars : ‚Ñù := 25
def tax_rate : ‚Ñù := 0.021

-- Define the conversion from dollars to cents
def dollars_to_cents (dollars : ‚Ñù) : ‚Ñù := dollars * 100

-- Calculate the hourly wage in cents
def hourly_wage_cents : ‚Ñù := dollars_to_cents hourly_wage_dollars

-- Calculate the tax deducted in cents per hour
def tax_deduction_cents (wage : ‚Ñù) (rate : ‚Ñù) : ‚Ñù := rate * wage

-- State the theorem that needs to be proven
theorem tax_deduction_is_correct :
  tax_deduction_cents hourly_wage_cents tax_rate = 52.5 :=
by
  sorry

end tax_deduction_is_correct_l101_101850


namespace solve_proof_problem_l101_101523

noncomputable def proof_problem (alpha : ‚Ñù) :=
  ùöúùöéùöåùöòùöóùöçùöÄùöûùöäùöçùöõùöäùöóùöù : ‚àÉ k : ‚Ñ§, Œ± ‚àà set.Ioo (k * (2 * Real.pi) + Real.pi / 2) (k * (2 * Real.pi) + Real.pi) ‚àß
  (h : Real.sin (alpha + Real.pi / 6) = 1 / 3),
  Real.sin (2 * alpha + Real.pi / 3) = -4 * Real.sqrt 2 / 9

theorem solve_proof_problem (alpha : ‚Ñù) (h1 : ‚àÉ k : ‚Ñ§, alpha ‚àà set.Ioo (k * (2 * Real.pi) + Real.pi / 2) (k * (2 * Real.pi) + Real.pi)) 
                             (h2 : Real.sin (alpha + Real.pi / 6) = 1 / 3) :
  Real.sin (2 * alpha + Real.pi / 3) = -4 * Real.sqrt 2 / 9 :=
sorry

end solve_proof_problem_l101_101523


namespace logs_in_stack_l101_101384

theorem logs_in_stack (a l : ‚Ñï) (n : ‚Ñï) (S : ‚Ñï)
  (a_eq_five : a = 5)
  (l_eq_fifteen : l = 15)
  (n_eq_eleven : n = 15 - 5 + 1)
  (S_eq_sum : S = n / 2 * (a + l)) :
  S = 110 :=
by
  rw [a_eq_five, l_eq_fifteen, n_eq_eleven, S_eq_sum]
  sorry

end logs_in_stack_l101_101384


namespace Q_at_2_l101_101724

-- Define the polynomial Q(x)
def Q (x : ‚Ñö) : ‚Ñö := x^4 - 8 * x^2 + 16

-- Define the properties of Q(x)
def is_special_polynomial (P : (‚Ñö ‚Üí ‚Ñö)) : Prop := 
  degree P = 4 ‚àß leading_coeff P = 1 ‚àß P.is_root(‚àö3 + ‚àö7)

-- Problem: Prove Q(2) = 0 given the polynomial Q meets the conditions.
theorem Q_at_2 (Q : ‚Ñö ‚Üí ‚Ñö) (h1 : degree Q = 4) (h2 : leading_coeff Q = 1) (h3 : is_root Q (‚àö3 + ‚àö7)) : 
  Q 2 = 0 := by
  sorry

end Q_at_2_l101_101724


namespace intersection_points_l101_101059

def periodic_func (f : ‚Ñù ‚Üí ‚Ñù) (p : ‚Ñù) : Prop :=
  ‚àÄ x, f (x + p) = f x

def func_def (f : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x, (0 ‚â§ x ‚àß x < 2) ‚Üí f x = x^3 - x

theorem intersection_points (f : ‚Ñù ‚Üí ‚Ñù)
  (h_periodic : periodic_func f 2)
  (h_def : func_def f) :
  (‚àÉ s : set ‚Ñù, s = { x ‚àà set.Icc 0 6 | f x = 0 } ‚àß s.to_finset.card = 7) :=
sorry

end intersection_points_l101_101059


namespace m_minus_n_is_4_l101_101070

def f (x : ‚Ñù) (m n : ‚Ñù) : ‚Ñù :=
  if x > 0 then m * Real.log 2017 x + 3 * Real.sin x
  else Real.log 2017 (-x) + n * Real.sin x

theorem m_minus_n_is_4 {m n : ‚Ñù} 
  (hf : ‚àÄ x : ‚Ñù, f x m n = f (-x) m n) : m - n = 4 :=
by
  have h_pos : ‚àÄ x > 0, f x m n = f (-x) m n := Œª x hx, hf x
  have h_neg : ‚àÄ x < 0, f x m n = f (-x) m n := Œª x hx, hf x

  -- Show that m = 1
  have m_eq_1 : m = 1 := 
    by
      -- taking any positive x (e.g., x = 1)
      specialize h_pos 1 (by linarith)
      simp at h_pos
      have : m * Real.log 2017 1 + 3 * Real.sin 1 = Real.log 2017 1 - n * Real.sin 1 := h_pos
      have log1 : Real.log 2017 1 = 0 := sorry
      have sin1 : 3 * Real.sin 1 + n * Real.sin 1 = 0 := sorry
      have : m * 0 + 3 * Real.sin 1 = 0 - n * Real.sin 1 := sorry
      linarith

  -- Show that n = -3
  have n_eq_n3 : n = -3 := 
    by
      specialize h_pos 1 (by linarith)
      simp at h_pos
      sorry

  simp [m_eq_1, n_eq_n3]
  linarith

end m_minus_n_is_4_l101_101070


namespace martha_blue_butterflies_l101_101664

-- Definitions based on conditions
variables (total_butterflies : ‚Ñï) (black_butterflies : ‚Ñï)
variables (yellow_butterflies : ‚Ñï) (blue_butterflies : ‚Ñï)

def total_is_11 : Prop := total_butterflies = 11
def black_is_5 : Prop := black_butterflies = 5
def blue_is_twice_yellow : Prop := blue_butterflies = 2 * yellow_butterflies
def remaining_is_blue_and_yellow : Prop := total_butterflies - black_butterflies = blue_butterflies + yellow_butterflies

-- The statement we want to prove
theorem martha_blue_butterflies (h1 : total_is_11) (h2 : black_is_5) 
    (h3 : blue_is_twice_yellow) (h4 : remaining_is_blue_and_yellow) :
    blue_butterflies = 4 := 
begin
  sorry
end

end martha_blue_butterflies_l101_101664


namespace triangle_area_DE_F_l101_101123

theorem triangle_area_DE_F (DE EF DF : ‚Ñù) (hDE : DE = 35) (hEF : EF = 35) (hDF : DF = 54) :
  let s := (DE + EF + DF) / 2 in
  let area := Real.sqrt (s * (s - DE) * (s - EF) * (s - DF)) in
  area = 602 := by
  sorry

end triangle_area_DE_F_l101_101123


namespace sin_eq_product_one_eighth_l101_101024

open Real

theorem sin_eq_product_one_eighth :
  (‚àÄ (n k m : ‚Ñï), 1 ‚â§ n ‚Üí n ‚â§ 5 ‚Üí 1 ‚â§ k ‚Üí k ‚â§ 5 ‚Üí 1 ‚â§ m ‚Üí m ‚â§ 5 ‚Üí
    sin (œÄ * n / 12) * sin (œÄ * k / 12) * sin (œÄ * m / 12) = 1 / 8) ‚Üî (n = 2 ‚àß k = 2 ‚àß m = 2) := by
  sorry

end sin_eq_product_one_eighth_l101_101024


namespace number_of_partitions_l101_101423

-- Definition: n-staircase
def n_staircase (n : ‚Ñï) : set (‚Ñï √ó ‚Ñï) :=
  {p | 1 ‚â§ p.1 ‚àß p.1 ‚â§ p.2 ‚àß p.2 ‚â§ n}

-- The main theorem to be proven
theorem number_of_partitions (n : ‚Ñï) :
  (‚àÉ partitions : list (set (‚Ñï √ó ‚Ñï)), 
    (‚àÄ rect ‚àà partitions, rect ‚äÜ n_staircase n ‚àß rect.is_rectangle) ‚àß 
    (partitions.pairwise_disjoint ‚àß partitions.areas_are_distinct)) ‚Üí 
    partitions.length = 2^(n-1) :=
by sorry

end number_of_partitions_l101_101423


namespace complex_modulus_example_correct_l101_101489

noncomputable def complex_modulus_example : ‚ÑÇ := -3 + (8 / 5.0) * I

theorem complex_modulus_example_correct :
  complex.norm complex_modulus_example = 17 / 5 := 
by 
  sorry

end complex_modulus_example_correct_l101_101489


namespace count_positive_integers_in_range_l101_101899

theorem count_positive_integers_in_range (a b : ‚Ñï) (hx : a = 144) (hy : b = 256) :
  {x : ‚Ñï | a ‚â§ x^2 ‚àß x^2 ‚â§ b}.card = 5 :=
by
  sorry

end count_positive_integers_in_range_l101_101899


namespace skirts_to_add_l101_101188

-- Definitions based on conditions
def skirt_price : ‚Ñï := 20
def blouse_price : ‚Ñï := 15
def pant_price : ‚Ñï := 30
def total_budget : ‚Ñï := 180
def num_blouses : ‚Ñï := 5
def num_pants : ‚Ñï := 2

-- Main theorem stating that Marcia can buy 3 skirts
theorem skirts_to_add : 
  let total_blouse_cost := num_blouses * blouse_price in
  let discounted_pant_cost := pant_price + pant_price / 2 in
  let total_pant_cost := discounted_pant_cost in
  let total_spent := total_blouse_cost + total_pant_cost in
  let remaining_budget := total_budget - total_spent in
  let num_skirts := remaining_budget / skirt_price in
  num_skirts = 3 :=
by
  -- Here the proof steps would go
  sorry

end skirts_to_add_l101_101188


namespace bucket_water_l101_101431

theorem bucket_water (oz1 oz2 oz3 oz4 oz5 total1 total2: ‚Ñï) 
  (h1 : oz1 = 11)
  (h2 : oz2 = 13)
  (h3 : oz3 = 12)
  (h4 : oz4 = 16)
  (h5 : oz5 = 10)
  (h_total : total1 = oz1 + oz2 + oz3 + oz4 + oz5)
  (h_second_bucket : total2 = 39)
  : total1 - total2 = 23 :=
sorry

end bucket_water_l101_101431


namespace directrix_of_parabola_l101_101227

theorem directrix_of_parabola (p : ‚Ñù) (hp : 2 * p = 4) : 
  (‚àÉ x : ‚Ñù, x = -1) :=
by
  sorry

end directrix_of_parabola_l101_101227


namespace not_factorial_tails_l101_101463

noncomputable def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) + ...

theorem not_factorial_tails :
  let n := 2500 in ‚àÉ (k : ‚Ñï), k = 500 ‚àß ‚àÄ m < n, ¬¨(f m = k) :=
by {
  sorry
}

end not_factorial_tails_l101_101463


namespace monotonicity_x_pow_2_over_3_l101_101704

noncomputable def x_pow_2_over_3 (x : ‚Ñù) : ‚Ñù := x^(2/3)

theorem monotonicity_x_pow_2_over_3 : ‚àÄ x y : ‚Ñù, 0 < x ‚Üí x < y ‚Üí x_pow_2_over_3 x < x_pow_2_over_3 y :=
by
  intros x y hx hxy
  sorry

end monotonicity_x_pow_2_over_3_l101_101704


namespace sum_first_9000_terms_l101_101245

noncomputable def geometric_sequence_sum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r^n) / (1 - r)

theorem sum_first_9000_terms (a r : ‚Ñù) :
  geometric_sequence_sum a r 3000 = 500 ‚Üí
  geometric_sequence_sum a r 6000 = 950 ‚Üí
  geometric_sequence_sum a r 9000 = 1355 :=
by
  intros h1 h2
  sorry

end sum_first_9000_terms_l101_101245


namespace remainder_of_polynomial_division_l101_101753

theorem remainder_of_polynomial_division :
  let y := (x : ‚Ñù) ‚Üí x^5 - 8*x^4 + 15*x^3 + 30*x^2 - 47*x + 20
  y 2 = 104 :=
by
  let y := (x : ‚Ñù) ‚Üí x^5 - 8*x^4 + 15*x^3 + 30*x^2 - 47*x + 20
  sorry

end remainder_of_polynomial_division_l101_101753


namespace parkway_elementary_students_l101_101622

/-- The total number of students in the fifth grade at Parkway Elementary School is 420,
given the following conditions:
1. There are 312 boys.
2. 250 students are playing soccer.
3. 78% of the students that play soccer are boys.
4. There are 53 girl students not playing soccer. -/
theorem parkway_elementary_students (boys : ‚Ñï) (playing_soccer : ‚Ñï) (percent_boys_playing : ‚Ñù) (girls_not_playing_soccer : ‚Ñï)
  (h1 : boys = 312)
  (h2 : playing_soccer = 250)
  (h3 : percent_boys_playing = 0.78)
  (h4 : girls_not_playing_soccer = 53) :
  ‚àÉ total_students : ‚Ñï, total_students = 420 :=
by
  sorry

end parkway_elementary_students_l101_101622


namespace four_friendly_hands_with_largest_7_l101_101593

-- Definition of a friendly hand
def is_friendly_hand (cards : List ‚Ñï) : Prop :=
  cards.length = 4 ‚àß cards.sum = 24

-- Definition of having 7 as the largest number
def has_largest_7 (cards : List ‚Ñï) : Prop :=
  List.maximum cards = some 7

-- The problem statement: There are 4 distinct friendly hands with the largest number being 7
theorem four_friendly_hands_with_largest_7 :
  (finset.filter (Œª cards, is_friendly_hand cards ‚àß has_largest_7 cards)
    (finset.powerset (finset.range 10)).filter (Œª cards, cards.cardinality = 4)).card = 4 :=
by
  sorry

end four_friendly_hands_with_largest_7_l101_101593


namespace rotate_3_minus_sqrt3i_by_pi_over_3_l101_101616

def rotate_complex_clockwise (z : Complex) (theta : ‚Ñù) : Complex :=
  z * Complex.conj (Complex.exp (-Complex.I * theta))

theorem rotate_3_minus_sqrt3i_by_pi_over_3 :
  rotate_complex_clockwise (3 - Real.sqrt 3 * Complex.I) (Real.pi / 3) = -2 * Real.sqrt 3 * Complex.I :=
by
  -- Placeholder for the proof
  sorry

end rotate_3_minus_sqrt3i_by_pi_over_3_l101_101616


namespace martha_blue_butterflies_l101_101665

-- Definitions based on conditions
variables (total_butterflies : ‚Ñï) (black_butterflies : ‚Ñï)
variables (yellow_butterflies : ‚Ñï) (blue_butterflies : ‚Ñï)

def total_is_11 : Prop := total_butterflies = 11
def black_is_5 : Prop := black_butterflies = 5
def blue_is_twice_yellow : Prop := blue_butterflies = 2 * yellow_butterflies
def remaining_is_blue_and_yellow : Prop := total_butterflies - black_butterflies = blue_butterflies + yellow_butterflies

-- The statement we want to prove
theorem martha_blue_butterflies (h1 : total_is_11) (h2 : black_is_5) 
    (h3 : blue_is_twice_yellow) (h4 : remaining_is_blue_and_yellow) :
    blue_butterflies = 4 := 
begin
  sorry
end

end martha_blue_butterflies_l101_101665


namespace right_angled_pyramid_property_1_right_angled_pyramid_property_2_l101_101377

/-- Definition of a right-angled pyramid -/
structure RightAngledPyramid (V : Type*) [NormedAddCommGroup V] [NormedSpace ‚Ñù V] : Type* :=
(lateral_edges_perpendicular : ‚àÄ v1 v2 v3 : V, v1 ‚ä• v2 ‚àß v2 ‚ä• v3 ‚àß v1 ‚ä• v3)
(lateral_faces_right_angled)
(base : Set V) -- This represents the oblique face

/-- Definition of the mid-face of the oblique face -/
def MidFaceOfObliqueFace (pyramid : RightAngledPyramid V) : Set V := 
-- Mid-face passing through the vertex and midpoints of two sides of the oblique face.
sorry

variable {V : Type*} [NormedAddCommGroup V] [NormedSpace ‚Ñù V]

theorem right_angled_pyramid_property_1 (pyramid : RightAngledPyramid V) :
  let A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ := sorry in -- areas of the right-angled faces and the oblique face
  (A‚ÇÅ^2 + A‚ÇÇ^2 + A‚ÇÉ^2 = A‚ÇÑ^2) :=
sorry

theorem right_angled_pyramid_property_2 (pyramid : RightAngledPyramid V) :
  let A‚ÇÑ := sorry in -- area of the oblique face
  let A_mid := sorry in -- area of the mid-face of the oblique face
  (A_mid = (1/4) * A‚ÇÑ) :=
sorry

end right_angled_pyramid_property_1_right_angled_pyramid_property_2_l101_101377


namespace maintain_ratio_l101_101189

def ratio_ingredients (flour salt : ‚Ñï) : Prop := flour = 2 * salt

theorem maintain_ratio (sugar : ‚Ñï) : 
  ‚àÄ (initial_flour initial_salt desired_flour : ‚Ñï), 
  ratio_ingredients desired_flour initial_salt ‚Üí 
  initial_flour = 2 ‚Üí initial_salt = 2 ‚Üí 
  initial_flour + 2 = desired_flour + initial_salt := 
by
  intros
  rw [ratio_ingredients] at H
  rw [H]
  rw [H] at *
  rw [H at H_0]
  assumption
  sorry

end maintain_ratio_l101_101189


namespace grisha_wins_with_104_l101_101332

theorem grisha_wins_with_104 : 
  ‚àÄ (P : ‚Ñï), P ‚àà (1:‚Ñï)..(105:‚Ñï) ‚àß P % 2 = 0 ‚Üí 
  (‚àÉ w:number_pairs P, w = max_number_pairs_in_range)
--- conditions
-- P ‚àà 1..105 
-- P % 2 = 0 (P must be even)
-- number_pairs P is defined as: 
-- number_pairs P = ‚åä P/4 ‚åã
-- max_number_pairs_in_range is the maximum number of pairs within the given range (1..105)
--- statement
-- Grisha wins with the number 104
by sorry

end grisha_wins_with_104_l101_101332


namespace min_distance_transform_g_correct_l101_101052

noncomputable def z1 (x : ‚Ñù) := Complex.mk (Real.cos x) 1
noncomputable def z2 (x : ‚Ñù) := Complex.mk 1 (-Real.sin x)
noncomputable def distance (x : ‚Ñù) := Complex.abs (z1 x - z2 x)

theorem min_distance : ‚àÉ x : ‚Ñù, distance x = Real.sqrt 2 - 1 := 
sorry

noncomputable def f (x : ‚Ñù) := 1 - (1 / 2) * Real.sin (2 * x)
noncomputable def g (x : ‚Ñù) := 1 + (1 / 2) * Real.cos x

theorem transform_g_correct : ‚àÄ x : ‚Ñù, 
  let y1 := 1 - (1 / 2) * Real.sin x;
  let g_transformed := y1 (x - (Real.pi / 2)) in
  g_transformed = g x := 
sorry

end min_distance_transform_g_correct_l101_101052


namespace determine_valid_m_l101_101950

-- The function given in the problem
def f (m : ‚Ñù) (x : ‚Ñù) : ‚Ñù := m * x^2 + x + m + 2

-- The range of values for m
def valid_m (m : ‚Ñù) : Prop := -1/4 ‚â§ m ‚àß m ‚â§ 0

-- The condition that f is increasing on (-‚àû, 2)
def increasing_on_interval (f : ‚Ñù ‚Üí ‚Ñù) (a : ‚Ñù) : Prop :=
  ‚àÄ x y : ‚Ñù, x < y ‚Üí y < a ‚Üí f x ‚â§ f y

-- The main statement we want to prove
theorem determine_valid_m (m : ‚Ñù) :
  increasing_on_interval (f m) 2 ‚Üî valid_m m :=
sorry

end determine_valid_m_l101_101950


namespace evaluate_Q_at_2_l101_101727

-- Define the polynomial Q(x)
noncomputable def Q (x : ‚Ñö) : ‚Ñö := x^4 - 20 * x^2 + 16

-- Define the root condition of sqrt(3) + sqrt(7)
def root_condition (x : ‚Ñö) : Prop := (x = ‚Ñö.sqrt(3) + ‚Ñö.sqrt(7))

-- Theorem statement
theorem evaluate_Q_at_2 : Q 2 = -32 :=
by
  -- Given conditions
  have h1 : degree Q = 4 := sorry,
  have h2 : leading_coeff Q = 1 := sorry,
  have h3 : root_condition (‚Ñö.sqrt(3) + ‚Ñö.sqrt(7)) := sorry,
  -- Goal
  exact sorry

end evaluate_Q_at_2_l101_101727


namespace fifty_percent_of_number_l101_101576

noncomputable def given_number (N : ‚Ñù) : Prop :=
  1.15 * ((1/4) * (1/3) * (2/5) * N) = 23

theorem fifty_percent_of_number (N : ‚Ñù) (h : given_number N) : 0.5 * N = 300 :=
begin
  sorry
end

end fifty_percent_of_number_l101_101576


namespace min_a1a3_value_l101_101912

noncomputable def minimum_a1a3 (a : ‚Ñï ‚Üí ‚Ñù) : ‚Ñù :=
  let x := a 1 + 1
  let y := a 3 + 3 in
  x * y - 3 * x - y + 3

theorem min_a1a3_value (a : ‚Ñï ‚Üí ‚Ñù)
  (h_pos : ‚àÄ n, 0 < a n)
  (h_a2 : a 2 = 6)
  (h_arith_seq : (1 / (a 1 + 1) + 1 / (a 3 + 3)) = 1 / (a 2 + 2)) :
  minimum_a1a3 a = 19 + 8 * real.sqrt 3 :=
by
  sorry

end min_a1a3_value_l101_101912


namespace octagon_Q_area_l101_101425

noncomputable def octagon_area (apothem : ‚Ñù) : ‚Ñù :=
  let side_length := 6 * (Real.sqrt 2 - 1) in
  let smaller_side_length := side_length / 2 in
  2 * (smaller_side_length ^ 2) * (1 + Real.sqrt 2)

theorem octagon_Q_area :
  octagon_area 3 = 36 * Real.sqrt 2 - 36 :=
by
  sorry

end octagon_Q_area_l101_101425


namespace john_more_needed_l101_101156

def john_needs : ‚Ñù := 2.5
def john_has : ‚Ñù := 0.75
def john_needs_more : ‚Ñù := 1.75

theorem john_more_needed : (john_needs - john_has) = john_needs_more :=
by
  sorry

end john_more_needed_l101_101156


namespace zero_count_in_interval_l101_101241

def f (x : ‚Ñù) : ‚Ñù := Real.tan (1935 * x) - Real.tan (2021 * x) + Real.tan (2107 * x)

theorem zero_count_in_interval :
  ‚àÉ (n : ‚Ñï), n = 2022 ‚àß ‚àÄ x ‚àà Set.Icc 0 Real.pi, f x = 0 ‚Üí x = (k : ‚Ñï) * Real.pi / 2021 ‚àß k ‚àà Finset.range 2022 := 
sorry

end zero_count_in_interval_l101_101241


namespace ratio_volumes_of_spheres_l101_101584

theorem ratio_volumes_of_spheres (r R : ‚Ñù) (hratio : (4 * œÄ * r^2) / (4 * œÄ * R^2) = 4 / 9) :
    (4 / 3 * œÄ * r^3) / (4 / 3 * œÄ * R^3) = 8 / 27 := 
by {
  sorry
}

end ratio_volumes_of_spheres_l101_101584


namespace no_intersections_l101_101871

noncomputable def abs_eq (a b : ‚Ñù) : ‚Ñù := abs (a - b)

def f1 (x : ‚Ñù) : ‚Ñù := abs (3 * x + 6)
def f2 (x : ‚Ñù) : ‚Ñù := -abs (4 * x - 3)

theorem no_intersections :
  ‚àÄ x y : ‚Ñù, (y = f1 x) ‚Üí (y = f2 x) ‚Üí False :=
by
  assume x y h1 h2
  sorry

end no_intersections_l101_101871


namespace number_of_games_in_chess_tournament_l101_101975

theorem number_of_games_in_chess_tournament 
  (n : ‚Ñï) (h : n = 19) : (‚àë i in finset.range n, i) / 2 = 171 :=
by
  sorry

end number_of_games_in_chess_tournament_l101_101975


namespace multiples_of_7_units_digit_7_l101_101089

theorem multiples_of_7_units_digit_7 (n : ‚Ñï) (h1 : n < 150) (h2 : ‚àÉ (k : ‚Ñï), n = 7 * k) (h3 : n % 10 = 7) : 
    ‚àÉ (m : ‚Ñï), m = 2 := 
by
  sorry

end multiples_of_7_units_digit_7_l101_101089


namespace find_k_exists_p3_p5_no_number_has_p2_and_p4_l101_101573

def has_prop_pk (n k : ‚Ñï) : Prop := ‚àÉ lst : List ‚Ñï, (‚àÄ x ‚àà lst, x > 1) ‚àß (lst.length = k) ‚àß (lst.prod = n)

theorem find_k_exists_p3_p5 :
  ‚àÉ (k : ‚Ñï), (k = 3) ‚àß ‚àÉ (n : ‚Ñï), has_prop_pk n k ‚àß has_prop_pk n (k + 2) :=
by {
  sorry
}

theorem no_number_has_p2_and_p4 :
  ¬¨ ‚àÉ (n : ‚Ñï), has_prop_pk n 2 ‚àß has_prop_pk n 4 :=
by {
  sorry
}

end find_k_exists_p3_p5_no_number_has_p2_and_p4_l101_101573


namespace functional_equation_solution_l101_101866

theorem functional_equation_solution :
  ‚àÄ f : ‚Ñù ‚Üí ‚Ñù, (‚àÄ x y : ‚Ñù, f(2 * x + f(y)) = x + y + f(x)) ‚Üí (‚àÄ x : ‚Ñù, f(x) = x) :=
by
  intros f H
  sorry

end functional_equation_solution_l101_101866


namespace modulus_of_Z_l101_101781

noncomputable def Z : ‚ÑÇ := Complex.ofReal (2 * (Complex.I)) / Complex.ofReal (1 - Complex.I)

-- Prove that the modulus of the complex number Z is ‚àö2 given that (1-i)Z = 2i.
theorem modulus_of_Z : (1 - Complex.I) * Z = 2 * Complex.I ‚Üí Complex.abs Z = Real.sqrt 2 :=
by
  intro hyp
  -- omitting the proof steps, only the statement is required
  sorry

end modulus_of_Z_l101_101781


namespace distance_along_stream_l101_101138
-- Define the problem in Lean 4

noncomputable def speed_boat_still : ‚Ñù := 11   -- Speed of the boat in still water
noncomputable def distance_against_stream : ‚Ñù := 9  -- Distance traveled against the stream in one hour

theorem distance_along_stream : 
  ‚àÉ (v_s : ‚Ñù), (speed_boat_still - v_s = distance_against_stream) ‚àß (11 + v_s) * 1 = 13 := 
by
  use 2
  sorry

end distance_along_stream_l101_101138


namespace min_people_all_items_l101_101602

noncomputable def minimum_people_wearing_all_items (n : ‚Ñï) (gloves hats scarves : ‚Ñï) :=
  1 / 3 * n = gloves ‚àß 2 / 3 * n = hats ‚àß 1 / 2 * n = scarves ‚Üí gloves + hats + scarves - (gloves + hats - 6) - (gloves + scarves - 6) - (hats + scarves - 6) + (gloves + hats + scarves - n) = 6

theorem min_people_all_items (n : ‚Ñï) (gloves hats scarves : ‚Ñï) :
  n = 12 ‚Üí 1 / 3 * n = 4 ‚Üí 2 / 3 * n = 8 ‚Üí 1 / 2 * n = 6 ‚Üí minimum_people_wearing_all_items n gloves hats scarves = 6 :=
by 
  sorry

end min_people_all_items_l101_101602


namespace sum_of_divisors_37_l101_101317

theorem sum_of_divisors_37 : ‚àë d in (finset.filter (Œª d, 37 % d = 0) (finset.range 38)), d = 38 :=
by {
  sorry
}

end sum_of_divisors_37_l101_101317


namespace find_original_number_l101_101801

open Int

theorem find_original_number (N y x : ‚Ñï) (h1 : N = 10 * y + x) (h2 : N + y = 54321) (h3 : x = 54321 % 11) (h4 : y = 4938) : N = 49383 := by
  sorry

end find_original_number_l101_101801


namespace values_of_a_and_b_l101_101876

noncomputable def a_value := -(75 / 2)
noncomputable def b_value := (59 / 2)
noncomputable def f := (a_value : ‚Ñö) * X^4 + (b_value : ‚Ñö) * X^3 + 38 * X^2 - 12 * X + 15
noncomputable def g := 3 * X^2 - 2 * X + 2

theorem values_of_a_and_b :
  (‚àÉ (u : Polynomial ‚Ñö), f = g * u) ‚Üí
  a_value = -(75 / 2) ‚àß b_value = (59 / 2) :=
by
  sorry

end values_of_a_and_b_l101_101876


namespace partition_intersect_lines_l101_101778

variables (N : ‚Ñï)
variables (a : ‚Ñï ‚Üí ‚Ñï) (b : ‚Ñï ‚Üí ‚Ñï)

theorem partition_intersect_lines (h_partition : ‚àÄ n, n ‚â• 1 ‚Üí ‚àÄ l ‚àà partition_sets n, all_parallel_lines l ‚àà partition_sets n)
  (h_intersect : ‚àÄ n, n ‚â• 2 ‚Üí ‚àÄ p ‚àà intersect_points n, exactly_n_lines_intersect_at p n) :
  ‚àë n in (finset.range (N + 1)).filter (Œª n, n ‚â• 2), (a n + b n) * nat.choose n 2 = nat.choose N 2 :=
by
  sorry

end partition_intersect_lines_l101_101778


namespace chord_length_probability_l101_101348

noncomputable theory
open_locale classical

/-- 
  Given a circle with radius R and a fixed point M on its circumference,
  the probability that a randomly chosen point N on the circumference results in
  the chord MN having length greater than sqrt(3) * R is 1/3.
-/
theorem chord_length_probability (R : ‚Ñù) (h_r_pos : R > 0) (M N : {p: ‚Ñù √ó ‚Ñù // p.1^2 + p.2^2 = R^2}) :
  let chord_length_exceeds := dist M.1 N.1 > sqrt(3) * R
  in ‚Ñô (chord_length_exceeds) = 1 / 3 :=
sorry

end chord_length_probability_l101_101348


namespace IH_perp_AD_l101_101405

variables {A B C O M P Q H I N D : Type}
variables [circumcircle : circle O (triangle A B C)]
variables [AB_lt_AC : AB < AC]
variables [angle_BAC : ‚à†BAC = 120¬∞]
variables [midpoint_M : is_midpoint_of_arc M A C (circumcircle)]
variables [tangents_PA_PB : is_tangent PA circumcircle ‚àß is_tangent PB circumcircle]
variables [tangents_QA_QC : is_tangent QA circumcircle ‚àß is_tangent QC circumcircle]
variables [orthocenter_H : is_orthocenter H (triangle P O Q)]
variables [incenter_I : is_incenter I (triangle P O Q)]
variables [midpoint_N : is_midpoint N O I]
variables [second_intersection_D : is_second_intersection D (line M N) circumcircle]

theorem IH_perp_AD : ‚¶É H I A D : Type ‚¶Ñ (IH : IH_perp (line I H) (line A D)) :=
  sorry

end IH_perp_AD_l101_101405


namespace geometric_sequence_a9_value_l101_101529

theorem geometric_sequence_a9_value {a : ‚Ñï ‚Üí ‚Ñù} (q a1 : ‚Ñù) 
  (h_geom : ‚àÄ n, a n = a1 * q ^ n)
  (h_a3 : a 3 = 2)
  (S : ‚Ñï ‚Üí ‚Ñù)
  (h_S : ‚àÄ n, S n = a1 * (1 - q ^ n) / (1 - q))
  (h_sum : S 12 = 4 * S 6) : a 9 = 2 := 
by 
  sorry

end geometric_sequence_a9_value_l101_101529


namespace find_numbers_l101_101236

def is_reverse (n m : ‚Ñï) : Prop :=
  let digits := n.digits 10
  let reversed_digits := digits.reverse
  m = reversed_digits.foldl (Œª acc d, 10 * acc + d) 0

def product_of_digits (n : ‚Ñï) : ‚Ñï :=
  (n.digits 10).foldl (Œª acc d, acc * d) 1

theorem find_numbers (X : ‚Ñï) (h1 : X.digits 10 ‚â† 0) :
  let P := product_of_digits X
  let r := (Œª X, [X % 10, (X / 10) % 10, X / 100]).reverse
    X * r = 1000 + P
  P = 24 ‚à® P = 42 :=
  sorry

end find_numbers_l101_101236


namespace largest_term_l101_101645

-- Given conditions
def U : ‚Ñï := 2 * (2010 ^ 2011)
def V : ‚Ñï := 2010 ^ 2011
def W : ‚Ñï := 2009 * (2010 ^ 2010)
def X : ‚Ñï := 2 * (2010 ^ 2010)
def Y : ‚Ñï := 2010 ^ 2010
def Z : ‚Ñï := 2010 ^ 2009

-- Proposition to prove
theorem largest_term : 
  (U - V) > (V - W) ‚àß 
  (U - V) > (W - X + 100) ‚àß 
  (U - V) > (X - Y) ‚àß 
  (U - V) > (Y - Z) := 
by 
  sorry

end largest_term_l101_101645


namespace hyperbola_parabola_asymptotes_l101_101557

theorem hyperbola_parabola_asymptotes (a b : ‚Ñù) (h‚ÇÄ : a > 0) (h‚ÇÅ : b > 0)
  (h‚ÇÇ : ‚àÉ (x y : ‚Ñù), (-3, 0) = (x ^ 2 / a ^ 2 - y ^ 2 / b ^ 2, y ^ 2 = -12 * x)) 
  (h‚ÇÉ : ‚àÄ (x : ‚Ñù), (x = a * sqrt 2 ‚à® x = -a * sqrt 2)) :
  a = sqrt 3 := 
sorry

end hyperbola_parabola_asymptotes_l101_101557


namespace probability_angle_acute_l101_101345

theorem probability_angle_acute :
  let O : Point
  let A B : Point
  (angle (A, O, B)).degree < 90 :=
sorry

end probability_angle_acute_l101_101345


namespace root_quadratic_expression_value_l101_101531

theorem root_quadratic_expression_value (m : ‚Ñù) (h : m^2 - m - 3 = 0) : 2023 - m^2 + m = 2020 := 
by 
  sorry

end root_quadratic_expression_value_l101_101531


namespace total_cost_of_deck_l101_101291

def num_rare_cards : ‚Ñï := 19
def num_uncommon_cards : ‚Ñï := 11
def num_common_cards : ‚Ñï := 30

def cost_per_rare_card : ‚Ñï := 1
def cost_per_uncommon_card : ‚Ñù := 0.50
def cost_per_common_card : ‚Ñù := 0.25

def cost_of_rare_cards : ‚Ñï := num_rare_cards * cost_per_rare_card
def cost_of_uncommon_cards : ‚Ñù := num_uncommon_cards * cost_per_uncommon_card
def cost_of_common_cards : ‚Ñù := num_common_cards * cost_per_common_card

def total_cost : ‚Ñù := cost_of_rare_cards + cost_of_uncommon_cards + cost_of_common_cards

theorem total_cost_of_deck : total_cost = 32 := by
  -- We will need to convert integers to real numbers for this addition
  have h1 : (cost_of_rare_cards : ‚Ñù) = 19 := by norm_cast
  rw [h1]
  have h2 : (num_uncommon_cards: ‚Ñù) * cost_per_uncommon_card = 5.5 := by norm_num
  have h3 : (num_common_cards: ‚Ñù) * cost_per_common_card = 7.5 := by norm_num
  calc
    (19 : ‚Ñù) + 5.5 + 7.5 = 32 := by norm_num

end total_cost_of_deck_l101_101291


namespace virus_affected_computers_l101_101607

theorem virus_affected_computers (m n : ‚Ñï) (h1 : 5 * m + 2 * n = 52) : m = 8 :=
by
  sorry

end virus_affected_computers_l101_101607


namespace inclination_angle_of_line_l101_101937

theorem inclination_angle_of_line :
  let k := 1 in
  let Œ± := Real.arctan k in
  (Œ± * 180 / Real.pi) = 45 :=
by
  let k := 1
  let Œ± := Real.arctan k
  have h1 : Œ± = Real.pi / 4 := sorry
  have h2 : (Real.pi / 4 * 180 / Real.pi) = 45 := sorry
  exact h2

end inclination_angle_of_line_l101_101937


namespace maxOmega_is_2_l101_101678

noncomputable def maxOmega (œâ : ‚Ñù) : ‚Ñù :=
  if ((œâ > 0) ‚àß 2*sin(œâ*(-œÄ/6)) ‚â• 2*sin(-œÄ/2) ‚àß 2*sin(œâ*(œÄ/4)) ‚â§ 2*sin(œÄ/2)) then 2 else 0

theorem maxOmega_is_2 (œâ : ‚Ñù) (h‚ÇÅ : œâ > 0) (h‚ÇÇ : 2*sin(œâ*(-œÄ/6)) ‚â• 2*sin(-œÄ/2))
  (h‚ÇÉ : 2*sin(œâ*(œÄ/4)) ‚â§ 2*sin(œÄ/2)) : maxOmega œâ = 2 :=
by
  sorry

end maxOmega_is_2_l101_101678


namespace sum_abs_diff_mod_10_l101_101713

theorem sum_abs_diff_mod_10 {a b : Fin 999 ‚Üí ‚Ñï} 
  (h1 : ‚àÄ x, 1 ‚â§ a x ‚àß a x ‚â§ 1998) 
  (h2 : ‚àÄ x, 1 ‚â§ b x ‚àß b x ‚â§ 1998)
  (h3 : Set.toFinset (Set.Range a) ‚à™ Set.toFinset (Set.Range b) = Finset.range 1 1999)
  (h4 : ‚àÄ i, (|a i - b i| = 1) ‚à® (|a i - b i| = 6)) :
  (Finset.univ.sum (Œª i, |a i - b i|)) % 10 = 9 :=
by
  sorry

end sum_abs_diff_mod_10_l101_101713


namespace triangle_side_length_l101_101149

noncomputable def triangle_BC_length (A B C : Type) [EuclideanGeometry A] (angle_A : A) (side_AB : B) (area_ABC : C) : ‚Ñù :=
  let ‚à†A := angle_A
  let AB := side_AB
  let area := area_ABC
  sorry

theorem triangle_side_length (A B C : Type) [EuclideanPlane A B C]
  (angle_A : A) (AB_length : ‚Ñù) (area_ABC : ‚Ñù) (BC_length : ‚Ñù) :
  angle_A = 60 ‚àß AB_length = 2 ‚àß area_ABC = sqrt(3)/2 ‚Üí BC_length = sqrt(3) :=
by
  intro h
  cases h with h1 h
  cases h with h2 h3
  have h_angle_A : angle_A = 60 := h1
  have h_AB_length : AB_length = 2 := h2
  have h_area_ABC : area_ABC = sqrt(3) / 2 := h3
  -- Placeholder for the proof
  sorry

end triangle_side_length_l101_101149


namespace min_sum_abs_elements_l101_101176

theorem min_sum_abs_elements (a b c d : ‚Ñ§) (h1 : a ‚â† 0) (h2 : b ‚â† 0) (h3 : c ‚â† 0) (h4 : d ‚â† 0) 
  (h : matrix.mul (matrix.from_blocks (matrix.scalar 2 1) (matrix.scalar 2 0) (matrix.scalar 2 0) (matrix.scalar 2 1)) 
  (matrix.from_blocks (matrix.scalar 2 1) (matrix.scalar 2 0) (matrix.scalar 2 0) (matrix.scalar 2 1)) 
  = matrix.from_blocks (matrix.scalar 2 12) (matrix.scalar 2 0) (matrix.scalar 2 0) (matrix.scalar 2 12)) :
  |a| + |b| + |c| + |d| = 10 := 
by
  sorry

end min_sum_abs_elements_l101_101176


namespace tan_theta_solution_l101_101108

theorem tan_theta_solution (Œ∏ : ‚Ñù)
  (h : 2 * Real.sin (Œ∏ + Real.pi / 3) = 3 * Real.sin (Real.pi / 3 - Œ∏)) :
  Real.tan Œ∏ = Real.sqrt 3 / 5 := sorry

end tan_theta_solution_l101_101108


namespace max_districts_in_park_l101_101720

theorem max_districts_in_park :
  ‚àÄ (side_length park_side : ‚Ñï) (district_length district_width : ‚Ñï), 
    side_length = 14 ‚Üí
    district_length = 8 ‚Üí
    district_width = 2 ‚Üí
    let park_area := side_length * park_side in 
    let district_area := district_length * district_width in 
    park_area / district_area = 12 :=
by
  intros side_length park_side district_length district_width h_side_length h_district_length h_district_width
  simp [h_side_length, h_district_length, h_district_width]
  let park_area := side_length * side_length
  let district_area := district_length * district_width
  suffices : park_area = 196 ‚àß district_area = 16, sorry
  sorry

end max_districts_in_park_l101_101720


namespace jackson_final_grade_l101_101634

def jackson_hours_playing_video_games : ‚Ñï := 9

def ratio_study_to_play : ‚Ñö := 1 / 3

def time_spent_studying (hours_playing : ‚Ñï) (ratio : ‚Ñö) : ‚Ñö := hours_playing * ratio

def points_per_hour_studying : ‚Ñï := 15

def jackson_grade (time_studied : ‚Ñö) (points_per_hour : ‚Ñï) : ‚Ñö := time_studied * points_per_hour

theorem jackson_final_grade :
  jackson_grade
    (time_spent_studying jackson_hours_playing_video_games ratio_study_to_play)
    points_per_hour_studying = 45 :=
by
  sorry

end jackson_final_grade_l101_101634


namespace abs_diff_61st_term_l101_101746

-- Define sequences C and D
def seqC (n : ‚Ñï) : ‚Ñ§ := 20 + 15 * (n - 1)
def seqD (n : ‚Ñï) : ‚Ñ§ := 20 - 15 * (n - 1)

-- Prove the absolute value of the difference between the 61st terms is 1800
theorem abs_diff_61st_term : (abs (seqC 61 - seqD 61) = 1800) :=
by
  sorry

end abs_diff_61st_term_l101_101746


namespace simplify_complex_fraction_l101_101681

open Complex

theorem simplify_complex_fraction :
  (3 + 8 * Complex.i) / (1 - 4 * Complex.i) = 
  - (29 : ‚ÑÇ) / 17 + (20 : ‚ÑÇ) / 17 * Complex.i :=
by
  sorry

end simplify_complex_fraction_l101_101681


namespace no_three_digit_number_exists_l101_101877

theorem no_three_digit_number_exists (a b c : ‚Ñï) (h‚ÇÅ : 0 ‚â§ a ‚àß a < 10) (h‚ÇÇ : 0 ‚â§ b ‚àß b < 10) (h‚ÇÉ : 0 ‚â§ c ‚àß c < 10) (h‚ÇÑ : a ‚â† 0) :
  ¬¨ ‚àÉ k : ‚Ñï, k^2 = 99 * (a - c) :=
by
  sorry

end no_three_digit_number_exists_l101_101877


namespace triangle_cosine_sine_inequality_l101_101985

theorem triangle_cosine_sine_inequality (A B C : ‚Ñù) (h : A + B + C = Real.pi) 
  (hA : 0 < A) (hB : 0 < B) (hC : 0 < C) 
  (hA_lt_pi : A < Real.pi)
  (hB_lt_pi : B < Real.pi)
  (hC_lt_pi : C < Real.pi) :
  Real.cos A * (Real.sin B + Real.sin C) ‚â• -2 * Real.sqrt 6 / 9 := 
by
  sorry

end triangle_cosine_sine_inequality_l101_101985


namespace furniture_cost_correct_l101_101486

-- Define the initial amount Emma got
def initial_amount : ‚Ñù := 2000

-- Define the amount Emma has left after giving 3/4 of the remaining money to her friend
def amount_left_after_giving (remaining : ‚Ñù) : ‚Ñù := (1 / 4) * remaining

-- Define the amount Emma kept for herself
def amount_kept : ‚Ñù := 400

-- Define the cost of the furniture
def furniture_cost : ‚Ñù := initial_amount - (amount_kept * 4)

-- Problem statement: Prove that the cost of the furniture is $400 given the conditions
theorem furniture_cost_correct : furniture_cost = 400 :=
by
  sorry

end furniture_cost_correct_l101_101486


namespace probability_longest_segment_at_least_z_times_l101_101360

theorem probability_longest_segment_at_least_z_times
  (circumference : ‚Ñù) (cuts : Fin 2 ‚Üí ‚Ñù) (z : ‚Ñù) 
  (h_circumference : circumference = 1)
  (h_cuts_range : ‚àÄ i, 0 ‚â§ cuts i ‚àß cuts i ‚â§ circumference)
  (h_cuts_diff : cuts 0 ‚â† cuts 1)
  (h_z_nonneg : z > 0) :
  let A := min (cuts 0) (min (cuts 1) (circumference - cuts 0 - cuts 1)) in
  let B := min (abs (cuts 0 - cuts 1)) (min (circumference - cuts 0) (circumference - cuts 1)) in
  let C := circumference - A - B in
  (‚àÉ i, i = 0 ‚à® i = 1 ‚à® i = 2) ‚àß (A + B + C = circumference) ‚àß
  ((A ‚â• z * B ‚àß A ‚â• z * C) ‚à® (B ‚â• z * A ‚àß B ‚â• z * C) ‚à® (C ‚â• z * A ‚àß C ‚â• z * B)) ‚Üí
  (1/3) * (circumference / z + 1) = (3 / (z + 1)) :=
sorry

end probability_longest_segment_at_least_z_times_l101_101360


namespace number_of_intersections_l101_101056

def f (x : ‚Ñù) : ‚Ñù := if 0 ‚â§ x ‚àß x < 2 then x^3 - x else f(x - 2)

def is_root (f : ‚Ñù ‚Üí ‚Ñù) (x : ‚Ñù) : Prop := f(x) = 0

open Set

theorem number_of_intersections :
  ‚àÄ (f : ‚Ñù ‚Üí ‚Ñù), (‚àÄ x, f (x + 2) = f x) ‚Üí
  (‚àÄ x, 0 ‚â§ x ‚àß x < 2 ‚Üí f x = x^3 - x) ‚Üí
  count (Œª x, is_root f x ‚àß (0 ‚â§ x ‚àß x ‚â§ 6)) 7 := sorry

end number_of_intersections_l101_101056


namespace hyperbola_equation_l101_101559

theorem hyperbola_equation (a b : ‚Ñù) (h_a_pos : a > 0) (h_b_pos : b > 0) 
    (c_focus : c = 2) (eccentricity : e = 2) 
    (hyp_eq : ‚àÄ x y, (x^2) / (a^2) - (y^2) / (b^2) = 1) 
    (shared_focus : (2, 0) is a focus of the hyperbola) :
  x^2 - (y^2 / 3) = 1 :=
sorry

end hyperbola_equation_l101_101559


namespace pencil_arrangements_count_l101_101744

theorem pencil_arrangements_count:
  ‚àÉ (n : Nat), n = 132 ‚àß (‚àÉ (pencils : List ‚Ñï), 
    pencils.length = 12 ‚àß 
    (‚àÉ (rows : List (List ‚Ñï)), 
      rows.length = 2 ‚àß
      ‚àÄ row ‚àà rows, row.length = 6 ‚àß 
      ‚àÄ row ‚àà rows, List.pairwise (>) row ‚àß 
      ‚àÄ (p2 ‚àà rows.head!) (p1 ‚àà rows[1]), p2 > p1)) :=
sorry

end pencil_arrangements_count_l101_101744


namespace complementary_angle_decrease_l101_101242

theorem complementary_angle_decrease :
  (ratio : ‚Ñö := 3 / 7) ‚Üí
  let total_angle := 90
  let small_angle := (ratio * total_angle) / (1+ratio)
  let large_angle := total_angle - small_angle
  let new_small_angle := small_angle * 1.2
  let new_large_angle := total_angle - new_small_angle
  let decrease_percent := (large_angle - new_large_angle) / large_angle * 100
  decrease_percent = 8.57 :=
by
  sorry

end complementary_angle_decrease_l101_101242


namespace vector_magnitude_sum_l101_101536

open Real

variables (a b : EuclideanSpace ‚Ñù (Fin 2))
variables (angle_ab : ‚Ñù)
variables (norm_b : ‚Ñù)

def vector_a : EuclideanSpace ‚Ñù (Fin 2) := ![1, sqrt 3]

theorem vector_magnitude_sum :
  angle_ab = œÄ * (2 / 3) ‚Üí
  b.norm = 1 ‚Üí
  ‚à•vector_a + b‚à• = sqrt 3 :=
by
  intro h_angle h_b_norm
  -- statements regarding the norms and dot products can be defined here
  sorry

end vector_magnitude_sum_l101_101536


namespace ship_lighthouse_distance_l101_101380

-- Definitions for conditions
def speed : ‚Ñù := 15 -- speed of the ship in km/h
def time : ‚Ñù := 4  -- time the ship sails eastward in hours
def angle_A : ‚Ñù := 60 -- angle at point A in degrees
def angle_C : ‚Ñù := 30 -- angle at point C in degrees

-- Main theorem statement
theorem ship_lighthouse_distance (d_A_C : ‚Ñù) (d_C_B : ‚Ñù) : d_A_C = speed * time ‚Üí d_C_B = 60 := 
by sorry

end ship_lighthouse_distance_l101_101380


namespace point_C_coordinates_line_MN_equation_area_triangle_ABC_l101_101981

-- Define the points A and B
def A : ‚Ñù √ó ‚Ñù := (5, -2)
def B : ‚Ñù √ó ‚Ñù := (7, 3)

-- Let C be an unknown point that we need to determine
variables (x y : ‚Ñù)

-- Define the conditions given in the problem
axiom midpoint_M : (x + 5) / 2 = 0 ‚àß (y + 3) / 2 = 0 -- Midpoint M lies on the y-axis
axiom midpoint_N : (x + 7) / 2 = 1 ‚àß (y + 3) / 2 = 0 -- Midpoint N lies on the x-axis

-- The problem consists of proving three assertions
theorem point_C_coordinates :
  ‚àÉ (x y : ‚Ñù), (x, y) = (-5, -3) :=
by
  sorry

theorem line_MN_equation :
  ‚àÉ (a b c : ‚Ñù), a = 5 ‚àß b = -2 ‚àß c = -5 :=
by
  sorry

theorem area_triangle_ABC :
  ‚àÉ (S : ‚Ñù), S = 841 / 20 :=
by
  sorry

end point_C_coordinates_line_MN_equation_area_triangle_ABC_l101_101981


namespace number_of_intersections_l101_101057

def f (x : ‚Ñù) : ‚Ñù := if 0 ‚â§ x ‚àß x < 2 then x^3 - x else f(x - 2)

def is_root (f : ‚Ñù ‚Üí ‚Ñù) (x : ‚Ñù) : Prop := f(x) = 0

open Set

theorem number_of_intersections :
  ‚àÄ (f : ‚Ñù ‚Üí ‚Ñù), (‚àÄ x, f (x + 2) = f x) ‚Üí
  (‚àÄ x, 0 ‚â§ x ‚àß x < 2 ‚Üí f x = x^3 - x) ‚Üí
  count (Œª x, is_root f x ‚àß (0 ‚â§ x ‚àß x ‚â§ 6)) 7 := sorry

end number_of_intersections_l101_101057


namespace horner_correct_l101_101295

variable {Œ± : Type*} [Field Œ±]

def horner (a : List Œ±) (x : Œ±) : Œ± :=
  a.foldr (Œª a_i acc, acc * x + a_i) 0

theorem horner_correct (a : List Œ±) (n : ‚Ñï) (x_0 : Œ±) :
  n = a.length - 1 ‚Üí 
  (let f (x : Œ±) := List.sum (List.map (Œª i, a[n-i] * x^i) (List.range (n + 1)))) 
  (‚àÄ k, k ‚â§ n ‚Üí 
  (let rec_seq := List.mapWithIndex (Œª i v, if i = 0 then a[n] else v * x_0 + a[n - i]) (List.range (n + 1))) 
  (rec_seq.k = horner a x_0)) :=
begin
  sorry
end

end horner_correct_l101_101295


namespace deck_total_cost_is_32_l101_101286

-- Define the costs of each type of card
def rare_cost := 1
def uncommon_cost := 0.50
def common_cost := 0.25

-- Define the quantities of each type of card in Tom's deck
def rare_quantity := 19
def uncommon_quantity := 11
def common_quantity := 30

-- Define the total cost calculation
def total_cost : ‚Ñù := (rare_quantity * rare_cost) + (uncommon_quantity * uncommon_cost) + (common_quantity * common_cost)

-- Prove that the total cost of the deck is $32
theorem deck_total_cost_is_32 : total_cost = 32 := by
  sorry

end deck_total_cost_is_32_l101_101286


namespace oil_bill_january_l101_101775

theorem oil_bill_january 
  (F J : ‚Ñù) 
  (h1 : 2 * F = 3 * J) 
  (h2 : 3 * (F + 10) = 5 * J) : 
  J = 60 := 
begin
  sorry,
end

end oil_bill_january_l101_101775


namespace find_constants_l101_101019

theorem find_constants (t s : ‚Ñ§) :
  (‚àÄ x : ‚Ñ§, (3 * x^2 - 4 * x + 9) * (5 * x^2 + t * x + s) = 15 * x^4 - 22 * x^3 + (41 + s) * x^2 - 34 * x + 9 * s) ‚Üí
  t = -2 ‚àß s = s :=
by
  intros h
  sorry

end find_constants_l101_101019


namespace conjugate_of_z_l101_101507

open Complex

theorem conjugate_of_z
  (z : ‚ÑÇ)
  (h : z * (2 + I) = 3 + I) :
  conj z = (7 / 5) + ((1 / 5) * I) :=
sorry

end conjugate_of_z_l101_101507


namespace find_a_b_find_extreme_point_g_num_zeros_h_l101_101530

-- (1) Proving the values of a and b
theorem find_a_b (a b : ‚Ñù)
  (h1 : (3 + 2 * a + b = 0))
  (h2 : (3 - 2 * a + b = 0)) : 
  a = 0 ‚àß b = -3 :=
sorry

-- (2) Proving the extreme points of g(x)
theorem find_extreme_point_g (x : ‚Ñù) : 
  x = -2 :=
sorry

-- (3) Proving the number of zeros of h(x)
theorem num_zeros_h (c : ‚Ñù) (h : -2 ‚â§ c ‚àß c ‚â§ 2) :
  (|c| = 2 ‚Üí ‚àÉ y, y = 5) ‚àß (|c| < 2 ‚Üí ‚àÉ y, y = 9) :=
sorry

end find_a_b_find_extreme_point_g_num_zeros_h_l101_101530


namespace solve_for_x_l101_101780

def f (x : ‚Ñù) : ‚Ñù :=
  if x ‚â§ 0 then x^2 + 1 else -2 * x

theorem solve_for_x (x : ‚Ñù) (h : f x = 10) : x = -3 :=
sorry

end solve_for_x_l101_101780


namespace polynomial_degree_expression_l101_101931

noncomputable def degree (p : polynomial ‚Ñù) : ‚Ñï := p.nat_degree

theorem polynomial_degree_expression :
  (‚àÄ A B C : polynomial ‚Ñù, degree A = 672 ‚àß degree B = 672 ‚àß degree C = 671 ‚Üí
  ((let m := degree (A + B) in
    let n := degree (A - C) in
    |m - n| + |2 * m - n - 672| + |-3 * m - 2| = 2018))) :=
by {
  -- Define polynomials A, B, and C
  intro A,
  intro B,
  intro C,
  -- Define the conditions
  intros h,
  cases h with h1 h',
  cases h' with h2 h3,
  -- Define m and n
  let m := degree (A + B),
  let n := degree (A - C),
  -- Begin the proof
  sorry
}

end polynomial_degree_expression_l101_101931


namespace find_a_range_l101_101945

noncomputable def f (a : ‚Ñù) : ‚Ñù ‚Üí ‚Ñù := 
  Œª x, if x > 2 then a * x ^ 2 + x - 1 else -x + 1

def is_monotonically_decreasing (f : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x y : ‚Ñù, x < y ‚Üí f x ‚â• f y

theorem find_a_range (a : ‚Ñù) :
  is_monotonically_decreasing (f a) ‚Üí a ‚â§ -1/2 :=
begin
  sorry
end

end find_a_range_l101_101945


namespace number_of_families_l101_101614

theorem number_of_families (x : ‚Ñï) (h1 : x + x / 3 = 100) : x = 75 :=
sorry

end number_of_families_l101_101614


namespace sum_of_geometric_sequence_first_9000_terms_l101_101251

noncomputable def geomSum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r ^ n) / (1 - r)

theorem sum_of_geometric_sequence_first_9000_terms (a r : ‚Ñù) (h1 : geomSum a r 3000 = 500) (h2 : geomSum a r 6000 = 950) :
  geomSum a r 9000 = 1355 :=
by
  sorry

end sum_of_geometric_sequence_first_9000_terms_l101_101251


namespace polynomial_remainder_l101_101641

def Q (x : ‚Ñù) : ‚Ñù := sorry -- Define Q(x) as some polynomial (unknown)

-- Conditions given in the problem
def cond1 : Prop := ‚àÉ R : ‚Ñù ‚Üí ‚Ñù, Q(x) = (x - 15) * R(x) + 8
def cond2 : Prop := ‚àÉ S : ‚Ñù ‚Üí ‚Ñù, Q(x) = (x - 10) * S(x) + 3

-- Question: the remainder when Q(x) is divided by (x-10)(x-15)
theorem polynomial_remainder : cond1 ‚àß cond2 ‚Üí ‚àÉ R : ‚Ñù ‚Üí ‚Ñù, Q(x) = (x - 10) * (x - 15) * R(x) + (x - 7) := 
by
  sorry

end polynomial_remainder_l101_101641


namespace not_factorial_tails_count_l101_101459

def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) -- you can extend further if needed

def is_factorial_tail (n : ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, m > 0 ‚àß f(m) = n

theorem not_factorial_tails_count : 
  ‚àÉ c : ‚Ñï, c = 500 ‚àß ‚àÄ k : ‚Ñï, k < 2500 ‚Üí ¬¨is_factorial_tail k ‚Üí k < 2500 - c :=
by
  sorry

end not_factorial_tails_count_l101_101459


namespace correct_sum_of_integers_l101_101190

theorem correct_sum_of_integers (a b : ‚Ñï) (h1 : a - b = 4) (h2 : a * b = 63) : a + b = 18 := 
  sorry

end correct_sum_of_integers_l101_101190


namespace no_eulerian_path_l101_101508

-- Definitions for conditions
variables (A B C D E F H: Type) [fintype A] [fintype B] [fintype C] [fintype D] [fintype E] [fintype F] [fintype H]

-- The degrees of each region (represented mathematically)
noncomputable def degree_A : ‚Ñï := 5
noncomputable def degree_B : ‚Ñï := 5
noncomputable def degree_C : ‚Ñï := 4
noncomputable def degree_D : ‚Ñï := 5
noncomputable def degree_E : ‚Ñï := 4
noncomputable def degree_F : ‚Ñï := 4
noncomputable def degree_H : ‚Ñï := 4

-- The proof statement
theorem no_eulerian_path :
  ¬¨(‚àÉ (curve : A ‚Üí C), (‚àÄ (seg : B ‚Üí D), curve seg ‚àß curve seg) = true ‚àß
  ¬¨(curve seg = A ‚à® curve seg = D)) :=
begin
  sorry -- skipping proof steps as per instruction
end

end no_eulerian_path_l101_101508


namespace volume_of_sphere_l101_101980

theorem volume_of_sphere (R : ‚Ñù) (h : 4 * Real.pi * R ^ 2 = 4 * Real.pi) : 
  (4 / 3) * Real.pi * R ^ 3 = (4 / 3) * Real.pi :=
by
  have h1 : R ^ 2 = 1 := by
    rw [mul_assoc] at h
    exact (eq_div_iff (4 * Real.pi ‚â† 0 _)).mp h
  have h2 : R = 1 := by
    exact eq_of_sq_eq_sq (Real.sqrt_nonneg _) h1
  rw [h2]
  exact rfl

end volume_of_sphere_l101_101980


namespace determine_f1_l101_101935

-- Definitions
def func (f : ‚Ñù ‚Üí ‚Ñù) : Prop := ‚àÄ x y : ‚Ñù, f(x + y) = f(x) + f(y)

-- Theorem statement
theorem determine_f1 (f : ‚Ñù ‚Üí ‚Ñù) (h1 : func f) (h2 : f 2 = 4) : f 1 = 2 := 
by 
  sorry

end determine_f1_l101_101935


namespace total_selection_schemes_l101_101144

-- Definitions of individuals and tasks
inductive Person
| XiaoZhang
| XiaoZhao
| XiaoLi
| XiaoLuo
| XiaoWang

inductive Task
| Translation
| TourGuiding
| Etiquette
| Driving

-- Function to check if a person can perform a task
def canPerform : Person ‚Üí Task ‚Üí Prop
| Person.XiaoZhang, Task.Translation => true
| Person.XiaoZhang, Task.TourGuiding => true
| Person.XiaoZhao, Task.Translation => true
| Person.XiaoZhao, Task.TourGuiding => true
| _, _ => true

-- Lean 4 statement for the problem
theorem total_selection_schemes : 
  (‚àÉ (P1 P2 P3 P4 : Person) (T1 T2 T3 T4 : Task),
    canPerform P1 T1 ‚àß canPerform P2 T2 ‚àß canPerform P3 T3 ‚àß canPerform P4 T4 ‚àß
    P1 ‚â† P2 ‚àß P1 ‚â† P3 ‚àß P1 ‚â† P4 ‚àß
    P2 ‚â† P3 ‚àß P2 ‚â† P4 ‚àß P3 ‚â† P4 ‚àß
    T1 ‚â† T2 ‚àß T1 ‚â† T3 ‚àß T1 ‚â† T4 ‚àß
    T2 ‚â† T3 ‚àß T2 ‚â† T4 ‚àß T3 ‚â† T4) = 36 
 := sorry

end total_selection_schemes_l101_101144


namespace probability_one_absent_two_present_l101_101127

theorem probability_one_absent_two_present : 
  let p_absent := 1 / 15 
  let p_present := 1 - p_absent
  let p_exactly_one_absent := 3 * (p_absent * p_present * p_present)
  (p_exactly_one_absent * 100 : ‚Ñù) ‚âà 17.4 :=
by
  let p_absent := 1 / 15
  let p_present := 1 - p_absent
  let p_exactly_one_absent := 3 * (p_absent * p_present * p_present)
  have : (p_exactly_one_absent * 100 : ‚Ñù) ‚âà 17.4, from sorry
  exact this

end probability_one_absent_two_present_l101_101127


namespace length_hypotenuse_QR_l101_101142

-- Definitions and conditions based on the problem statement
variables (a b : ‚Ñù)
def PS := a / 4
def SQ := 3 * a / 4
def PT := b / 4
def TR := 3 * b / 4
def QT := 20
def SR := 35

-- Statements of the conditions translated to Lean
def condition1 := (PS ^ 2 + b ^ 2 = SR ^ 2)
def condition2 := (a ^ 2 + PT ^ 2 = QT ^ 2)

-- The theorem statement to be proven
theorem length_hypotenuse_QR (h1 : condition1 a b) (h2 : condition2 a b) : 
  a ^ 2 + b ^ 2 = 1529.41 :=
sorry

end length_hypotenuse_QR_l101_101142


namespace total_workers_is_22_l101_101217

-- Defining the average salaries and the related conditions
def average_salary_all : ‚Ñù := 850
def average_salary_technicians : ‚Ñù := 1000
def average_salary_rest : ‚Ñù := 780

-- Given number of technicians
def T : ‚Ñï := 7

-- Total number of workers in the workshop
def total_number_of_workers : ‚Ñï :=
  let R := 15 in
  7 + R

-- Total number of workers proof
theorem total_workers_is_22 : total_number_of_workers = 22 :=
by
  -- Calculation to be filled in proof
  sorry

end total_workers_is_22_l101_101217


namespace find_function_expression_l101_101944

theorem find_function_expression
  (A œâ œï k : ‚Ñù)
  (hA : A > 0)
  (hœâ : œâ > 0)
  (hœï : |œï| < œÄ / 2)
  (h_high : ‚àÉ x, x = 2 ‚àß f x = 2)
  (h_low : ‚àÉ x, x = 8 ‚àß f x = -4)
  (h_A : A = (2 - (-4)) / 2)
  (h_k : k = (2 + (-4)) / 2)
  (h_œâ : œâ = œÄ / 6)
  (h_œï : œï = œÄ / 6) :
  ‚àÄ x, f x = A * sin (œâ * x + œï) + k :=
by
  sorry

def f (x : ‚Ñù) : ‚Ñù :=
  3 * sin (œÄ / 6 * x + œÄ / 6) - 1

end find_function_expression_l101_101944


namespace problem1_problem2_l101_101145

-- Problem 1
theorem problem1 (m n : ‚Ñ§) (A B : ‚Ñ§ √ó ‚Ñ§) (hA : A = (3, 2 * m - 1)) (hB : B = (n + 1, -1)) :
  (A.1 = B.1) ‚Üí n = 2 :=
by
  -- sorry, proof goes here

-- Problem 2
theorem problem2 (m n : ‚Ñ§) (A B : ‚Ñ§ √ó ‚Ñ§) (hA : A = (3, 2 * m - 1)) (hB : B = (n + 1, -1)) :
  (A.2 + 2 = B.2) ‚àß (A.1 - 3 = B.1) ‚Üí m = -1 ‚àß n = -1 :=
by
  -- sorry, proof goes here

end problem1_problem2_l101_101145


namespace min_product_eq_neg480_l101_101304

open Fin

def min_possible_product_of_three : Set ‚Ñï :=
  {-10, -5, -3, 0, 2, 4, 6, 8}

theorem min_product_eq_neg480 :
  ‚àÉ a b c ‚àà min_possible_product_of_three, a ‚â† b ‚àß b ‚â† c ‚àß a ‚â† c ‚àß a * b * c = -480 :=
by
  let s := min_possible_product_of_three
  have hs : Set.Finite s := Set.finite_of_fintype _
  use -10, 8, 6
  have ha : -10 ‚àà s := Set.mem_singleton (-10)
  have hb : 8 ‚àà s := Set.mem_singleton 8
  have hc : 6 ‚àà s := Set.mem_singleton 6
  exact ‚ü®
    Œª h, Set.mem_of_mem_of_subset h ha,
    Œª h, Set.mem_of_mem_of_subset h hb,
    Œª h, Set.mem_of_mem_of_subset h hc,
    (ne_of_mem_of_not_mem hb ha).2,
    (ne_of_mem_of_not_mem hc hb).2,
    (ne_of_mem_of_not_mem hc ha).2,
    by refl ‚ü©
  sorry

end min_product_eq_neg480_l101_101304


namespace value_of_5_S_3_l101_101864

def operation_S (a b : ‚Ñù) : ‚Ñù := 4 * a + 6 * b - 2 * a * b

theorem value_of_5_S_3 : operation_S 5 3 = 8 :=
by
  sorry

end value_of_5_S_3_l101_101864


namespace graveling_cost_is_correct_l101_101335

noncomputable def cost_of_graveling (lawn_length : ‚Ñï) (lawn_breadth : ‚Ñï) 
(road_width : ‚Ñï) (cost_per_sq_m : ‚Ñï) : ‚Ñï :=
  let area_road_parallel_to_length := road_width * lawn_breadth
  let area_road_parallel_to_breadth := road_width * lawn_length
  let area_overlap := road_width * road_width
  let total_area := area_road_parallel_to_length + area_road_parallel_to_breadth - area_overlap
  total_area * cost_per_sq_m

theorem graveling_cost_is_correct : cost_of_graveling 90 60 10 3 = 4200 := by
  sorry

end graveling_cost_is_correct_l101_101335


namespace boxes_per_class_l101_101274

variable (boxes : ‚Ñï) (classes : ‚Ñï)

theorem boxes_per_class (h1 : boxes = 3) (h2 : classes = 4) : 
  (boxes : ‚Ñö) / (classes : ‚Ñö) = 3 / 4 :=
by
  rw [h1, h2]
  norm_num

end boxes_per_class_l101_101274


namespace imaginary_part_of_z_l101_101231

theorem imaginary_part_of_z (i : ‚ÑÇ) (hi : i^2 = -1) : (z : ‚ÑÇ) ‚Üí z = i^2 * (1 + i) ‚Üí z.im = -1 :=
by
  intros i hi z hz 
  sorry

end imaginary_part_of_z_l101_101231


namespace max_triangle_area_ellipse_l101_101069

theorem max_triangle_area_ellipse
  (a b : ‚Ñù) (h : a > b) (h_pos : b > 0)
  (focus : ‚Ñù √ó ‚Ñù) (chord : ‚Ñù √ó ‚Ñù ‚Üí ‚Ñù √ó ‚Ñù ‚Üí Prop)
  (ellipse : ‚Ñù ‚Üí ‚Ñù ‚Üí Prop) :
  (ellipse (x : ‚Ñù) (y: ‚Ñù) := (x^2 / a^2) + (y^2 / b^2) = 1) ‚Üí
  (focus = (real.sqrt (a^2 - b^2), 0)) ‚Üí
  (chord A B := A.1 = -B.1 ‚àß A.2 = -B.2) ‚Üí
  ‚àÉ ABF : ‚Ñù,
    ‚àÄ A B : ‚Ñù √ó ‚Ñù, ellipse A.1 A.2 ‚Üí ellipse B.1 B.2 ‚Üí chord A B ‚Üí
    let dx := A.1 - focus.1,
        dy := A.2 - focus.2
    in ABF ‚â§ b * real.sqrt(a^2 - b^2) :=
sorry

end max_triangle_area_ellipse_l101_101069


namespace ellipse_max_OM_l101_101517

theorem ellipse_max_OM :
  ‚àÄ (a b : ‚Ñù),
    a > b ‚àß b > 0 ‚àß
    (c : ‚Ñù) (h_c : c / a = sqrt 3 / 2) ‚àß
    b = 1 ‚àß
    ‚àÉ M : ‚Ñù √ó ‚Ñù, is_midpoint M
where is_midpoint M :=
  let (M_x, M_y) := M in
  let O := (0, 0) in
  ‚àÄ (A B : ‚Ñù √ó ‚Ñù),
    is_tangent_tangent A B ‚àß
    midpoint_of A B = M ‚àß
    (O_first : M_x ^ 2 + M_y ^ 2 ‚â§ 25 / 16)

end ellipse_max_OM_l101_101517


namespace find_original_number_l101_101800

open Int

theorem find_original_number (N y x : ‚Ñï) (h1 : N = 10 * y + x) (h2 : N + y = 54321) (h3 : x = 54321 % 11) (h4 : y = 4938) : N = 49383 := by
  sorry

end find_original_number_l101_101800


namespace find_m_l101_101541

theorem find_m (x m : ‚Ñù) (h1 : 3 * x - 2 * m = 4) (h2 : x = m) : m = 4 :=
sorry

end find_m_l101_101541


namespace unique_poly_degree_4_l101_101740

theorem unique_poly_degree_4 
  (Q : ‚Ñö[X]) 
  (h_deg : Q.degree = 4) 
  (h_lead_coeff : Q.leading_coeff = 1)
  (h_root : Q.eval (sqrt 3 + sqrt 7) = 0) : 
  Q = X^4 - 12 * X^2 + 16 ‚àß Q.eval 2 = 0 :=
by sorry

end unique_poly_degree_4_l101_101740


namespace original_number_l101_101812

theorem original_number (N y x : ‚Ñï) 
  (h1: N + y = 54321)
  (h2: N = 10 * y + x)
  (h3: 11 * y + x = 54321)
  (h4: x = 54321 % 11)
  (hy: y = 4938) : 
  N = 49383 := 
  by 
  sorry

end original_number_l101_101812


namespace area_triangle_ABC_l101_101949

def f (x : ‚Ñù) : ‚Ñù := sin (2*x - œÄ/6) + 2*(cos x)^2 - 1

variable (a b c A : ‚Ñù) (h_a : a = 1) (h_bc : b + c = 2) (h_fA : f A = 1/2)

theorem area_triangle_ABC : 
  let cos_A := cos A
  let sin_A := sin A
  let bc := b * c
  let area := 1/2 * bc * sin_A
  A = œÄ/3 ‚àß area = sqrt(3)/4 := 
sorry

end area_triangle_ABC_l101_101949


namespace number_divisible_by_396_l101_101896

def is_divisible_by (n d : Nat) : Prop := d ‚à£ n

def candidates : List Nat := [453420, 413424]

theorem number_divisible_by_396 (n : Nat) : n ‚àà candidates ‚Üí is_divisible_by n 396 :=
by
  intros h
  have div_by_4 : is_divisible_by n 4 :=
    by
      cases h with
      | inl _ => sorry
      | inr _ => sorry
  have div_by_99 : is_divisible_by n 99 :=
    by
      cases h with
      | inl _ => sorry
      | inr _ => sorry
  sorry

end number_divisible_by_396_l101_101896


namespace part1_part2_l101_101078

-- Definitions for Part 1
variables {p : ‚Ñù} (h_pos : p > 0)
def focus : ‚Ñù √ó ‚Ñù := (0, p / 2)
def parabola (x y : ‚Ñù) : Prop := x^2 = 2 * p * y

-- Definitions for Part 2
def curve_eq (x y : ‚Ñù) : Prop := y = real.sqrt(1 - x^2)
def parabola_spec (x y : ‚Ñù) : Prop := x^2 = 4 * y

-- Part 1: Proving point G lies on a fixed line
theorem part1
  (l : ‚Ñù ‚Üí ‚Ñù)
  (hl : ‚àÄ x y, l x = y ‚Üí parabola x y ‚Üí l x = y)
  (P Q : ‚Ñù √ó ‚Ñù)
  (hP : parabola P.1 P.2)
  (hQ : parabola Q.1 Q.2)
  (tangent_P tangent_Q : ‚Ñù ‚Üí ‚Ñù)
  (h_tangent_P : ‚àÄ x, tangent_P x = (x - P.1) * P.2 / P.1 + P.2)
  (h_tangent_Q : ‚àÄ x, tangent_Q x = (x - Q.1) * Q.2 / Q.1 + Q.2)
  (G : ‚Ñù √ó ‚Ñù)
  (hG : ‚àÄ x, tangent_P x = tangent_Q x ‚Üí G = (x, tangent_P x)) :
  G.2 = (-p / 2) :=
sorry

-- Part 2: Finding the range of values for the area of triangle MPQ
theorem part2
  (p_eq : p = 2)
  (M : ‚Ñù √ó ‚Ñù)
  (hM : curve_eq M.1 M.2)
  (mid_MP mid_MQ : ‚Ñù √ó ‚Ñù)
  (h_mid_MP : parabola_spec mid_MP.1 mid_MP.2)
  (h_mid_MQ : parabola_spec mid_MQ.1 mid_MQ.2)
  (area_MPQ : ‚Ñù)
  (h_area : area_MPQ = (3 * real.sqrt 2 / 4) * (M.1^2 - 4 * M.2)^3 / 2) :
  (area_MPQ ‚àà set.Icc (3 * real.sqrt 2 / 4) (6 * real.sqrt 2)) :=
sorry

end part1_part2_l101_101078


namespace problem_statement_l101_101652

open Complex

theorem problem_statement (x y : ‚ÑÇ) (h : (x + y) / (x - y) - (3 * (x - y)) / (x + y) = 2) :
  (x^6 + y^6) / (x^6 - y^6) + (x^6 - y^6) / (x^6 + y^6) = 8320 / 4095 := 
by 
  sorry

end problem_statement_l101_101652


namespace coefficient_of_x4_l101_101620

theorem coefficient_of_x4 : 
  (Finset.sum (Finset.range 6) 
    (Œª r, (Nat.choose 5 r) * (2:‚Ñï)^(5-r) * (-1:‚Ñ§)^r * (x:‚Ñ§)^(10 - 3 * r))) = 80 * x^4 :=
  sorry

end coefficient_of_x4_l101_101620


namespace benjamin_distance_l101_101411

def speed := 10  -- Speed in kilometers per hour
def time := 8    -- Time in hours

def distance (s t : ‚Ñï) := s * t  -- Distance formula

theorem benjamin_distance : distance speed time = 80 :=
by
  -- proof omitted
  sorry

end benjamin_distance_l101_101411


namespace melanie_balloons_l101_101635

theorem melanie_balloons (joan_balloons melanie_balloons total_balloons : ‚Ñï)
  (h_joan : joan_balloons = 40)
  (h_total : total_balloons = 81) :
  melanie_balloons = total_balloons - joan_balloons :=
by
  sorry

end melanie_balloons_l101_101635


namespace evaluate_f_f_f_1_l101_101659

def f (x : ‚Ñù) : ‚Ñù :=
  if x >= 3 then x^2 + 1 else real.sqrt (x + 1)

theorem evaluate_f_f_f_1 : f (f (f 1)) = real.sqrt (real.sqrt (real.sqrt 2 + 1) + 1) :=
by sorry

end evaluate_f_f_f_1_l101_101659


namespace find_DY_length_l101_101604

noncomputable def angle_bisector_theorem (DE DY EF FY : ‚Ñù) : ‚Ñù :=
  (DE * FY) / EF

theorem find_DY_length :
  ‚àÄ (DE EF FY : ‚Ñù), DE = 26 ‚Üí EF = 34 ‚Üí FY = 30 ‚Üí
  angle_bisector_theorem DE DY EF FY = 22.94 := 
by
  intros
  sorry

end find_DY_length_l101_101604


namespace find_mnp_l101_101064

noncomputable theory

def perpendicular_lines (m n : ‚Ñù) : Prop :=
  (m / -4) * (2 / -5) = -1

def foot_of_perpendicular (m p : ‚Ñù) : Prop :=
  (10 * 1 + 4 * p - 2 = 0)

theorem find_mnp (m n p : ‚Ñù) 
  (h1 : perpendicular_lines m n)
  (h2 : foot_of_perpendicular m p)
  (h3 : 2 * 1 - 5 * p + n = 0) : 
  m + n - p = 0 := 
by 
  sorry

end find_mnp_l101_101064


namespace count_multiples_of_7_with_units_digit_7_less_than_150_l101_101087

-- Definition of the problem's conditions and expected result
theorem count_multiples_of_7_with_units_digit_7_less_than_150 : 
  let multiples_of_7 := { n : Nat // n < 150 ‚àß n % 7 = 0 }
  let units_digit_7_multiples := { n : Nat // n < 150 ‚àß n % 7 = 0 ‚àß n % 10 = 7 }
  List.length (units_digit_7_multiples.members) = 3 :=
by
  sorry

end count_multiples_of_7_with_units_digit_7_less_than_150_l101_101087


namespace unique_poly_degree_4_l101_101738

theorem unique_poly_degree_4 
  (Q : ‚Ñö[X]) 
  (h_deg : Q.degree = 4) 
  (h_lead_coeff : Q.leading_coeff = 1)
  (h_root : Q.eval (sqrt 3 + sqrt 7) = 0) : 
  Q = X^4 - 12 * X^2 + 16 ‚àß Q.eval 2 = 0 :=
by sorry

end unique_poly_degree_4_l101_101738


namespace cuboid_point_distance_l101_101591

def distance (p1 p2 : ‚Ñù √ó ‚Ñù √ó ‚Ñù) : ‚Ñù :=
  real.sqrt ((p1.1 - p2.1)^2 + (p1.2 - p2.2)^2 + (p1.3 - p2.3)^2)

theorem cuboid_point_distance 
  (points : Fin 2001 ‚Üí ‚Ñù √ó ‚Ñù √ó ‚Ñù) 
  (h : ‚àÄ i, (points i).1 ‚â• 0 ‚àß (points i).1 ‚â§ 5 ‚àß
             (points i).2 ‚â• 0 ‚àß (points i).2 ‚â§ 5 ‚àß
             (points i).3 ‚â• 0 ‚àß (points i).3 ‚â§ 10) :
  ‚àÉ (i j : Fin 2001), i ‚â† j ‚àß distance (points i) (points j) < 0.7 := 
sorry

end cuboid_point_distance_l101_101591


namespace quadrilateral_possible_with_2_2_2_l101_101770

theorem quadrilateral_possible_with_2_2_2 :
  ‚àÄ (s1 s2 s3 s4 : ‚Ñï), (s1 = 2) ‚Üí (s2 = 2) ‚Üí (s3 = 2) ‚Üí (s4 = 5) ‚Üí
  s1 + s2 + s3 > s4 :=
by
  intros s1 s2 s3 s4 h1 h2 h3 h4
  rw [h1, h2, h3, h4]
  -- Proof omitted
  sorry

end quadrilateral_possible_with_2_2_2_l101_101770


namespace isosceles_triangle_DEF_area_l101_101492

noncomputable def triangle_area {Œ± : Type*} [linear_ordered_field Œ±] 
  (a b c : Œ±) (A : real.angle) : Œ± :=
1/2 * a * b * (real.sin A)

noncomputable def DEF_area : real := triangle_area 5 5 (real.angle.of_deg 120)

theorem isosceles_triangle_DEF_area :
  DEF_area = 250 / 9 :=
by 
  sorry

end isosceles_triangle_DEF_area_l101_101492


namespace num_not_factorial_tails_lt_2500_l101_101470

-- Definition of the function f(m)
def f (m : ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625 + m / 78125 + m / 390625 + m / 1953125

-- The theorem stating the main result
theorem num_not_factorial_tails_lt_2500 : 
  let count_non_tails := ‚àë k in finset.range 2500, if ‚àÄ m, f m ‚â† k then 1 else 0
  in count_non_tails = 500 :=
by
  sorry

end num_not_factorial_tails_lt_2500_l101_101470


namespace ellipse_problem_l101_101915

noncomputable def ellipse_equation (x y a b : ‚Ñù) := (x^2 / a^2) + (y^2 / b^2) = 1

theorem ellipse_problem :
  (‚àÄ x y : ‚Ñù, ellipse_equation x y 2 1 ‚Üî (x^2 / 4 + y^2 = 1))
  ‚àß
  (‚àÉ m : ‚Ñù, m = 17 / 8 ‚àß ‚àÄ k : ‚Ñù, let x1, x2 := 1, 1,
    let y1, y2 := ‚àö3 / 2, -‚àö3 / 2 in
    let PE := (m - x1, -y1) in
    let QE := (m - x2, -y2) in
    (PE.1 * QE.1 + PE.2 * QE.2) = 33 / 64) := 
sorry

end ellipse_problem_l101_101915


namespace maximum_value_of_ab_l101_101566

noncomputable def max_ab : ‚Ñù :=
  let y1 := Œª x : ‚Ñù, x^2 - 2 * x + 2
  let y2 := Œª x a b : ‚Ñù, -x^2 + a * x + b
  let dy1 := Œª x : ‚Ñù, 2 * x - 2
  let dy2 := Œª x a : ‚Ñù, -2 * x + a
  let f := Œª a b : ‚Ñù, a + b
  max f {ab : ‚Ñù // ‚àÉ (a b x0 : ‚Ñù), a > 0 ‚àß b > 0 ‚àß
    (dy1 x0) * (dy2 x0 a) = -1 ‚àß
    y1 x0 = y2 x0 a b ‚àß
    x0 > 0}

theorem maximum_value_of_ab 
  (a b x0 : ‚Ñù) (h : a > 0 ‚àß b > 0)
  (inter_tangent_perpendicular : (2 * x0 - 2) * (-2 * x0 + a) = -1)
  (intersection : (x0^2 - 2*x0 + 2) = (-x0^2 + a*x0 + b)) :
  (a + b = 5 / 2) ‚Üí (ab ‚â§ 25 / 16) := 
sorry

end maximum_value_of_ab_l101_101566


namespace line_passes_through_point_l101_101232

theorem line_passes_through_point : 
  ‚àÉ k : ‚Ñù, (1 + 4 * k) * 2 - (2 - 3 * k) * 2 + 2 - 14 * k = 0 :=
begin
  sorry
end

end line_passes_through_point_l101_101232


namespace second_square_area_l101_101594

noncomputable def initial_square_side_length := real.sqrt 169

noncomputable def triangle_leg_length := 2 * initial_square_side_length

noncomputable def triangle_hypotenuse := triangle_leg_length * real.sqrt 2

noncomputable def second_square_side_length := triangle_hypotenuse / (1 + real.sqrt 2) * (real.sqrt 2 - 1)

theorem second_square_area :
  second_square_side_length ^ 2 = 676 :=
by sorry

end second_square_area_l101_101594


namespace find_100th_index_neg_b_l101_101865

def sequence_b (n : ‚Ñï) : ‚Ñù :=
  ‚àë k in Finset.range (n + 1), Real.cos (k : ‚Ñù)

theorem find_100th_index_neg_b :
  ‚àÉ n : ‚Ñï, n = 632 ‚àß ‚àÄ k < 100, (sequence_b (n + k)) < 0 := sorry

end find_100th_index_neg_b_l101_101865


namespace tangent_triples_l101_101162

theorem tangent_triples
  (ABC : Triangle)
  (Œì : Circumcircle ABC)
  (œâ : Incircle ABC)
  (P Q R : Point)
  (hP : P ‚àà Œì)
  (hQ : Q ‚àà Œì)
  (hR : R ‚àà Œì)
  (hPQ_tangent : Tangent PQ œâ)
  (hQR_tangent : Tangent QR œâ) :
  Tangent RP œâ :=
by sorry

end tangent_triples_l101_101162


namespace greatest_k_value_l101_101712

noncomputable def greatest_possible_k : ‚Ñù :=
  let k_squared := 117 in
  real.sqrt k_squared

theorem greatest_k_value (k : ‚Ñù) (h : ‚àÄ x : ‚Ñù, x^2 + k * x + 8 = 0 ‚Üí ‚àÉ a b : ‚Ñù, a - b = real.sqrt 85) :
  k = greatest_possible_k :=
by
  sorry

end greatest_k_value_l101_101712


namespace tangent_perpendicular_l101_101545

open Real

def curve (m : ‚Ñù) (x : ‚Ñù) : ‚Ñù := exp x - m * x + 1

theorem tangent_perpendicular (m : ‚Ñù) :
  (‚àÉ x : ‚Ñù, deriv (curve m) x = deriv (Œª x, exp x) x ‚àß 
    deriv (curve m) x = -1 / deriv (Œª x, exp x) x) ‚Üí 
  m > 1 / exp 1 := by
  sorry

end tangent_perpendicular_l101_101545


namespace water_left_in_cooler_l101_101330

theorem water_left_in_cooler : 
  let gallons_in_cooler := 3 in
  let ounces_per_cup := 6 in
  let rows := 5 in
  let chairs_per_row := 10 in
  let ounces_per_gallon := 128 in
  let initial_ounces := gallons_in_cooler * ounces_per_gallon in
  let total_chairs := rows * chairs_per_row in
  let total_ounces_needed := total_chairs * ounces_per_cup in
  let remaining_ounces := initial_ounces - total_ounces_needed in
  remaining_ounces = 84 :=
by 
  -- introduce variables
  let gallons_in_cooler := 3
  let ounces_per_cup := 6
  let rows := 5
  let chairs_per_row := 10
  let ounces_per_gallon := 128
  let initial_ounces := gallons_in_cooler * ounces_per_gallon
  let total_chairs := rows * chairs_per_row
  let total_ounces_needed := total_chairs * ounces_per_cup
  let remaining_ounces := initial_ounces - total_ounces_needed
  -- prove the theorem
  sorry

end water_left_in_cooler_l101_101330


namespace intersection_of_A_and_B_l101_101960

noncomputable def A : set ‚Ñù := {x | x^2 - 2*x - 3 < 0}
noncomputable def B : set ‚Ñù := {x | (1 - x) / x < 0}

theorem intersection_of_A_and_B : 
  A ‚à© B = {x | (-1 < x ‚àß x < 0) ‚à® (1 < x ‚àß x < 3)} :=
by sorry

end intersection_of_A_and_B_l101_101960


namespace vector_line_equation_l101_101025

theorem vector_line_equation {x y : ‚Ñù} (hv : proj ‚ü®7, 3‚ü© ‚ü®x, y‚ü© = ‚ü®-7/2, -3/2‚ü©) :
  y = -(7/3 : ‚Ñù) * x - (29/3 : ‚Ñù) :=
sorry

end vector_line_equation_l101_101025


namespace not_factorial_tails_count_l101_101454

def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) -- you can extend further if needed

def is_factorial_tail (n : ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, m > 0 ‚àß f(m) = n

theorem not_factorial_tails_count : 
  ‚àÉ c : ‚Ñï, c = 500 ‚àß ‚àÄ k : ‚Ñï, k < 2500 ‚Üí ¬¨is_factorial_tail k ‚Üí k < 2500 - c :=
by
  sorry

end not_factorial_tails_count_l101_101454


namespace line_equation_l101_101535

def line_through_intersection (l : ‚Ñù ‚Üí Prop) : Prop :=
  (‚àÉ x y : ‚Ñù, 2 * x + y - 5 = 0 ‚àß x - 2 * y = 0 ‚àß l x)

def point_distance (l : ‚Ñù ‚Üí Prop) (P : (‚Ñù √ó ‚Ñù)) (d : ‚Ñù) : Prop :=
  ‚àÉ k : ‚Ñù, 
    (l = Œª ‚ü®x, y‚ü©, k * x - y + 1 - 2 * k = 0) ‚àß
    abs (5 * k + 1 - 2 * k) / (Real.sqrt (k^2 + 1)) = d

theorem line_equation {l : ‚Ñù ‚Üí Prop} {P : (‚Ñù √ó ‚Ñù)} : 
  line_through_intersection l ‚Üí point_distance l P 3 ‚Üí 
  (l = Œª ‚ü®x, y‚ü©, 4 * x - 3 * y - 5 = 0) ‚à® (l = Œª ‚ü®x, y‚ü©, x - 2 = 0) :=
by sorry

end line_equation_l101_101535


namespace not_factorial_tails_l101_101466

noncomputable def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) + ...

theorem not_factorial_tails :
  let n := 2500 in ‚àÉ (k : ‚Ñï), k = 500 ‚àß ‚àÄ m < n, ¬¨(f m = k) :=
by {
  sorry
}

end not_factorial_tails_l101_101466


namespace multiples_of_7_with_units_digit_7_number_of_multiples_of_7_with_units_digit_7_l101_101096

theorem multiples_of_7_with_units_digit_7 (n : ‚Ñï) : 
  (n < 150 ‚àß ‚àÉ k : ‚Ñï, n = 7 * k ‚àß n % 10 = 7) ‚Üî 
  n = 7 ‚à® n = 77 ‚à® n = 147 := 
by 
  sorry

theorem number_of_multiples_of_7_with_units_digit_7 : 
  ‚àÉ m, m = 3 ‚àß ‚àÄ n : ‚Ñï, (n < 150 ‚àß ‚àÉ k : ‚Ñï, n = 7 * k ‚àß n % 10 = 7) ‚Üí n = 7 ‚à® n = 77 ‚à® n = 147 := 
by 
  use 3
  intros n
  intros hn
  split
  intro h
  cases h
  sorry

end multiples_of_7_with_units_digit_7_number_of_multiples_of_7_with_units_digit_7_l101_101096


namespace count_non_factorial_tails_lt_2500_l101_101451

def f (m : ‚Ñï) : ‚Ñï := 
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + ... -- Continue as needed

theorem count_non_factorial_tails_lt_2500 : 
  #{ n : ‚Ñï | n < 2500 ‚àß ¬¨ (‚àÉ m : ‚Ñï, f(m) = n) } = 4 :=
by sorry

end count_non_factorial_tails_lt_2500_l101_101451


namespace quadrant_of_z_l101_101479

open Complex

def z := (-8 + I) * I

theorem quadrant_of_z : (Re z < 0) ‚àß (Im z < 0) := by
  sorry

end quadrant_of_z_l101_101479


namespace sum_of_first_9000_terms_of_geometric_sequence_l101_101260

noncomputable def geometric_sum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r^n) / (1 - r)

theorem sum_of_first_9000_terms_of_geometric_sequence 
  (a r : ‚Ñù)
  (h‚ÇÅ : geometric_sum a r 3000 = 500)
  (h‚ÇÇ : geometric_sum a r 6000 = 950)
  : geometric_sum a r 9000 = 1355 :=
sorry

end sum_of_first_9000_terms_of_geometric_sequence_l101_101260


namespace complement_intersection_l101_101178

open Set

variable (A B U : Set ‚Ñï) 

theorem complement_intersection (hA : A = {1, 2, 3}) (hB : B = {2, 3, 4, 5}) (hU : U = A ‚à™ B) :
  (U \ A) ‚à© B = {4, 5} :=
by sorry

end complement_intersection_l101_101178


namespace incorrect_statements_l101_101817

open List

-- Define each statement as a condition
def Statement_A (locus : Type) [DecidablePred locus] (P : locus ‚Üí Prop) : Prop :=
  (‚àÄ x, locus x ‚Üí P x) ‚àß (‚àÄ x, ¬¨locus x ‚Üí ¬¨P x)

def Statement_B (locus : Type) [DecidablePred locus] (P : locus ‚Üí Prop) : Prop :=
  (‚àÄ x, ¬¨P x ‚Üí locus x) ‚àß (‚àÄ x, locus x ‚Üí P x)

def Statement_C (locus : Type) [DecidablePred locus] (P : locus ‚Üí Prop) : Prop :=
  (‚àÄ x, P x ‚Üí locus x) ‚àß (‚àÄ x, ¬¨locus x ‚Üí P x)

def Statement_D (locus : Type) [DecidablePred locus] (P : locus ‚Üí Prop) : Prop :=
  (‚àÄ x, ¬¨locus x ‚Üí ¬¨P x) ‚àß (‚àÄ x, ¬¨P x ‚Üí ¬¨locus x)

def Statement_E (locus : Type) [DecidablePred locus] (P : locus ‚Üí Prop) : Prop :=
  (‚àÄ x, P x ‚Üí locus x) ‚àß (‚àÄ x, ¬¨P x ‚Üí ¬¨locus x)

-- Define the theorem that these statements are incorrect
theorem incorrect_statements (locus : Type) [DecidablePred locus] (P : locus ‚Üí Prop) : 
  ¬¨Statement_B locus P ‚àß ¬¨Statement_C locus P :=
by
  sorry

end incorrect_statements_l101_101817


namespace collinear_Q1_Q2_Q3_l101_101544

variables {P‚ÇÅ P‚ÇÇ P‚ÇÉ P‚ÇÅ' P‚ÇÇ' P‚ÇÉ' Q‚ÇÅ Q‚ÇÇ Q‚ÇÉ : Type*}
variables [Point P‚ÇÅ] [Point P‚ÇÇ] [Point P‚ÇÉ] [Point P‚ÇÅ'] [Point P‚ÇÇ'] [Point P‚ÇÉ']
variables [Point Q‚ÇÅ] [Point Q‚ÇÇ] [Point Q‚ÇÉ] [Line P P_diagonal] [Line p]

-- Assume that the points define a complete quadrilateral
variable (complete_quadrilateral : complete_quadrilateral P‚ÇÅ P‚ÇÇ P‚ÇÉ P‚ÇÅ' P‚ÇÇ' P‚ÇÉ')
-- Assume that line p intersects the diagonals P‚ÇÅ P‚ÇÅ', P‚ÇÇ P‚ÇÇ', P‚ÇÉ P‚ÇÉ' at Q‚ÇÅ, Q‚ÇÇ, Q‚ÇÉ
variable (p_intersects_diagonals : intersects P_diagonal p Q‚ÇÅ Q‚ÇÇ Q‚ÇÉ)

-- Assume that Q_i' is the fourth harmonic point corresponding to P_i P_i' Q_i
variables {Q‚ÇÅ' Q‚ÇÇ' Q‚ÇÉ' : Type*} [FourthHarmonicPoint P‚ÇÅ P‚ÇÅ' Q‚ÇÅ Q‚ÇÅ']
  [FourthHarmonicPoint P‚ÇÇ P‚ÇÇ' Q‚ÇÇ Q‚ÇÇ']
  [FourthHarmonicPoint P‚ÇÉ P‚ÇÉ' Q‚ÇÉ Q‚ÇÉ']

-- The theorem we want to state
theorem collinear_Q1_Q2_Q3 :
  collinear Q‚ÇÅ Q‚ÇÇ Q‚ÇÉ :=
sorry

end collinear_Q1_Q2_Q3_l101_101544


namespace union_sets_l101_101961

def M : Set ‚Ñï := {0, 1, 3}
def N : Set ‚Ñï := {x | ‚àÉ a ‚àà M, x = 3 * a}

theorem union_sets : M ‚à™ N = {0, 1, 3, 9} :=
by
  sorry

end union_sets_l101_101961


namespace original_five_digit_number_l101_101808

theorem original_five_digit_number :
  ‚àÉ N y x : ‚Ñï, (N = 10 * y + x) ‚àß (N + y = 54321) ‚àß (N = 49383) :=
by
  -- The proof script goes here
  sorry

end original_five_digit_number_l101_101808


namespace suzhou_metro_scientific_notation_l101_101689

theorem suzhou_metro_scientific_notation : 
  (‚àÉ(a : ‚Ñù) (n : ‚Ñ§), 
    1 ‚â§ abs a ‚àß abs a < 10 ‚àß 15.6 * 10^9 = a * 10^n) ‚Üí 
    (a = 1.56 ‚àß n = 9) := 
by
  sorry

end suzhou_metro_scientific_notation_l101_101689


namespace sqrt_12_lt_4_l101_101851

theorem sqrt_12_lt_4 : Real.sqrt 12 < 4 := sorry

end sqrt_12_lt_4_l101_101851


namespace sin_cos_difference_eq_sqrt3_div2_l101_101875

theorem sin_cos_difference_eq_sqrt3_div2 :
  sin (40 : ‚Ñù) * cos (20 : ‚Ñù) - cos (220 : ‚Ñù) * sin (20 : ‚Ñù) = (‚àö3 / 2 : ‚Ñù) :=
by
  sorry

end sin_cos_difference_eq_sqrt3_div2_l101_101875


namespace distribute_balls_l101_101968

theorem distribute_balls : 
  ‚àÉ (ways : ‚Ñï), ways = 104 ‚àß  ‚àÄ (balls : ‚Ñï) (boxes : ‚Ñï), balls = 7 ‚àß boxes = 4 ‚Üí ways = (sum 
      ([
      {balls_alloc := (7, 0, 0, 0); ways := 4},
      {balls_alloc := (6, 1, 0, 0); ways := 12},
      {balls_alloc := (5, 2, 0, 0); ways := 12},
      {balls_alloc := (4, 3, 0, 0); ways := 12},
      {balls_alloc := (4, 2, 1, 0); ways := 24},
      {balls_alloc := (3, 3, 1, 0); ways := 12},
      {balls_alloc := (3, 2, 2, 0); ways := 12},
      {balls_alloc := (3, 2, 1, 1); ways := 12},
      {balls_alloc := (2, 2, 2, 1); ways := 4}
      ])) :=
begin
  use 104,
  split,
  {refl},
  {intros balls boxes h,
   cases h with ball_cond box_cond,
   subst ball_cond,
   subst box_cond,
   sorry}
end

end distribute_balls_l101_101968


namespace simplify_expression_l101_101205

theorem simplify_expression (x : ‚Ñù) (h : x = Real.tan (Float.pi / 3)) :
  ((x + 1 - 8 / (x - 1)) / ((x^2 - 6*x + 9) / (x^2 - x)) * (3 - x)) = -3 - 3 * Real.sqrt 3 :=
by
  -- Proof would be here
  sorry

end simplify_expression_l101_101205


namespace domain_of_g_l101_101477

noncomputable def g (x : ‚Ñù) := log 6 (log 2 (log 3 (log 5 (log 7 x))))

theorem domain_of_g : ‚àÄ x : ‚Ñù, x > 7^78125 ‚Üí ‚àÉ y : ‚Ñù, g x = y :=
by
  sorry

end domain_of_g_l101_101477


namespace sum_of_first_9000_terms_of_geometric_sequence_l101_101264

noncomputable def geometric_sum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r^n) / (1 - r)

theorem sum_of_first_9000_terms_of_geometric_sequence 
  (a r : ‚Ñù)
  (h‚ÇÅ : geometric_sum a r 3000 = 500)
  (h‚ÇÇ : geometric_sum a r 6000 = 950)
  : geometric_sum a r 9000 = 1355 :=
sorry

end sum_of_first_9000_terms_of_geometric_sequence_l101_101264


namespace committee_roles_distribution_l101_101693

theorem committee_roles_distribution (n r : ‚Ñï) (h_n : n = 7) (h_r : r = 2) :
  fintype.card (permutations (fin n)) / (fintype.card (permutations (fin n) // (permutations (fin r)))) = 42 :=
by
  sorry

end committee_roles_distribution_l101_101693


namespace problem1_problem2_problem3_l101_101028

section
variable (f1 f2 F : ‚Ñù ‚Üí ‚Ñù)
variable (x : ‚Ñù)

/-- 
(1) Problem:
    Determine whether the following functions have a "lower bound".

    (i) For \( f_1(x) = 1 - 2x \), with \( x > 0 \).
    (ii) For \( f_2(x) = x + \frac{16}{x} \), with \( 0 < x ‚â§ 5 \).
-/
def no_lower_bound (f1 : ‚Ñù ‚Üí ‚Ñù) := ‚àÄ L : ‚Ñù, ‚àÉ x > 0, f1 x < L
def has_lower_bound (f2 : ‚Ñù ‚Üí ‚Ñù) (B : ‚Ñù) := ‚àÄ x ‚àà set.Icc 0 5, B ‚â§ f2 x

theorem problem1 (f1 : ‚Ñù ‚Üí ‚Ñù) (f2 : ‚Ñù ‚Üí ‚Ñù) :
  (f1 = Œª x, 1 - 2 * x) ‚Üí no_lower_bound f1
  ‚àß (f2 = Œª x, x + 16 / x) ‚Üí has_lower_bound f2 8 := sorry

/-- 
(2) Problem:
    (i) Define upper bound for a function \( f(x) \) on an interval \( D \).
    (ii) Prove whether \( f_2(x) = |x - \frac{16}{x}| \) has an upper bound on \( (0, 5] \).
-/
def has_upper_bound (f : ‚Ñù ‚Üí ‚Ñù) (D : set ‚Ñù) (U : ‚Ñù) := ‚àÉ x0 ‚àà D, ‚àÄ x ‚àà D, f x ‚â§ U
def no_upper_bound (f : ‚Ñù ‚Üí ‚Ñù) := ‚àÄ U : ‚Ñù, ‚àÉ x ‚àà set.Ioc 0 5, f x > U

theorem problem2 (f2 : ‚Ñù ‚Üí ‚Ñù) :
  (‚àÄ x ‚àà set.Ioc 0 5, f2 x = abs (x - 16 / x)) ‚Üí no_upper_bound f2 := sorry

/-- 
(3) Problem:
    Explore whether \( F(x) = x|x - 2a| + 3 \), for \( a ‚â§ 1/2 \), is bounded on the interval [1, 2]. 

    Deduce the amplitude of it if it is bounded.
-/
def bounded_on_interval (F : ‚Ñù ‚Üí ‚Ñù) (a : ‚Ñù) := ‚àÉ L U : ‚Ñù, ‚àÄ x ‚àà set.Icc 1 2, L ‚â§ F x ‚àß F x ‚â§ U
def amplitude (F : ‚Ñù ‚Üí ‚Ñù) (a : ‚Ñù) := ‚àÉ M : ‚Ñù, M = 3 - 2 * a

theorem problem3 (F : ‚Ñù ‚Üí ‚Ñù) (a : ‚Ñù) :
  (a ‚â§ 1 / 2) ‚Üí (F = Œª x, x * abs (x - 2 * a) + 3) ‚Üí bounded_on_interval F a ‚àß amplitude F a := sorry

end

end problem1_problem2_problem3_l101_101028


namespace non_factorial_tails_lt_2500_l101_101433

-- Define the function f(m)
def f (m: ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625

-- Define what it means to be a factorial tail
def is_factorial_tail (n: ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, f(m) = n

-- Define the statement to be proved
theorem non_factorial_tails_lt_2500 : 
  (finset.range 2500).filter (Œª n, ¬¨ is_factorial_tail n).card = 499 :=
by
  sorry

end non_factorial_tails_lt_2500_l101_101433


namespace ellipse_properties_l101_101895

-- Definitions used in the statement
noncomputable def length_major_axis (m : ‚Ñù) (h : 0 < m) : ‚Ñù := 2 / m
noncomputable def length_minor_axis (m : ‚Ñù) (h : 0 < m) : ‚Ñù := 1 / m
noncomputable def foci_coords (m : ‚Ñù) (h : 0 < m) : Set (‚Ñù √ó ‚Ñù) := { (sqrt 3 / (2 * m), 0), (- sqrt 3 / (2 * m), 0)}
noncomputable def vertex_coords (m : ‚Ñù) (h : 0 < m) : Set (‚Ñù √ó ‚Ñù) := { (1 / m, 0), (-1 / m, 0), (0, 1 / (2 * m)), (0, -1 / (2 * m))}
noncomputable def eccentricity (m : ‚Ñù) (h : 0 < m) : ‚Ñù := sqrt 3 / 2

theorem ellipse_properties (m : ‚Ñù) (h : 0 < m) :
  length_major_axis m h = 2 / m ‚àß
  length_minor_axis m h = 1 / m ‚àß
  foci_coords m h = { (sqrt 3 / (2 * m), 0), (- sqrt 3 / (2 * m), 0)} ‚àß
  vertex_coords m h = { (1 / m, 0), (-1 / m, 0), (0, 1 / (2 * m)), (0, -1 / (2 * m))} ‚àß
  eccentricity m h = sqrt 3 / 2 :=
sorry

end ellipse_properties_l101_101895


namespace smallest_abundant_not_multiple_of_five_l101_101007

def is_proper_divisor (d n : ‚Ñï) : Prop := d < n ‚àß n % d = 0

def sum_proper_divisors (n : ‚Ñï) : ‚Ñï :=
  Finset.sum (Finset.filter (Œª d => is_proper_divisor d n) (Finset.range n)) (Œª d => d)

def is_abundant (n : ‚Ñï) : Prop := sum_proper_divisors n > n

def is_not_multiple_of_five (n : ‚Ñï) : Prop := n % 5 ‚â† 0

theorem smallest_abundant_not_multiple_of_five : ‚àÉ n : ‚Ñï, is_abundant n ‚àß is_not_multiple_of_five n ‚àß n = 12 := by
  sorry

end smallest_abundant_not_multiple_of_five_l101_101007


namespace final_pen_count_l101_101771

theorem final_pen_count
  (initial_pens : ‚Ñï := 7) 
  (mike_given_pens : ‚Ñï := 22) 
  (doubled_pens : ‚Ñï := 2)
  (sharon_given_pens : ‚Ñï := 19) :
  let total_after_mike := initial_pens + mike_given_pens
  let total_after_cindy := total_after_mike * doubled_pens
  let final_count := total_after_cindy - sharon_given_pens
  final_count = 39 :=
by
  sorry

end final_pen_count_l101_101771


namespace find_tangent_line_polar_eq_l101_101533

noncomputable def tangent_line_polar_eq {Œ∏ œÅ : ‚Ñù} : Prop :=
  ‚àÉ (P : ‚Ñù √ó ‚Ñù), 
    P = (1 + 2 * (Real.cos Œ∏), sqrt 3 + 2 * (Real.sin Œ∏)) ‚àß
    (P.1 = 3 ‚àß P.2 = sqrt 3) ‚Üí 
    œÅ = 1 / (Real.cos (Œ∏ + 60 / 180 * Real.pi))
    
theorem find_tangent_line_polar_eq (Œ∏ œÅ : ‚Ñù) :
  tangent_line_polar_eq :=
by
  -- Proof step is omitted as instructed
  sorry

end find_tangent_line_polar_eq_l101_101533


namespace count_non_factorial_tails_lt_2500_l101_101452

def f (m : ‚Ñï) : ‚Ñï := 
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + ... -- Continue as needed

theorem count_non_factorial_tails_lt_2500 : 
  #{ n : ‚Ñï | n < 2500 ‚àß ¬¨ (‚àÉ m : ‚Ñï, f(m) = n) } = 4 :=
by sorry

end count_non_factorial_tails_lt_2500_l101_101452


namespace min_value_of_f_l101_101234

def f (x : ‚Ñù) : ‚Ñù := cos x ^ 2 - sin x ^ 2

theorem min_value_of_f : ‚àÉ x : ‚Ñù, f x = -1 := sorry

end min_value_of_f_l101_101234


namespace vince_savings_l101_101298

-- Define constants and conditions
def earnings_per_customer : ‚Ñï := 18
def monthly_expenses : ‚Ñï := 280
def percentage_for_recreation : ‚Ñï := 20
def number_of_customers : ‚Ñï := 80

-- Function to calculate total earnings
def total_earnings (customers : ‚Ñï) (earnings_per_customer : ‚Ñï) : ‚Ñï :=
  customers * earnings_per_customer

-- Function to calculate amount allocated for recreation and relaxation
def recreation_amount (total_earnings : ‚Ñï) (percentage : ‚Ñï) : ‚Ñï :=
  total_earnings * percentage / 100

-- Function to calculate total expenses
def total_monthly_expenses (base_expenses : ‚Ñï) (recreation : ‚Ñï) : ‚Ñï :=
  base_expenses + recreation

-- Function to calculate savings
def savings (total_earnings : ‚Ñï) (total_expenses : ‚Ñï) : ‚Ñï :=
  total_earnings - total_expenses

theorem vince_savings :
  let earnings := total_earnings number_of_customers earnings_per_customer,
      recreation := recreation_amount earnings percentage_for_recreation,
      expenses := total_monthly_expenses monthly_expenses recreation
  in savings earnings expenses = 872 :=
by
  sorry

end vince_savings_l101_101298


namespace problem_statement_l101_101168

theorem problem_statement (x y z w : ‚Ñù) (h : (x - y) * (z - w) / ((y - z) * (w - x)) = 3 / 7) :
  (x - z) * (y - w) / ((x - y) * (z - w)) = -1 := 
begin
  sorry
end

end problem_statement_l101_101168


namespace evaluate_Q_at_2_l101_101726

-- Define the polynomial Q(x)
noncomputable def Q (x : ‚Ñö) : ‚Ñö := x^4 - 20 * x^2 + 16

-- Define the root condition of sqrt(3) + sqrt(7)
def root_condition (x : ‚Ñö) : Prop := (x = ‚Ñö.sqrt(3) + ‚Ñö.sqrt(7))

-- Theorem statement
theorem evaluate_Q_at_2 : Q 2 = -32 :=
by
  -- Given conditions
  have h1 : degree Q = 4 := sorry,
  have h2 : leading_coeff Q = 1 := sorry,
  have h3 : root_condition (‚Ñö.sqrt(3) + ‚Ñö.sqrt(7)) := sorry,
  -- Goal
  exact sorry

end evaluate_Q_at_2_l101_101726


namespace arithmetic_sequence_geometric_condition_sum_first_n_b_seq_l101_101513

noncomputable def a_seq (n : ‚Ñï) : ‚Ñï := 2 * n + 4

def b_seq (n : ‚Ñï) : ‚Ñö := 2 / ((n + 1) * (a_seq n))

theorem arithmetic_sequence_geometric_condition (a_eq : ‚Ñï ‚Üí ‚Ñï) (d : ‚Ñï) (h1 : d ‚â† 0) (h2 : a_eq 1 = 6) (h3 : a_eq 6 * a_eq 6 = a_eq 2 * a_eq 14) :
  a_eq n = 2 * n + 4 :=
sorry

theorem sum_first_n_b_seq (S : ‚Ñï ‚Üí ‚Ñö) (b_eq : ‚Ñï ‚Üí ‚Ñö) (hS : ‚àÄ n, S n = ‚àë i in range n, b_eq i) :
  ‚àÄ n, S n = n / (2 * (n + 2)) :=
sorry

end arithmetic_sequence_geometric_condition_sum_first_n_b_seq_l101_101513


namespace workshop_workers_l101_101220

noncomputable def average_salary_all : ‚Ñù := 850
noncomputable def num_technicians : ‚Ñï := 7
noncomputable def average_salary_technicians : ‚Ñù := 1000
noncomputable def average_salary_non_technicians : ‚Ñù := 780
noncomputable def total_number_of_workers : ‚Ñï := 22

theorem workshop_workers :
  ‚àÉ W : ‚Ñù, W = total_number_of_workers ‚àß 
  (average_salary_all * W = (num_technicians * average_salary_technicians) + 
                           ((W - num_technicians) * average_salary_non_technicians)) :=
by
  use 22
  split
  ¬∑ rfl
  ¬∑ sorry

end workshop_workers_l101_101220


namespace min_elements_in_M_l101_101510

open Set Finite

theorem min_elements_in_M {Œ± : Type} [Fintype Œ±] (A B : Fin 20 ‚Üí Finset Œ±) :
  (‚àÄ i, (A i).Nonempty) ‚Üí
  (‚àÄ i, (B i).Nonempty) ‚Üí
  (‚àÄ i j, i ‚â† j ‚Üí Disjoint (A i) (A j)) ‚Üí
  (‚àÄ i j, i ‚â† j ‚Üí Disjoint (B i) (B j)) ‚Üí
  (‚ãÉ i, A i = ‚ãÉ i, B i) ‚Üí
  (‚àÄ i j, Disjoint (A i) (B j) ‚Üí 18 ‚â§ (A i ‚à™ B j).card) ‚Üí
  (‚ãÉ i, A i).card = 180 :=
by
  intros
  sorry

end min_elements_in_M_l101_101510


namespace projection_is_same_l101_101429

-- Define the triangle ABC where AC is 6 cm and the triangle is a right isosceles triangle
def isosceles_right_triangle (A B C : Type) :=
  (AC : ‚Ñù) (BC : ‚Ñù) (AB : ‚Ñù) (hAC : AC = 6)
  (hBC : BC = 6)
  (hRightAngle : ‚à†ACB = 90)
  (hIsosceles : AC = BC)
  (hHypotenuse : AB = AC * sqrt 2)

-- The projection of triangle ABC onto the projection plane is equal to itself
theorem projection_is_same (A B C : Type) : 
  isosceles_right_triangle A B C ‚Üí
  ‚àÄ AC BC AB, (‚à†ACB = 90) ‚àß (AC = 6) ‚àß (BC = 6) ‚àß (AB = 6 * sqrt 2) ‚Üí 
  isosceles_right_triangle A B C :=
by
  sorry

end projection_is_same_l101_101429


namespace non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101439

def g (m : Nat) : Nat :=
  let f k := m / k
  f 5 + f 25 + f 125 + f 625 + f 3125 + f 15625 + f 78125 + f 390625 + f 1953125 + f 9765625 + f 48828125 + f 244140625 + f 1220703125 + f 6103515625 + f 30517578125 -- continue as needed

def is_factorial_tail (n : Nat) : Prop :=
  ‚àÉ m : Nat, g m = n

def count_factorial_tails (N : Nat) : Nat :=
  (List.range N).filter (Œª n, is_factorial_tail n).length

theorem non_factorial_tails_lemma : count_factorial_tails 2500 = 2000 := sorry

theorem count_non_factorial_tails (N : Nat) : Prop :=
  let total := N - 1
  total - count_factorial_tails N = 499

theorem solution : count_non_factorial_tails 2500 := sorry

end non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101439


namespace arrange_numbers_l101_101901

variable {a : ‚Ñù}

theorem arrange_numbers (h1 : -1 < a) (h2 : a < 0) : (1 / a < a) ‚àß (a < a ^ 2) ‚àß (a ^ 2 < |a|) :=
by 
  sorry

end arrange_numbers_l101_101901


namespace coefficient_of_x_squared_in_expansion_l101_101826

noncomputable def polynomial_expansion (p : Polynomial ‚Ñö) (n : ‚Ñï) : Polynomial ‚Ñö :=
Polynomial.X ^ n + (-3) * Polynomial.C 1 * Polynomial.X ^ (n/2) + Polynomial.X * Polynomial.C 2 * Polynomial.X

theorem coefficient_of_x_squared_in_expansion : 
  (polynomial_expansion (Polynomial.X ^ 2 - 3 * Polynomial.X + Polynomial.C 2) 4).coeff 2 = 248 :=
sorry

end coefficient_of_x_squared_in_expansion_l101_101826


namespace boundary_length_of_pattern_l101_101383

theorem boundary_length_of_pattern (area : ‚Ñù) (num_points : ‚Ñï) 
(points_per_side : ‚Ñï) : 
area = 144 ‚Üí num_points = 4 ‚Üí points_per_side = 4 ‚Üí
‚àÉ length : ‚Ñù, length = 92.5 :=
by
  intros
  sorry

end boundary_length_of_pattern_l101_101383


namespace range_of_m_l101_101976

theorem range_of_m (m : ‚Ñù) : (‚àÄ x : ‚Ñù, x^2 - m * x + m > 0) ‚Üî 0 < m ‚àß m < 4 :=
by sorry

end range_of_m_l101_101976


namespace solutions_of_system_l101_101476

theorem solutions_of_system (x y z : ‚Ñù) :
    (x^2 - y = z^2) ‚Üí (y^2 - z = x^2) ‚Üí (z^2 - x = y^2) ‚Üí
    (x = 0 ‚àß y = 0 ‚àß z = 0) ‚à® 
    (x = 1 ‚àß y = 0 ‚àß z = -1) ‚à® 
    (x = 0 ‚àß y = -1 ‚àß z = 1) ‚à® 
    (x = -1 ‚àß y = 1 ‚àß z = 0) := by
  sorry

end solutions_of_system_l101_101476


namespace min_sum_abs_elements_l101_101175

theorem min_sum_abs_elements (a b c d : ‚Ñ§) (h1 : a ‚â† 0) (h2 : b ‚â† 0) (h3 : c ‚â† 0) (h4 : d ‚â† 0) 
  (h : matrix.mul (matrix.from_blocks (matrix.scalar 2 1) (matrix.scalar 2 0) (matrix.scalar 2 0) (matrix.scalar 2 1)) 
  (matrix.from_blocks (matrix.scalar 2 1) (matrix.scalar 2 0) (matrix.scalar 2 0) (matrix.scalar 2 1)) 
  = matrix.from_blocks (matrix.scalar 2 12) (matrix.scalar 2 0) (matrix.scalar 2 0) (matrix.scalar 2 12)) :
  |a| + |b| + |c| + |d| = 10 := 
by
  sorry

end min_sum_abs_elements_l101_101175


namespace sum_of_first_9000_terms_of_geometric_sequence_l101_101263

noncomputable def geometric_sum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r^n) / (1 - r)

theorem sum_of_first_9000_terms_of_geometric_sequence 
  (a r : ‚Ñù)
  (h‚ÇÅ : geometric_sum a r 3000 = 500)
  (h‚ÇÇ : geometric_sum a r 6000 = 950)
  : geometric_sum a r 9000 = 1355 :=
sorry

end sum_of_first_9000_terms_of_geometric_sequence_l101_101263


namespace average_age_combined_l101_101690

-- Definitions of the given conditions
def avg_age_fifth_graders := 10
def number_fifth_graders := 40
def avg_age_parents := 40
def number_parents := 60

-- The theorem we need to prove
theorem average_age_combined : 
  (avg_age_fifth_graders * number_fifth_graders + avg_age_parents * number_parents) / (number_fifth_graders + number_parents) = 28 := 
by
  sorry

end average_age_combined_l101_101690


namespace find_c_l101_101167

-- Definitions of r and s
def r (x : ‚Ñù) : ‚Ñù := 4 * x - 9
def s (x : ‚Ñù) (c : ‚Ñù) : ‚Ñù := 5 * x - c

-- Given and proved statement
theorem find_c (c : ‚Ñù) : r (s 2 c) = 11 ‚Üí c = 5 := 
by 
  sorry

end find_c_l101_101167


namespace similar_triangles_l101_101343

theorem similar_triangles (A B C H K M : EuclideanGeometry.Point) (triangle_ABC : EuclideanGeometry.Triangle A B C) 
  (BH : EuclideanGeometry.Altitude A B C H) 
  (AM : EuclideanGeometry.Median A B C M) 
  (CK : EuclideanGeometry.Median C B A K) :
  EuclideanGeometry.Similar (EuclideanGeometry.Triangle K H M) (EuclideanGeometry.Triangle A B C) := 
by
  sorry

end similar_triangles_l101_101343


namespace sin_angle_PAB_l101_101195

-- Axioms specifying lengths of the sides of triangle ABC
axiom AB : ‚Ñù
axiom BC : ‚Ñù
axiom CA : ‚Ñù

-- Conditions from problem statement
axiom hAB : AB = 16
axiom hBC : BC = 17
axiom hCA : CA = 18

-- Definition of the angles being congruent
axiom œâ : ‚Ñù
axiom angle_congruent : ‚àÄ P : Type, (angle P A B = œâ) ‚àß (angle P B C = œâ) ‚àß (angle P C A = œâ)

-- The goal to prove
theorem sin_angle_PAB : sin œâ = 0.5046 :=
sorry  -- Proof would be filled here

end sin_angle_PAB_l101_101195


namespace reciprocal_sum_of_roots_l101_101181

theorem reciprocal_sum_of_roots (c d : ‚Ñù) (h1 : 7 * c^2 + 4 * c + 9 = 0)
  (h2 : 7 * d^2 + 4 * d + 9 = 0) (h3 : c ‚â† d):
  (1 / c) + (1 / d) = -4 / 9 :=
by
  -- Using the relationships c + d = -4/7 and cd = 9/7
  have sum_roots : c + d = -4 / 7, from sorry,
  have prod_roots : c * d = 9 / 7, from sorry,
  -- Therefore, the sum of the reciprocals is given by
  calc (1 / c + 1 / d)
       = ((c + d) / (c * d)) : by sorry
    ... = (-4 / 7) / (9 / 7) : by sorry
    ... = -4 / 9 : sorry

end reciprocal_sum_of_roots_l101_101181


namespace polynomial_remainder_l101_101643

open Polynomial

theorem polynomial_remainder (Q : Polynomial ‚Ñù) (h1 : Q.eval 15 = 8) (h2 : Q.eval 10 = 3) :
  ‚àÉ a b : ‚Ñù, Q = (X - 10) * (X - 15) * (Q.div_XsubC_Q (10, 15)) + Polynomial.C b + Polynomial.X * Polynomial.C a ‚àß a = 1 ‚àß b = -7 :=
by
  sorry

end polynomial_remainder_l101_101643


namespace intersecting_graphs_l101_101699

theorem intersecting_graphs (a b c d : ‚Ñù) (h‚ÇÅ : (3, 6) = (3, -|3 - a| + b))
  (h‚ÇÇ : (9, 2) = (9, -|9 - a| + b))
  (h‚ÇÉ : (3, 6) = (3, |3 - c| + d))
  (h‚ÇÑ : (9, 2) = (9, |9 - c| + d)) : 
  a + c = 12 := 
sorry

end intersecting_graphs_l101_101699


namespace hundredth_non_multiple_of_three_or_five_eq_187_l101_101835

def is_neither_multiple_of_three_nor_five (n : ‚Ñï) : Prop :=
  ¬¨(n % 3 = 0) ‚àß ¬¨(n % 5 = 0)

def filtered_list (from to : ‚Ñï) : List ‚Ñï :=
  (List.range' from (to - from + 1)).filter is_neither_multiple_of_three_nor_five

theorem hundredth_non_multiple_of_three_or_five_eq_187 : 
  (filtered_list 1 200).nth 99 = some 187 := 
by
  sorry

end hundredth_non_multiple_of_three_or_five_eq_187_l101_101835


namespace population_net_increase_l101_101600

theorem population_net_increase (birth_rate death_rate : ‚Ñï) (duration_seconds : ‚Ñï) (seconds_in_a_day : ‚Ñï) :
  birth_rate = 6 ‚Üí death_rate = 2 ‚Üí duration_seconds = 2 ‚Üí seconds_in_a_day = 86400 ‚Üí
  let net_increase_per_second := (birth_rate / duration_seconds) - (death_rate / duration_seconds) in
  net_increase_per_second * seconds_in_a_day = 172800 :=
by
  intros h1 h2 h3 h4
  let net_increase_per_second := (birth_rate / duration_seconds) - (death_rate / duration_seconds)
  calc
    net_increase_per_second * seconds_in_a_day
    = ((birth_rate / duration_seconds) - (death_rate / duration_seconds)) * seconds_in_a_day : by rfl
    ... = 2 * 86400 : by sorry
    ... = 172800 : by rfl

end population_net_increase_l101_101600


namespace f_sum_l101_101695

noncomputable def f : ‚Ñù ‚Üí ‚Ñù := sorry

axiom domain_f : ‚àÄ x, 0 ‚â§ x ‚àß x ‚â§ 1 ‚Üí ‚àÉ y, f y = x
axiom non_decreasing_f : ‚àÄ x1 x2, 0 ‚â§ x1 ‚àß x1 ‚â§ x2 ‚àß x2 ‚â§ 1 ‚Üí f(x1) ‚â§ f(x2)
axiom f_0 : f(0) = 0
axiom f_frac : ‚àÄ x, 0 ‚â§ x ‚àß x ‚â§ 1 ‚Üí f(x / 3) = (1 / 2) * f(x)
axiom f_sym : ‚àÄ x, 0 ‚â§ x ‚àß x ‚â§ 1 ‚Üí f(1 - x) = 1 - f(x)

theorem f_sum : f(1 / 3) + f(1 / 8) = 3 / 4 := sorry

end f_sum_l101_101695


namespace MP_NQ_perpendicular_and_equal_length_l101_101671

noncomputable def isosceles_right_triangle (A B C : ‚ÑÇ) : Prop :=
  ‚àÉ (M : ‚ÑÇ), (abs (M - A) = abs (M - B)) ‚àß ((M - A) * (M - B).conj = 0)

noncomputable def are_perpendicular_and_same_length (P Q R S: ‚ÑÇ) : Prop :=
  (abs (P - R) = abs (Q - S)) ‚àß
  ((P - R) * (Q - S).conj = 0)

theorem MP_NQ_perpendicular_and_equal_length
  (A B C D M N P Q : ‚ÑÇ)
  (h1 : isosceles_right_triangle A M B)
  (h2 : isosceles_right_triangle B N C)
  (h3 : isosceles_right_triangle C P D)
  (h4 : isosceles_right_triangle D Q A)
  : are_perpendicular_and_same_length M P N Q :=
begin
  -- Proof goes here
  sorry
end

end MP_NQ_perpendicular_and_equal_length_l101_101671


namespace problem_l101_101080

noncomputable def sequence_a (n : ‚Ñï) : ‚Ñù :=
if n = 1 then 1 / 2 else 1 - sequence_b (n - 1)

noncomputable def sequence_b (n : ‚Ñï) : ‚Ñù :=
if n = 1 then 1 / 2 else sequence_b (n - 1) / (1 - (sequence_a (n - 1))^2)

theorem problem
  (a : ‚Ñï ‚Üí ‚Ñù)
  (b : ‚Ñï ‚Üí ‚Ñù)
  (h1 : a 1 = 1 / 2)
  (h2 : ‚àÄ n, a n + b n = 1)
  (h3 : ‚àÄ n, b (n + 1) = b n / (1 - (a n)^2)) :
  b 2017 = 2017 / 2018 :=
sorry

end problem_l101_101080


namespace ellipse_equation_l101_101934

theorem ellipse_equation (h1 : ‚àÉ (c : ‚Ñù), parabola_focus=(-1,0) ‚àß y^2 = -4*x) 
(h2 : ‚àÉ (e : ‚Ñù), e = 1/2): 
‚àÉ (a b : ‚Ñù), ellipse_equation = (x^2/4) + (y^2/3) := 
by 
  sorry

end ellipse_equation_l101_101934


namespace zoo_total_animals_l101_101390

theorem zoo_total_animals :
  let tiger_enclosures := 4
  let zebra_enclosures := tiger_enclosures * 2
  let giraffe_enclosures := zebra_enclosures * 3
  let tigers := tiger_enclosures * 4
  let zebras := zebra_enclosures * 10
  let giraffes := giraffe_enclosures * 2
  let total_animals := tigers + zebras + giraffes
  in total_animals = 144 := by
  sorry

end zoo_total_animals_l101_101390


namespace additional_charge_per_international_letter_l101_101861

-- Definitions based on conditions
def standard_postage_per_letter : ‚Ñï := 108
def num_international_letters : ‚Ñï := 2
def total_cost : ‚Ñï := 460
def num_letters : ‚Ñï := 4

-- Theorem stating the question
theorem additional_charge_per_international_letter :
  (total_cost - (num_letters * standard_postage_per_letter)) / num_international_letters = 14 :=
by
  sorry

end additional_charge_per_international_letter_l101_101861


namespace coefficient_of_x4_l101_101621

theorem coefficient_of_x4 : 
  (Finset.sum (Finset.range 6) 
    (Œª r, (Nat.choose 5 r) * (2:‚Ñï)^(5-r) * (-1:‚Ñ§)^r * (x:‚Ñ§)^(10 - 3 * r))) = 80 * x^4 :=
  sorry

end coefficient_of_x4_l101_101621


namespace number_of_real_values_of_p_l101_101166

theorem number_of_real_values_of_p (p : ‚Ñù) :
  (‚àÉ n : ‚Ñï, n = 2 ‚àß ‚àÄ p : ‚Ñù, (p = 1 + 2 * Real.sqrt 2 ‚à® p = 1 - 2 * Real.sqrt 2) ‚Üî (‚àÄ x : ‚Ñù, (x^2 - (p + 1) * x + (p + 2) = 0 ‚Üí discrim_eqz : x^2 - (p + 1) * x + (p + 2) = 0 ))) := 
sorry

end number_of_real_values_of_p_l101_101166


namespace geometric_sequence_sum_l101_101257

theorem geometric_sequence_sum
  (a r : ‚Ñù)
  (h1 : a * (1 - r ^ 3000) / (1 - r) = 500)
  (h2 : a * (1 - r ^ 6000) / (1 - r) = 950) :
  a * (1 - r ^ 9000) / (1 - r) = 1355 :=
sorry

end geometric_sequence_sum_l101_101257


namespace trains_passing_time_l101_101294

-- Definitions based on the conditions
def train1_speed_kmh : ‚Ñù := 50
def train2_speed_kmh : ‚Ñù := 40
def train1_length_m : ‚Ñù := 125
def train2_length_m : ‚Ñù := 125.02

-- Conversions and calculations
def kmh_to_mps (speed_kmh : ‚Ñù) : ‚Ñù := speed_kmh * 1000 / 3600
def relative_speed_mps : ‚Ñù := kmh_to_mps train1_speed_kmh - kmh_to_mps train2_speed_kmh
def total_length_m : ‚Ñù := train1_length_m + train2_length_m

theorem trains_passing_time :
  (total_length_m / relative_speed_mps) = 90 :=
by sorry

end trains_passing_time_l101_101294


namespace number_of_CO2_moles_l101_101496

/-
Define the conditions and prove that combining some moles of CO2 with 3 moles of H2O forms 3 moles of H2CO3,
therefore the moles of CO2 required are 3.
-/

variable (CO2 H2O H2CO3 : Type)
variable (moles_CO2 moles_H2O moles_H2CO3 : ‚Ñï)

-- Define the balanced chemical equation relation
def reaction (nCO2 nH2O nH2CO3 : ‚Ñï) : Prop :=
  nCO2 = nH2CO3 ‚àß nH2O = nH2CO3

-- Given conditions
axiom water_moles : moles_H2O = 3
axiom carbonic_acid_moles : moles_H2CO3 = 3

-- Proof statement
theorem number_of_CO2_moles :
  reaction moles_CO2 moles_H2O moles_H2CO3 ‚Üí moles_CO2 = 3 := 
by
  assume h : reaction moles_CO2 moles_H2O moles_H2CO3
  rw [‚Üêh.1, carbonic_acid_moles]
  sorry

end number_of_CO2_moles_l101_101496


namespace root_in_interval_l101_101397

noncomputable def validate_root_interval (a b c : ‚Ñù) (h : a ‚â† 0) : Prop :=
  let f := Œª x : ‚Ñù, a * x^2 + b * x + c in
  (f 0.5 = -0.25 ‚àß f 0.6 = 0.16 ‚àß f 0.4 = -0.64 ‚àß f 0.7 = 0.59)
  ‚Üí ‚àÉ x : ‚Ñù, 0.5 < x ‚àß x < 0.6 ‚àß f x = 0

theorem root_in_interval (a b c: ‚Ñù) (h: a ‚â† 0)
  (h0: a * 0.4^2 + b * 0.4 + c = -0.64)
  (h1: a * 0.5^2 + b * 0.5 + c = -0.25)
  (h2: a * 0.6^2 + b * 0.6 + c = 0.16)
  (h3: a * 0.7^2 + b * 0.7 + c = 0.59) :
  ‚àÉ x: ‚Ñù, 0.5 < x ‚àß x < 0.6 ‚àß a * x^2 + b * x + c = 0 :=
by
  sorry

end root_in_interval_l101_101397


namespace final_height_of_helicopter_total_fuel_consumed_l101_101009

noncomputable def height_changes : List Float := [4.1, -2.3, 1.6, -0.9, 1.1]

def total_height_change (changes : List Float) : Float :=
  changes.foldl (Œª acc x => acc + x) 0

theorem final_height_of_helicopter :
  total_height_change height_changes = 3.6 :=
by
  sorry

noncomputable def fuel_consumption (changes : List Float) : Float :=
  changes.foldl (Œª acc x => if x > 0 then acc + 5 * x else acc + 3 * -x) 0

theorem total_fuel_consumed :
  fuel_consumption height_changes = 43.6 :=
by
  sorry

end final_height_of_helicopter_total_fuel_consumed_l101_101009


namespace relationship_y‚ÇÅ_y‚ÇÇ_y‚ÇÉ_l101_101923

variables (y‚ÇÅ y‚ÇÇ y‚ÇÉ : ‚Ñù)

def inverse_proportion (x : ‚Ñù) : ‚Ñù := 3 / x

-- Given points A(-2, y‚ÇÅ), B(-1, y‚ÇÇ), C(1, y‚ÇÉ)
-- and y‚ÇÅ = inverse_proportion(-2), y‚ÇÇ = inverse_proportion(-1), y‚ÇÉ = inverse_proportion(1)
theorem relationship_y‚ÇÅ_y‚ÇÇ_y‚ÇÉ : 
  let y‚ÇÅ := inverse_proportion (-2),
      y‚ÇÇ := inverse_proportion (-1),
      y‚ÇÉ := inverse_proportion (1) in
  y‚ÇÇ < y‚ÇÅ ‚àß y‚ÇÅ < y‚ÇÉ :=
by
  sorry

end relationship_y‚ÇÅ_y‚ÇÇ_y‚ÇÉ_l101_101923


namespace xyz_sum_l101_101709

-- Necessary definitions for the problem setup
variables (P Q R S : Type*) 
variables (dist : P ‚Üí P ‚Üí ‚Ñù) 
variables (radius : ‚Ñù) (dPQ : dist P Q = 20) (dQR : dist Q R = 21) (dRP : dist R P = 29)
variables (is_on_sphere : ‚àÄ (X : P), dist X S = 25)

-- The distance formula from the sphere's center to the plane of the triangle
def distance_from_center_to_plane (h : ‚Ñù) : ‚Ñù := 266 * Real.sqrt 154 / 14

-- x, y, z as defined in the problem with specified properties
noncomputable def x : ‚Ñï := 266
noncomputable def y : ‚Ñï := 154
noncomputable def z : ‚Ñï := 14

-- Given x, y, z values, we need to prove the final result
theorem xyz_sum : 
  (x + y + z = 434) :=
by 
  -- Specific conditions and calculations will be instantiated here
  sorry

end xyz_sum_l101_101709


namespace polynomial_remainder_l101_101642

open Polynomial

theorem polynomial_remainder (Q : Polynomial ‚Ñù) (h1 : Q.eval 15 = 8) (h2 : Q.eval 10 = 3) :
  ‚àÉ a b : ‚Ñù, Q = (X - 10) * (X - 15) * (Q.div_XsubC_Q (10, 15)) + Polynomial.C b + Polynomial.X * Polynomial.C a ‚àß a = 1 ‚àß b = -7 :=
by
  sorry

end polynomial_remainder_l101_101642


namespace volunteers_correct_l101_101792

-- Definitions of given conditions and the required result
def sheets_per_member : ‚Ñï := 10
def cookies_per_sheet : ‚Ñï := 16
def total_cookies : ‚Ñï := 16000

-- Number of members who volunteered
def members : ‚Ñï := total_cookies / (sheets_per_member * cookies_per_sheet)

-- Proof statement
theorem volunteers_correct :
  members = 100 :=
sorry

end volunteers_correct_l101_101792


namespace num_not_factorial_tails_lt_2500_l101_101471

-- Definition of the function f(m)
def f (m : ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625 + m / 78125 + m / 390625 + m / 1953125

-- The theorem stating the main result
theorem num_not_factorial_tails_lt_2500 : 
  let count_non_tails := ‚àë k in finset.range 2500, if ‚àÄ m, f m ‚â† k then 1 else 0
  in count_non_tails = 500 :=
by
  sorry

end num_not_factorial_tails_lt_2500_l101_101471


namespace train_speed_l101_101355

theorem train_speed (length : ‚Ñï) (time : ‚Ñï) (k : ‚Ñï) : 
  (length = 250) ‚Üí 
  (time = 12) ‚Üí 
  (k = 3.6) ‚Üí
  ((length / time : ‚Ñï) * k = 75) :=
by
  sorry

end train_speed_l101_101355


namespace eq_of_complex_parts_equal_l101_101540

theorem eq_of_complex_parts_equal (a : ‚Ñù) 
  (h : (2 + a : ‚ÑÇ) / (5 : ‚ÑÇ) = (2a - 1 : ‚ÑÇ) / (5 : ‚ÑÇ)) : a = 3 := 
  by
  -- sorry is used to skip the proof
  sorry

end eq_of_complex_parts_equal_l101_101540


namespace vector_magnitude_l101_101568

theorem vector_magnitude (x : ‚Ñù) :
  let a := (1, -2)
  let b := (x, 2) in
  a.1 * b.1 + a.2 * b.2 = 0 ‚Üí (real.sqrt (b.1^2 + b.2^2) = 2 * real.sqrt 5) :=
by
  intro h
  sorry

end vector_magnitude_l101_101568


namespace regular_polygon_sides_l101_101574

theorem regular_polygon_sides (exterior_angle : ‚Ñù) (h : exterior_angle = 45) : (‚àÉ n : ‚Ñï, n = 360 / exterior_angle) :=
by {
  existsi 8,
  simp [h],
  norm_num,
}

end regular_polygon_sides_l101_101574


namespace coefficient_x2y3z_in_expansion_l101_101323

theorem coefficient_x2y3z_in_expansion :
  ‚àÄ (x y z : ‚Ñï), (x = 2) ‚Üí (y = 3) ‚Üí (z = 1) ‚Üí 
  nat.choose 6 x * nat.choose (6 - x) y * nat.choose (6 - x - y) z = 60 :=
by 
  intros x y z hx hy hz
  rw [hx, hy, hz]
  norm_num
  sorry -- Placeholder for the complete proof

end coefficient_x2y3z_in_expansion_l101_101323


namespace seedlings_planted_l101_101677

theorem seedlings_planted (x : ‚Ñï) (h1 : 2 * x + x = 1200) : x = 400 :=
by {
  sorry
}

end seedlings_planted_l101_101677


namespace fractionOf_Product_Of_Fractions_l101_101302

noncomputable def fractionOfProductOfFractions := 
  let a := (2 : ‚Ñö) / 9 * (5 : ‚Ñö) / 6 -- Define the product of the fractions
  let b := (3 : ‚Ñö) / 4 -- Define another fraction
  a / b = 20 / 81 -- Statement to be proven

theorem fractionOf_Product_Of_Fractions: fractionOfProductOfFractions :=
by sorry

end fractionOf_Product_Of_Fractions_l101_101302


namespace inverse_proportion_relation_l101_101921

theorem inverse_proportion_relation :
  let y1 := 3 / (-2)
  let y2 := 3 / (-1)
  let y3 := 3 / 1
  y2 < y1 ‚àß y1 < y3 :=
by
  -- Variable definitions according to conditions
  let y1 := 3 / (-2)
  let y2 := 3 / (-1)
  let y3 := 3 / 1
  -- Proof steps go here (not required for the statement)
  -- Since proof steps are omitted, we use sorry to indicate it
  sorry

end inverse_proportion_relation_l101_101921


namespace cistern_fill_time_l101_101334

theorem cistern_fill_time (F : ‚Ñù) (E : ‚Ñù) (net_rate : ‚Ñù) (time : ‚Ñù)
  (h_F : F = 1 / 4)
  (h_E : E = 1 / 8)
  (h_net : net_rate = F - E)
  (h_time : time = 1 / net_rate) :
  time = 8 := 
sorry

end cistern_fill_time_l101_101334


namespace sum_divisors_of_37_is_38_l101_101321

theorem sum_divisors_of_37_is_38 (h : Nat.Prime 37) : (‚àë d in (Finset.filter (Œª d, 37 % d = 0) (Finset.range (37 + 1))), d) = 38 := by
  sorry

end sum_divisors_of_37_is_38_l101_101321


namespace cone_apex_angle_60_l101_101324

def lateral_area (r l : ‚Ñù) : ‚Ñù := œÄ * r * l
def base_area (r : ‚Ñù) : ‚Ñù := œÄ * r ^ 2

def cone_apex_angle (r l : ‚Ñù) (h : ‚Ñù) : Prop :=
  (l = 2 * r) ‚Üí
  (h = ‚àö(l ^ 2 - r ^ 2)) ‚Üí
  (‚àÉ Œ∏ : ‚Ñù, tan (Œ∏ / 2) = r / h ‚àß Œ∏ = 60)

theorem cone_apex_angle_60 (r l h : ‚Ñù) : cone_apex_angle r l h :=
sorry

end cone_apex_angle_60_l101_101324


namespace hazel_ratio_is_correct_father_ratio_is_correct_l101_101082

variables (hazelA hazelB fatherA fatherB : ‚Ñï)
variables (hazelRatio fatherRatio : ‚Ñö)

-- Conditions for Hazel
def hazel_conditions : Prop :=
  hazelA = 48 ‚àß hazelB = 32

-- Condition for Hazel's ratio
def hazel_ratio_conditions : Prop :=
  hazelRatio = hazelA / hazelB

-- Conditions for Hazel's father
def father_conditions : Prop :=
  fatherA = 46 ‚àß fatherB = 24

-- Condition for Hazel's father's ratio
def father_ratio_conditions : Prop :=
  fatherRatio = fatherA / fatherB

theorem hazel_ratio_is_correct (hA : hazelA = 48) (hB : hazelB = 32) : hazelRatio = 3 / 2 :=
  sorry

theorem father_ratio_is_correct (fA : fatherA = 46) (fB : fatherB = 24) : fatherRatio = 23 / 12 :=
  sorry

end hazel_ratio_is_correct_father_ratio_is_correct_l101_101082


namespace limit_of_fraction_l101_101013

theorem limit_of_fraction (n : ‚Ñï) :
  (real tendsto (Œª n, (5 * n^2 - 2) / ((n - 3) * (n + 1))) at_top (ùìù 5)) := 
sorry

end limit_of_fraction_l101_101013


namespace hexagon_problem_l101_101347

theorem hexagon_problem (ABCDEF : RegularHexagon) (O : Point) (A EF D E C P Q R : Point) (h1 : center O ABCDEF) 
(h2 : perpendicular A EF P) (h3 : perpendicular A D Q) (h4 : perpendicular A C R) (OP_eq : dist O P = 1) :
  dist O A + dist O Q + dist O R = 5 :=
sorry

end hexagon_problem_l101_101347


namespace smallest_non_multiple_of_5_abundant_l101_101006

def properDivisors (n : ‚Ñï) : List ‚Ñï :=
  (List.range (n - 1 + 1) ).filter (fun d => d < n ‚àß n % d = 0)

def isAbundant (n : ‚Ñï) : Prop :=
  properDivisors n |>.sum > n

def isNotMultipleOfFive (n : ‚Ñï) : Prop :=
  n % 5 ‚â† 0

theorem smallest_non_multiple_of_5_abundant :
  ‚àÉ n, isAbundant n ‚àß isNotMultipleOfFive n ‚àß 
       ‚àÄ m, isAbundant m ‚àß isNotMultipleOfFive m ‚Üí n ‚â§ m :=
  sorry

end smallest_non_multiple_of_5_abundant_l101_101006


namespace johns_total_payment_l101_101774

theorem johns_total_payment
  (P : ‚Ñù) (r : ‚Ñù) (t : ‚Ñù) 
  (hP : P = 6650) 
  (hr : r = 6) 
  (ht : t = 10) : 
  let rebate_amount := (r / 100) * P in
  let price_after_rebate := P - rebate_amount in
  let sales_tax := (t / 100) * price_after_rebate in
  let total_amount := price_after_rebate + sales_tax in
  total_amount = 6876.10 := by
  sorry

end johns_total_payment_l101_101774


namespace sequence_sum_terms_l101_101561

theorem sequence_sum_terms (a : ‚Ñï ‚Üí ‚Ñù) (n : ‚Ñï) (h : (‚àë i in Finset.range n, (i+1) * a (i+1)) = 2 * n) :
  (‚àë i in Finset.range n, a (i+1) * a (i+2)) = 4 * n / (n + 1) :=
by
  sorry

end sequence_sum_terms_l101_101561


namespace evaluate_Q_at_2_l101_101728

-- Define the polynomial Q(x)
noncomputable def Q (x : ‚Ñö) : ‚Ñö := x^4 - 20 * x^2 + 16

-- Define the root condition of sqrt(3) + sqrt(7)
def root_condition (x : ‚Ñö) : Prop := (x = ‚Ñö.sqrt(3) + ‚Ñö.sqrt(7))

-- Theorem statement
theorem evaluate_Q_at_2 : Q 2 = -32 :=
by
  -- Given conditions
  have h1 : degree Q = 4 := sorry,
  have h2 : leading_coeff Q = 1 := sorry,
  have h3 : root_condition (‚Ñö.sqrt(3) + ‚Ñö.sqrt(7)) := sorry,
  -- Goal
  exact sorry

end evaluate_Q_at_2_l101_101728


namespace proof_ellipse_l101_101515

noncomputable def ellipse_equation_and_fixed_point : Prop :=
  ‚àÉ (a b x y : ‚Ñù), a > b ‚àß b > 0 ‚àß e = sqrt (3) / 2 ‚àß
  (x = 2 ‚àß y = 0 ‚àß (x^2 / a^2 + y^2 / b^2 = 1)) ‚àß
  ‚àÄ (M N: ‚Ñù √ó ‚Ñù),
    M ‚â† (2, 0) ‚àß N ‚â† (2, 0) ‚àß
    (M.1^2 / 4 + M.2^2 = 1) ‚àß (N.1^2 / 4 + N.2^2 = 1) ‚àß
    ((M.2 / (M.1 - 2)) * (N.2 / (N.1 - 2)) = -1/4) ‚Üí
    (‚àÉ x : ‚Ñù, x = 0 ‚àß (x = 0) ) ‚àß
    (‚àÉ y : ‚Ñù, y = 0 ‚àß (y = 0) )

theorem proof_ellipse (h : ellipse_equation_and_fixed_point) :
  ‚àÉ a b : ‚Ñù, a = 2 ‚àß b = 1 ‚àß ( ‚àÄ (M N: ‚Ñù √ó ‚Ñù), 
    M ‚â† (2, 0) ‚àß N ‚â† (2, 0) ‚àß 
    (M.1^2 / 4 + M.2^2 = 1) ‚àß (N.1^2 / 4 + N.2^2 = 1) ‚àß 
    ((M.2 / (M.1 - 2)) * (N.2 / (N.1 - 2)) = -1/4) ‚Üí 
    (‚àÉ x : ‚Ñù, x = 0 ‚àß (x = 0) ) ‚àß
    (‚àÉ y : ‚Ñù, y = 0 ‚àß (y = 0) )) :=
begin
  sorry
end

end proof_ellipse_l101_101515


namespace roots_of_equation_l101_101004

theorem roots_of_equation : ‚àÉ x‚ÇÅ x‚ÇÇ : ‚Ñù, (3 ^ x‚ÇÅ = Real.log (x‚ÇÅ + 9) / Real.log 3) ‚àß 
                                     (3 ^ x‚ÇÇ = Real.log (x‚ÇÇ + 9) / Real.log 3) ‚àß 
                                     (x‚ÇÅ < 0) ‚àß (x‚ÇÇ > 0) := 
by {
  sorry
}

end roots_of_equation_l101_101004


namespace complex_number_in_first_quadrant_l101_101688

theorem complex_number_in_first_quadrant :
  (let z := (i / exp(Real.pi / 4 * Complex.I)) in
  0 < z.re ‚àß 0 < z.im) := 
by
  sorry

end complex_number_in_first_quadrant_l101_101688


namespace monotonicity_of_f_inequality_solution_set_l101_101905

def f (x : ‚Ñù) : ‚Ñù :=
  if x > 0 then Real.log (x + 1)
  else -x^2 + 2 * x

theorem monotonicity_of_f :
  (‚àÄ x y : ‚Ñù, x < y ‚Üí f x < f y) :=
by
  sorry

theorem inequality_solution_set :
  { x : ‚Ñù | f (2 * x - 1) > f (2 - x) } = {x : ‚Ñù | x > 1 / 3} :=
by
  sorry

end monotonicity_of_f_inequality_solution_set_l101_101905


namespace original_number_l101_101815

theorem original_number (N y x : ‚Ñï) 
  (h1: N + y = 54321)
  (h2: N = 10 * y + x)
  (h3: 11 * y + x = 54321)
  (h4: x = 54321 % 11)
  (hy: y = 4938) : 
  N = 49383 := 
  by 
  sorry

end original_number_l101_101815


namespace find_shaded_area_l101_101379

-- Define the side length of the larger hexagon
def side_length_large_hex : ‚Ñù := 4

-- Define the radius of each semicircle
def radius_semi : ‚Ñù := side_length_large_hex / 2

-- Define the area of the larger hexagon
def area_large_hex : ‚Ñù := 3 * Real.sqrt 3 * side_length_large_hex^2 / 2

-- Define the area of one semicircle
def area_one_semi : ‚Ñù := Real.pi * radius_semi^2 / 2

-- Define the total area of all semicircles
def total_area_semis : ‚Ñù := 6 * area_one_semi

-- Define the side length of the smaller hexagon
def side_length_small_hex : ‚Ñù := radius_semi * Real.sqrt 3

-- Define the area of the smaller hexagon
def area_small_hex : ‚Ñù := 3 * Real.sqrt 3 * side_length_small_hex^2 / 2

-- Define the total shaded area inside the larger hexagon but outside the semicircles and smaller hexagon
def area_shaded : ‚Ñù := area_large_hex - total_area_semis - area_small_hex

-- Theorem statement for the given problem
theorem find_shaded_area : area_shaded = 6 * Real.sqrt 3 - 48 * Real.pi :=
by
  sorry

end find_shaded_area_l101_101379


namespace smallest_k_l101_101651

-- Sequence definition
def u : ‚Ñï ‚Üí ‚Ñù
| 0     := 1 / 3
| (k+1) := 3 * u k - 3 * (u k)^3

-- Limit definition
def L := 1 / 3

-- Proof statement
theorem smallest_k (k : ‚Ñï) (hk : k ‚â• 1) : 
  |u k - L| ‚â§ 1 / 3 ^ 300 :=
sorry

end smallest_k_l101_101651


namespace stable_equilibrium_condition_l101_101370

theorem stable_equilibrium_condition
  (a b : ‚Ñù)
  (h_condition1 : a > b)
  (h_condition2 : ‚àÄ x y : ‚Ñù, (x^2 / a^2) + (y^2 / b^2) = 1)
  : (b / a) < (1 / Real.sqrt 2) :=
sorry

end stable_equilibrium_condition_l101_101370


namespace theta_in_second_quadrant_l101_101116

theorem theta_in_second_quadrant (Œ∏ : ‚Ñù) :
  (-sin Œ∏ < 0) ‚àß (cos Œ∏ < 0) ‚Üí (œÄ/2 < Œ∏ ‚àß Œ∏ < œÄ) :=
by
  intro h
  -- Proof goes here
  sorry

end theta_in_second_quadrant_l101_101116


namespace range_of_k_l101_101958

theorem range_of_k (k : ‚Ñù) :
  (‚àÉ x : ‚Ñù, (k - 1) * x^2 + 2 * x - 1 = 0) ‚Üî (k ‚â• 0 ‚àß k ‚â† 1) :=
by
  sorry

end range_of_k_l101_101958


namespace can_cut_apples_l101_101716

-- Define the conditions given in the problem
def apple_weight := 0.025  -- weight of each apple in kg
def total_apples := 100
def total_weight := 10  -- total weight of all apples in kg
def child_weight := 0.1  -- weight each child should get in kg
def children := 100

-- State the theorem to be proved
theorem can_cut_apples (h1 : total_apples = 100)
                       (h2 : total_weight = 10)
                       (h3 : ‚àÄ k, 1 ‚â§ k ‚àß k ‚â§ total_apples ‚Üí apple_weight ‚â• 0.025) :
  ‚àÉ (cutting : List (Fin total_apples ‚Üí ‚Ñù)), 
    (‚àÄ i, 0 < i ‚àß i ‚â§ children ‚Üí (cutting.nth i).getD 0 ‚â• child_weight) ‚àß
    (‚àÄ piece, piece ‚àà cutting ‚Üí piece ‚â• 0.025) ‚àß 
    (cutting.sum = total_weight) :=
sorry

end can_cut_apples_l101_101716


namespace thabo_books_l101_101215

/-- Thabo's book count puzzle -/
theorem thabo_books (H P F : ‚Ñï) (h1 : P = H + 20) (h2 : F = 2 * P) (h3 : H + P + F = 200) : H = 35 :=
by
  -- sorry is used to skip the proof, only state the theorem.
  sorry

end thabo_books_l101_101215


namespace chromosomal_variation_incorrect_statement_l101_101837

theorem chromosomal_variation_incorrect_statement 
  (A : Prop := "Chromosomal variation includes changes in chromosomal structure and changes in the number of chromosomes.")
  (B : Prop := "The exchange of segments between two chromosomes both fall under chromosomal variation.")
  (C : Prop := "Patients with Cri-du-chat syndrome have a partial deletion of chromosome 5 compared to normal people.")
  (D : Prop := "Changes in chromosomal structure can alter the number or arrangement of genes located on the chromosome.")
  (hA : A)
  (hC : C)
  (hD : D) : ¬¨ B :=
sorry

end chromosomal_variation_incorrect_statement_l101_101837


namespace sin_identity_proof_l101_101528

theorem sin_identity_proof (x : ‚Ñù) (h : Real.sin (x + œÄ / 6) = 1 / 4) :
  Real.sin (5 * œÄ / 6 - x) + Real.sin (œÄ / 3 - x) ^ 2 = 19 / 16 :=
by
  sorry

end sin_identity_proof_l101_101528


namespace sum_of_roots_l101_101897

theorem sum_of_roots (x : ‚Ñù) :
  (x^2 - 2003 * x - 2004 = 0) ‚Üí (‚àë x, x^2 - 2003 * x - 2004 = 2003) :=
begin
  sorry
end

end sum_of_roots_l101_101897


namespace problem1_problem1_not_linear_control_problem2_problem3_l101_101047

open Real

-- Problem 1
theorem problem1
  (f : ‚Ñù ‚Üí ‚Ñù) (h_f: f = sin) :
  (‚àÄ x : ‚Ñù, |deriv f x| ‚â§ 1) :=
sorry

theorem problem1_not_linear_control
  (g : ‚Ñù ‚Üí ‚Ñù) (h_g: g = exp) :
  ¬¨(‚àÄ x : ‚Ñù, |deriv g x| ‚â§ 1) :=
sorry

-- Problem 2
theorem problem2 (f : ‚Ñù ‚Üí ‚Ñù)
  (h_linear: ‚àÄ x : ‚Ñù, |deriv f x| ‚â§ 1)
  (h_increasing: ‚àÄ x y : ‚Ñù, x < y ‚Üí f x < f y)
  (x‚ÇÅ x‚ÇÇ : ‚Ñù) (h_x: x‚ÇÅ < x‚ÇÇ) :
  0 < (f x‚ÇÇ - f x‚ÇÅ) / (x‚ÇÇ - x‚ÇÅ) ‚àß (f x‚ÇÇ - f x‚ÇÅ) / (x‚ÇÇ - x‚ÇÅ) ‚â§ 1 :=
sorry

-- Problem 3
theorem problem3 (f : ‚Ñù ‚Üí ‚Ñù)
  (h_linear: ‚àÄ x : ‚Ñù, |deriv f x| ‚â§ 1)
  (h_periodic : ‚àÉ T : ‚Ñù, T > 0 ‚àß ‚àÄ x : ‚Ñù, f (x + T) = f x)
  (x‚ÇÅ x‚ÇÇ : ‚Ñù) :
  |f x‚ÇÅ - f x‚ÇÇ| ‚â§ h_periodic.some :=
sorry

end problem1_problem1_not_linear_control_problem2_problem3_l101_101047


namespace simplest_quadratic_radical_is_sqrt15_l101_101327

def is_simplest_quadratic_radical (r : ‚Ñù) : Prop :=
  ‚àÄ (s : ‚Ñù), r = s * s ‚Üí r = s

def sqrt_15_is_simplest : Prop :=
  let rA := real.sqrt 15
  let rB := real.sqrt 12
  let rC := real.sqrt (1 / 3)
  let rD := real.cbrt 12
  is_simplest_quadratic_radical rA ‚àß
  ¬¨ is_simplest_quadratic_radical rB ‚àß
  ¬¨ is_simplest_quadratic_radical rC ‚àß
  ¬¨ is_simplest_quadratic_radical rD

theorem simplest_quadratic_radical_is_sqrt15 : sqrt_15_is_simplest := by
  sorry

end simplest_quadratic_radical_is_sqrt15_l101_101327


namespace count_non_factorial_tails_lt_2500_l101_101447

def f (m : ‚Ñï) : ‚Ñï := 
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + ... -- Continue as needed

theorem count_non_factorial_tails_lt_2500 : 
  #{ n : ‚Ñï | n < 2500 ‚àß ¬¨ (‚àÉ m : ‚Ñï, f(m) = n) } = 4 :=
by sorry

end count_non_factorial_tails_lt_2500_l101_101447


namespace correct_calculation_l101_101768

theorem correct_calculation :
  (3 * Real.sqrt 2) * (2 * Real.sqrt 3) = 6 * Real.sqrt 6 :=
by sorry

end correct_calculation_l101_101768


namespace diving_competition_scores_l101_101986

theorem diving_competition_scores (A B C D E : ‚Ñù) (hA : 1 ‚â§ A ‚àß A ‚â§ 10)
  (hB : 1 ‚â§ B ‚àß B ‚â§ 10) (hC : 1 ‚â§ C ‚àß C ‚â§ 10) (hD : 1 ‚â§ D ‚àß D ‚â§ 10) 
  (hE : 1 ‚â§ E ‚àß E ‚â§ 10) (degree_of_difficulty : ‚Ñù) (h_diff : degree_of_difficulty = 3.2)
  (point_value : ‚Ñù) (h_point_value : point_value = 79.36) :
  A = max A (max B (max C (max D E))) ‚Üí
  E = min A (min B (min C (min D E))) ‚Üí
  (B + C + D) = (point_value / degree_of_difficulty) :=
by sorry

end diving_competition_scores_l101_101986


namespace functional_eq_solve_l101_101869

theorem functional_eq_solve (f : ‚Ñù ‚Üí ‚Ñù) (h : ‚àÄ x y : ‚Ñù, f (2*x + f y) = x + y + f x) : 
  ‚àÄ x : ‚Ñù, f x = x := 
sorry

end functional_eq_solve_l101_101869


namespace sum_of_ages_l101_101597

-- Define the ages of the animals and the aging process
def lioness_age (L : ‚Ñù) : Prop := L = 12 
def hyena_age (H : ‚Ñù) : Prop := L = 2 * H
def leopard_age (P : ‚Ñù) : Prop := P = 3 * H

def baby_age (A : ‚Ñù) : ‚Ñù := A / 2

def aging_rate (animal_rate : ‚Ñù) (human_years : ‚Ñù) : ‚Ñù := animal_rate * human_years
def new_baby_age (baby : ‚Ñù) (rate : ‚Ñù) (human_years : ‚Ñù) : ‚Ñù := baby + (aging_rate rate human_years / 2)

-- Calculation for sum of the ages of the babies in five human years
theorem sum_of_ages (L H P : ‚Ñù) (BL BH BP NBL NBH NBP : ‚Ñù) :
  lioness_age L ‚Üí hyena_age H ‚Üí leopard_age P ‚Üí 
  BL = baby_age L ‚Üí BH = baby_age H ‚Üí BP = baby_age P ‚Üí
  NBL = new_baby_age BL 1.5 5 ‚Üí NBH = new_baby_age BH 1.25 5 ‚Üí NBP = new_baby_age BP 2 5 ‚Üí 
  (NBL + NBH + NBP = 29.875) :=
by
  intros h1 h2 h3 h4 h5 h6 h7 h8 h9
  rw [h1, h2, h3, h4, h5, h6, h7, h8, h9]
  sorry

end sum_of_ages_l101_101597


namespace correct_propositions_l101_101399

theorem correct_propositions (a b c Œ± Œ≤ : ‚Ñù) (f : ‚Ñù ‚Üí ‚Ñù) :
  (c^2 > 0 ‚Üí (ac^2 > bc^2 ‚Üí a > b)) ‚àß
  (¬¨(sin Œ± = sin Œ≤ ‚Üí Œ± = Œ≤)) ‚àß
  ((‚àÄ y: ‚Ñù, x - 2*a*y = 1 ‚àß 2*x - 2*a*y = 1 ‚Üí a = 0) ‚Üî 
  (‚àÄ y: ‚Ñù, x - 2*a*y = 1 ‚àß 2*x - 2*a*y ‚â† 1 ‚Üí a ‚â† 0)) ‚àß
  (‚àÄ x, f x = real.log x ‚Üí f (abs x) = real.log (abs x)) :=
by
  sorry

end correct_propositions_l101_101399


namespace cuberoot_sum_eq_a_has_solution_l101_101017

theorem cuberoot_sum_eq_a_has_solution (a : ‚Ñù) (h : a ‚â• 0) :
  (‚àÉ x : ‚Ñù, 0 ‚â§ x ‚àß x ‚â§ 1 ‚àß (‚àõ(1 + x) + ‚àõ(1 - x) = a)) ‚Üî (a ‚àà set.Icc (‚àõ2) 2) :=
by 
  noncomputable theory
  sorry

end cuberoot_sum_eq_a_has_solution_l101_101017


namespace dishonest_dealer_weight_l101_101364

variable (CostPrice SellingPrice Profit Weight : ‚Ñù)

theorem dishonest_dealer_weight :
  Profit = 66.67 / 100 ‚Üí 
  CostPrice = 100 ‚Üí 
  SellingPrice = CostPrice * (1 + Profit) ‚Üí 
  Weight = CostPrice / SellingPrice ‚Üí
  Weight ‚âà 0.6 :=
by sorry

end dishonest_dealer_weight_l101_101364


namespace solve_arccos_eq_l101_101207

theorem solve_arccos_eq (x : ‚Ñù) (h1 : -1 ‚â§ 3 * x ‚àß 3 * x ‚â§ 1) (h2 : -1 ‚â§ x ‚àß x ‚â§ 1) :
  (arccos (3 * x) - arccos x = œÄ / 6) ‚Üî (x = 0.1578 ‚à® x = -0.1578) :=
by
  -- The proof will be filled in later
  sorry

end solve_arccos_eq_l101_101207


namespace tagged_fish_ratio_l101_101592

theorem tagged_fish_ratio (tagged_first_catch : ‚Ñï) 
(tagged_second_catch : ‚Ñï) (total_second_catch : ‚Ñï) 
(h1 : tagged_first_catch = 30) (h2 : tagged_second_catch = 2) 
(h3 : total_second_catch = 50) : tagged_second_catch / total_second_catch = 1 / 25 :=
by
  sorry

end tagged_fish_ratio_l101_101592


namespace number_of_correct_statements_l101_101400

-- Definitions according to conditions
def rhombuses_not_necessarily_similar : Prop := ¬¨‚àÄ (R1 R2 : Type), similar_shapes R1 R2
def equilateral_triangles_similar : Prop := ‚àÄ (T1 T2 : Type), equilateral_triangle T1 ‚Üí equilateral_triangle T2 ‚Üí similar_shapes T1 T2
def squares_similar : Prop := ‚àÄ (S1 S2 : Type), square S1 ‚Üí square S2 ‚Üí similar_shapes S1 S2
def rectangles_not_necessarily_similar : Prop := ¬¨‚àÄ (R1 R2 : Type), rectangle R1 ‚Üí rectangle R2 ‚Üí similar_shapes R1 R2
def congruent_triangles_similar : Prop := ‚àÄ (T1 T2 : Type), congruent_triangles T1 T2 ‚Üí similar_shapes T1 T2
def right_angled_triangles_not_necessarily_similar : Prop := ¬¨‚àÄ (T1 T2 : Type), right_angled_triangle T1 ‚Üí right_angled_triangle T2 ‚Üí similar_shapes T1 T2

-- Proof problem
theorem number_of_correct_statements :
  (¬¨‚àÄ (R1 R2 : Type), similar_shapes R1 R2) ‚àß
  (‚àÄ (T1 T2 : Type), equilateral_triangle T1 ‚Üí equilateral_triangle T2 ‚Üí similar_shapes T1 T2) ‚àß
  (‚àÄ (S1 S2 : Type), square S1 ‚Üí square S2 ‚Üí similar_shapes S1 S2) ‚àß
  (¬¨‚àÄ (R1 R2 : Type), rectangle R1 ‚Üí rectangle R2 ‚Üí similar_shapes R1 R2) ‚àß
  (‚àÄ (T1 T2 : Type), congruent_triangles T1 T2 ‚Üí similar_shapes T1 T2) ‚àß
  (¬¨‚àÄ (T1 T2 : Type), right_angled_triangle T1 ‚Üí right_angled_triangle T2 ‚Üí similar_shapes T1 T2) ‚Üí
  num_correct_statements = 3 :=
by
  sorry

end number_of_correct_statements_l101_101400


namespace SquareArea_l101_101745

theorem SquareArea (s : ‚Ñù) (Œ∏ : ‚Ñù) (h1 : s = 3) (h2 : Œ∏ = œÄ / 4) : s * s = 9 := 
by 
  sorry

end SquareArea_l101_101745


namespace intersection_points_l101_101058

def periodic_func (f : ‚Ñù ‚Üí ‚Ñù) (p : ‚Ñù) : Prop :=
  ‚àÄ x, f (x + p) = f x

def func_def (f : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x, (0 ‚â§ x ‚àß x < 2) ‚Üí f x = x^3 - x

theorem intersection_points (f : ‚Ñù ‚Üí ‚Ñù)
  (h_periodic : periodic_func f 2)
  (h_def : func_def f) :
  (‚àÉ s : set ‚Ñù, s = { x ‚àà set.Icc 0 6 | f x = 0 } ‚àß s.to_finset.card = 7) :=
sorry

end intersection_points_l101_101058


namespace problem1_l101_101782

theorem problem1 (Œ± : Real) (h : Real.tan (Real.pi / 4 + Œ±) = 2) : 
  (Real.sin Œ± + 3 * Real.cos Œ±) / (Real.sin Œ± - Real.cos Œ±) = -5 := 
sorry

end problem1_l101_101782


namespace gardening_arrangement_l101_101282

theorem gardening_arrangement :
  ‚àÉ x y : ‚Ñï, 
    (20 ‚â§ x ‚àß x ‚â§ 22) ‚àß 
    y = 50 - x ‚àß 
    70 * x + 40 * y ‚â§ 2660 ‚àß 
    30 * x + 80 * y ‚â§ 3000 ‚àß 
    (‚àÄ x' y' : ‚Ñï, (20 ‚â§ x' ‚àß x' ‚â§ 22) ‚àß y' = 50 - x' ‚Üí
      70 * x' + 40 * y' ‚â§ 2660 ‚àß 
      30 * x' + 80 * y' ‚â§ 3000 ‚Üí 
      800 * x + 960 * y ‚â§ 800 * x' + 960 * y') :=
begin
  sorry
end

end gardening_arrangement_l101_101282


namespace part_a_part_b_l101_101337

noncomputable def is_regular_tetrahedron (a b c a‚ÇÅ b‚ÇÅ c‚ÇÅ : ‚Ñù) : Prop := 
  a = b ‚àß b = c ‚àß c = a‚ÇÅ ‚àß a‚ÇÅ = b‚ÇÅ ‚àß b‚ÇÅ = c‚ÇÅ

noncomputable def sum_of_edges_squared (a b c a‚ÇÅ b‚ÇÅ c‚ÇÅ : ‚Ñù) : ‚Ñù := 
  a^2 + b^2 + c^2 + a‚ÇÅ^2 + b‚ÇÅ^2 + c‚ÇÅ^2

noncomputable def sum_of_faces_areas_squared (Œî : ‚Ñù) : ‚Ñù := 
  Œî  -- assuming Œî represents this sum directly.

theorem part_a (a b c a‚ÇÅ b‚ÇÅ c‚ÇÅ Œî : ‚Ñù) :
  is_regular_tetrahedron a b c a‚ÇÅ b‚ÇÅ c‚ÇÅ ‚Üí 
  sum_of_edges_squared a b c a‚ÇÅ b‚ÇÅ c‚ÇÅ = 3 * real.sqrt(3) * Œî :=
sorry

theorem part_b (a b c a‚ÇÅ b‚ÇÅ c‚ÇÅ Œî : ‚Ñù) :
  sum_of_edges_squared a b c a‚ÇÅ b‚ÇÅ c‚ÇÅ ‚â• 3 * real.sqrt(3) * Œî 
    + 1/2 * ((a + a‚ÇÅ - b - b‚ÇÅ)^2 + (a + a‚ÇÅ - c - c‚ÇÅ)^2 + (b + b‚ÇÅ - c - c‚ÇÅ)^2)
    + 3/4 * ((a - a‚ÇÅ)^2 + (b - b‚ÇÅ)^2 + (c - c‚ÇÅ)^2) := 
sorry

end part_a_part_b_l101_101337


namespace coefficient_x4_expansion_l101_101619

theorem coefficient_x4_expansion :
  let expr := (2 * x ^ 2 - 1 / x) ^ 5
  ‚àÉ (c : ‚Ñ§), c = 80 ‚àß ‚àÉ (t : ‚Ñï ‚Üí ‚Ñù) (r : ‚Ñï),
    t r ‚â† 0 ‚àß
    expr.expandCoef r = c ‚àß
    expr.expandPower r = 4 :=
sorry

end coefficient_x4_expansion_l101_101619


namespace functional_equation_solution_l101_101016

noncomputable def f (a : ‚Ñù) (x : ‚Ñù) : ‚Ñù :=
  1 / (1 + a * x)

theorem functional_equation_solution (a : ‚Ñù) (x y : ‚Ñù)
  (ha : 0 < a) (hx : 0 < x) (hy : 0 < y) :
  f a x * f a (y * f a x) = f a (x + y) :=
sorry

end functional_equation_solution_l101_101016


namespace minimal_sum_of_matrix_elements_l101_101174

theorem minimal_sum_of_matrix_elements (a b c d : ‚Ñ§) 
    (h1 : a ‚â† 0) 
    (h2 : b ‚â† 0) 
    (h3 : c ‚â† 0) 
    (h4 : d ‚â† 0) 
    (h5 : (Matrix.vecCons (Matrix.vecCons a (Matrix.vecCons b Matrix.vecEmpty))
                         (Matrix.vecCons (Matrix.vecCons c (Matrix.vecCons d Matrix.vecEmpty))
                         (Matrix.vecCons 0 (Matrix.vecCons 0 Matrix.vecEmpty))))
          ^2 = 
    (Matrix.vecCons (Matrix.vecCons 12 (Matrix.vecCons 0 Matrix.vecEmpty))
                   (Matrix.vecCons (Matrix.vecCons 0 (Matrix.vecCons 12 Matrix.vecEmpty))
                   (Matrix.vecCons 0 (Matrix.vecCons 0 Matrix.vecEmpty))))) :
    ‚àÉ a b c d, |a| + |b| + |c| + |d| = 10 :=
sorry

end minimal_sum_of_matrix_elements_l101_101174


namespace coin_flip_probability_l101_101974

-- Define the required variables and conditions
def n : ‚Ñï := 3 -- number of flips
def k : ‚Ñï := 2 -- number of desired heads
def p : ‚Ñù := 0.5 -- probability of getting heads

-- Binomial coefficient calculation
def binomial_coeff (n k : ‚Ñï) : ‚Ñï :=
  Nat.factorial n / (Nat.factorial k * Nat.factorial (n - k))

-- Statement of the problem
theorem coin_flip_probability :
  (binomial_coeff n k) * (p ^ k) * ((1 - p) ^ (n - k)) = 0.375 :=
by
  -- Proof goes here
  sorry

end coin_flip_probability_l101_101974


namespace num_not_factorial_tails_lt_2500_l101_101467

-- Definition of the function f(m)
def f (m : ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625 + m / 78125 + m / 390625 + m / 1953125

-- The theorem stating the main result
theorem num_not_factorial_tails_lt_2500 : 
  let count_non_tails := ‚àë k in finset.range 2500, if ‚àÄ m, f m ‚â† k then 1 else 0
  in count_non_tails = 500 :=
by
  sorry

end num_not_factorial_tails_lt_2500_l101_101467


namespace melanie_balloons_l101_101636

theorem melanie_balloons (joan_balloons melanie_balloons total_balloons : ‚Ñï)
  (h_joan : joan_balloons = 40)
  (h_total : total_balloons = 81) :
  melanie_balloons = total_balloons - joan_balloons :=
by
  sorry

end melanie_balloons_l101_101636


namespace max_dance_pairs_l101_101128

-- Define the capacities of boys and girls in the dance ensemble.
def boys := 8
def girls := 16

-- Statement: there exists a maximum number of pairs such that in each pair,
-- at least one of the partners is not part of any other pair.
theorem max_dance_pairs :
  ‚àÉ (max_pairs : ‚Ñï), max_pairs = 22 ‚àß
  (‚àÄ (pairs : Œ† (i : ‚Ñï), (i < max_pairs) ‚Üí (‚Ñï √ó ‚Ñï)), 
    (‚àÄ i, (i < max_pairs) ‚Üí let (b, g) := pairs i (by linarith) 
                            in b ‚â† 0 ‚àß g ‚â† 0 ‚Üí
    (b ‚â† b' ‚àß g ‚â† g' ‚àÄ j, j ‚â† i ‚Üí pairs j (by linarith) = (b', g'))) ‚Üí 
  ) :=
begin
  sorry
end

end max_dance_pairs_l101_101128


namespace sum_of_divisors_37_l101_101313

theorem sum_of_divisors_37 : ‚àë d in (finset.filter (Œª d, 37 % d = 0) (finset.range 38)), d = 38 :=
by {
  sorry
}

end sum_of_divisors_37_l101_101313


namespace small_branches_count_l101_101358

theorem small_branches_count (x : ‚Ñï) (h : x^2 + x + 1 = 91) : x = 9 := 
  sorry

end small_branches_count_l101_101358


namespace carly_shipping_cost_l101_101417

noncomputable def total_shipping_cost (flat_fee cost_per_pound weight : ‚Ñù) : ‚Ñù :=
flat_fee + cost_per_pound * weight

theorem carly_shipping_cost : 
  total_shipping_cost 5 0.80 5 = 9 :=
by 
  unfold total_shipping_cost
  norm_num

end carly_shipping_cost_l101_101417


namespace number_of_pins_l101_101186

def divisible_by_2019_squared (n : Nat) : Prop :=
  ‚àÉ x : Nat, n = x ^ 2 ‚àß x = 2019

theorem number_of_pins 
  (A B : Finset (Set (‚Ñù √ó ‚Ñù)))
  (h‚ÇÅ : ¬¨ A.empty)
  (h‚ÇÇ : ¬¨ B.empty)
  (hA : A.card = 2019^2)
  (hB : B.card = 2019^2)
  (hA_areas : ‚àÄ a ‚àà A, measure_theory.measure_space.volume a = 1)
  (hB_areas : ‚àÄ b ‚àà B, measure_theory.measure_space.volume b = 1)
  (divisibility : divisible_by_2019_squared (A.card))
  : ‚àÉ (f : A ‚Üí B), function.bijective f ‚àß ‚àÄ a ‚àà A, ‚àÉ (p : ‚Ñù √ó ‚Ñù), p ‚àà a ‚àß p ‚àà f a :=
begin
  sorry
end

end number_of_pins_l101_101186


namespace triangle_AEB_area_l101_101609

def Point := ‚Ñù √ó ‚Ñù
def Rectangle (A B C D : Point) : Prop := 
  A.1 = D.1 ‚àß B.1 = C.1 ‚àß A.2 = B.2 ‚àß D.2 = C.2 ‚àß 
  (B.1 - A.1) = 8 ‚àß (C.2 - B.2) = 4

def OnSegment (P D C : Point) : Prop :=
  (min D.1 C.1 ‚â§ P.1 ‚àß P.1 ‚â§ max D.1 C.1) ‚àß 
  (min D.2 C.2 ‚â§ P.2 ‚àß P.2 ‚â§ max D.2 C.2)

def Intersects (AF BG : Set Point) (E : Point) : Prop :=
  E ‚àà AF ‚àß E ‚àà BG

def length (P Q : Point) : ‚Ñù :=
  sqrt ((Q.1 - P.1)^2 + (Q.2 - P.2)^2)

def TriangleArea (A B C : Point) : ‚Ñù :=
  abs (A.1*(B.2 - C.2) + B.1*(C.2 - A.2) + C.1*(A.2 - B.2)) / 2

theorem triangle_AEB_area (A B C D F G E : Point) (hRect : Rectangle A B C D)
  (hPointF : OnSegment F D C) (hPointG : OnSegment G D C)
  (hDF : length D F = 2) (hGC : length G C = 3)
  (hIntersects : Intersects ({ x : Point | ‚àÉ l : ‚Ñù, x = (l * F.1 + (1-l) * A.1, l * F.2 + (1-l) * A.2) } : Set Point) 
  ({ x : Point | ‚àÉ l : ‚Ñù, x = (l * G.1 + (1-l) * B.1, l * G.2 + (1-l) * B.2) } : Set Point) E) :
  TriangleArea A E B = 6 := sorry

end triangle_AEB_area_l101_101609


namespace geometric_sequence_sum_l101_101258

theorem geometric_sequence_sum
  (a r : ‚Ñù)
  (h1 : a * (1 - r ^ 3000) / (1 - r) = 500)
  (h2 : a * (1 - r ^ 6000) / (1 - r) = 950) :
  a * (1 - r ^ 9000) / (1 - r) = 1355 :=
sorry

end geometric_sequence_sum_l101_101258


namespace non_factorial_tails_lt_2500_l101_101432

-- Define the function f(m)
def f (m: ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625

-- Define what it means to be a factorial tail
def is_factorial_tail (n: ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, f(m) = n

-- Define the statement to be proved
theorem non_factorial_tails_lt_2500 : 
  (finset.range 2500).filter (Œª n, ¬¨ is_factorial_tail n).card = 499 :=
by
  sorry

end non_factorial_tails_lt_2500_l101_101432


namespace f_monotone_decreasing_f_odd_function_f_range_on_interval_l101_101910

-- Defining the function f and conditions
variable (f : ‚Ñù ‚Üí ‚Ñù)

axiom additivity (s t : ‚Ñù) : f (s + t) = f s + f t
axiom negativity_pos (x : ‚Ñù) (hx : x > 0) : f x < 0
axiom specific_value : f 3 = -3

-- Prove that f is monotonically decreasing on ‚Ñù
theorem f_monotone_decreasing : ‚àÄ x‚ÇÅ x‚ÇÇ : ‚Ñù, x‚ÇÅ < x‚ÇÇ ‚Üí f x‚ÇÇ < f x‚ÇÅ := 
by
  sorry

-- Prove that f is an odd function
theorem f_odd_function : ‚àÄ x : ‚Ñù, f (-x) = -f x := 
by
  sorry

-- Prove the range of f over an interval [m, n] where m, n ‚àà ‚Ñ§ and m > 0
theorem f_range_on_interval (m n : ‚Ñ§) (hm : 0 < m) : set.range (Œª x : ‚Ñù, if m ‚â§ x ‚àß x ‚â§ n then f x else 0) = set.Icc (f n) (f m) :=
by
  sorry

end f_monotone_decreasing_f_odd_function_f_range_on_interval_l101_101910


namespace sequence_increasing_l101_101042

noncomputable def sequence (x : ‚Ñï ‚Üí ‚Ñù) : Prop :=
‚àÄ n, x (n + 1) = (x n * (x n ^ 2 + 3)) / (3 * (x n ^ 2) + 1)

theorem sequence_increasing (x : ‚Ñï ‚Üí ‚Ñù) (h1 : x 1 > 0) (h2 : x 1 ‚â† 1) (h_seq : sequence x) :
  (¬¨ ‚àÄ n > 0, x n < x (n + 1)) ‚Üî ‚àÉ n > 0, x n ‚â• x (n + 1) :=
sorry

end sequence_increasing_l101_101042


namespace area_quadrilateral_BEIH_l101_101856

def rectangle_ABCD (A B C D : ‚Ñù √ó ‚Ñù) : Prop := 
  (A = (0, 2)) ‚àß 
  (B = (0, 0)) ‚àß 
  (C = (3, 0)) ‚àß 
  (D = (3, 2)) ‚àß 
  (dist A B = 3) ‚àß 
  (dist B C = 2)

def point_E (A B : ‚Ñù √ó ‚Ñù) : ‚Ñù √ó ‚Ñù := (0, 4/3)

def point_F (B C : ‚Ñù √ó ‚Ñù) : ‚Ñù √ó ‚Ñù := (3/4, 0)

def line_AF (A F : ‚Ñù √ó ‚Ñù) (x : ‚Ñù) := -8/3 * x + 2

def line_DE (D E : ‚Ñù √ó ‚Ñù) (x : ‚Ñù) := 2/3 * x

def intersection_AF_DE (A F D E : ‚Ñù √ó ‚Ñù) : ‚Ñù √ó ‚Ñù := (2/3, 2/9)  -- Point I

def line_BD (B D : ‚Ñù √ó ‚Ñù) (x : ‚Ñù) := 2/3 * x

def intersection_AF_BD (A F B D : ‚Ñù √ó ‚Ñù) : ‚Ñù √ó ‚Ñù := (6/5, 4/5)  -- Point H

theorem area_quadrilateral_BEIH :
  ‚àÄ (A B C D E F I H : ‚Ñù √ó ‚Ñù),
  rectangle_ABCD A B C D ‚Üí 
  E = point_E A B ‚Üí 
  F = point_F B C ‚Üí 
  I = intersection_AF_DE A F D E ‚Üí 
  H = intersection_AF_BD A F B D ‚Üí 
  (‚àÉ (BEIH : ‚Ñù), BEIH = 8 / 15) :=
by
  intros
  sorry

end area_quadrilateral_BEIH_l101_101856


namespace evaluate_98_times_98_mental_calculation_l101_101488

theorem evaluate_98_times_98_mental_calculation :
  (98 : ‚Ñï) * 98 = 9604 :=
by
  calc
    98 * 98 = (100 - 2) * (100 - 2) : by rw [nat.sub_self]
          ... = 100 * 100 - 2 * 100 * 2 + 2 * 2 : by rw [nat.sub_self]
          ... = 10000 - 400 + 4 : by norm_num
          ... = 9604 : by norm_num

end evaluate_98_times_98_mental_calculation_l101_101488


namespace milk_for_flour_l101_101031

theorem milk_for_flour (milk flour use_flour : ‚Ñï) (h1 : milk = 75) (h2 : flour = 300) (h3 : use_flour = 900) : (use_flour/flour * milk) = 225 :=
by sorry

end milk_for_flour_l101_101031


namespace complex_number_in_third_quadrant_l101_101939

def z : ‚ÑÇ := 1 + complex.i

def w : ‚ÑÇ := 5 / (z * z) - z

theorem complex_number_in_third_quadrant : w.re < 0 ‚àß w.im < 0 := by
  sorry

end complex_number_in_third_quadrant_l101_101939


namespace least_positive_integer_property_l101_101894

theorem least_positive_integer_property : 
  ‚àÉ (n d : ‚Ñï) (p : ‚Ñï) (h‚ÇÅ : 1 ‚â§ d) (h‚ÇÇ : d ‚â§ 9) (h‚ÇÉ : p ‚â• 2), 
  (10^p * d = 24 * n) ‚àß (‚àÉ k : ‚Ñï, (n = 100 * 10^(p-2) / 3) ‚àß (900 = 8 * 10^p + 100 / 3 * 10^(p-2))) := sorry

end least_positive_integer_property_l101_101894


namespace area_triangle_BEC_l101_101603

-- Definition of the trapezoid ABCD and given conditions
variables {A B C D E : Type}
variables [Trapezoid A B C D]
variables (AD DC : Real) (AB : Real)
variable [Perpendicular AD DC]
variable (BE : Real)
variable [Parallel BE AD]
variable (angle_BAD : Real)
variable [right_angle : angle_BAD = 90]

-- Conditions
axiom AD_len : AD = 4
axiom AB_len : AB = 4
axiom DC_len : DC = 8
axiom BE_len : BE = 4
axiom EC_len : EC = 4
axiom E_on_DC : E ‚àà (DC)

-- The proof problem
theorem area_triangle_BEC : triangle_area B E C = 8 := sorry

end area_triangle_BEC_l101_101603


namespace tangent_line_circle_b_l101_101978

theorem tangent_line_circle_b (b : ‚Ñù) : 
  (‚àÉ b, (3 * 1 + 4 * 1 - b) / real.sqrt (3^2 + 4^2) = 1) ‚Üî (b = 2 ‚à® b = 12) := 
by
  sorry

end tangent_line_circle_b_l101_101978


namespace proof_problem_l101_101412

def is_prime (n : ‚Ñï) : Prop := nat.prime n

def third_smallest_prime (p : ‚Ñï) : Prop :=
  is_prime p ‚àß ‚àÉ (a b : ‚Ñï), a = 2 ‚àß b = 3 ‚àß p > a ‚àß p > b ‚àß
  (‚àÄ (q : ‚Ñï), q < p ‚Üí q = a ‚à® q = b ‚Üí is_prime q ‚Üí true)

def fourth_smallest_prime (p : ‚Ñï) : Prop :=
  is_prime p ‚àß ‚àÉ (a b c : ‚Ñï), a = 2 ‚àß b = 3 ‚àß c = 5 ‚àß p > a ‚àß p > b ‚àß p > c ‚àß
  (‚àÄ (q : ‚Ñï), q < p ‚Üí q = a ‚à® q = b ‚à® q = c ‚Üí is_prime q ‚Üí true)

theorem proof_problem :
  ‚àÉ (a b : ‚Ñï),
    third_smallest_prime a ‚àß
    fourth_smallest_prime b ‚àß
    (a ^ 2) ^ 3 * b = 109375 :=
by
  sorry

end proof_problem_l101_101412


namespace line_circle_relationship_l101_101534

-- Given conditions
def circleC (x y : ‚Ñù) : Prop := x^2 + y^2 = 25
def pointP : ‚Ñù √ó ‚Ñù := (4, 3)
def lineL (x y : ‚Ñù) : Prop := ‚àÉ m b : ‚Ñù, y = m * x + b

-- Proof problem statement
theorem line_circle_relationship :
  (lineL pointP.1 pointP.2 ‚àß circleC pointP.1 pointP.2) ‚Üí 
  (‚àÄ x y : ‚Ñù, lineL x y ‚Üí circleC x y ‚Üí (‚àÉ u : ‚Ñù, distance (0, 0) (x, y) ‚â§ 5)) ‚à®
  (‚àÄ x y : ‚Ñù, lineL x y ‚Üí circleC x y ‚Üí (‚àÉ v : ‚Ñù, distance (0, 0) (x, y) = 5)) := 
sorry

end line_circle_relationship_l101_101534


namespace no_polynomial_satisfies_conditions_l101_101083

theorem no_polynomial_satisfies_conditions :
  ‚àÄ (f : polynomial ‚Ñù), (‚àÉ n, polynomial.degree f = n ‚àß n ‚â• 1) ‚Üí
  (‚àÄ x, f(x^2) = (f(x))^3) ‚Üí
  (‚àÄ x, f(f(x)) = (f(x))^2) ‚Üí
  false :=
by sorry

end no_polynomial_satisfies_conditions_l101_101083


namespace count_non_factorial_tails_lt_2500_l101_101449

def f (m : ‚Ñï) : ‚Ñï := 
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + ... -- Continue as needed

theorem count_non_factorial_tails_lt_2500 : 
  #{ n : ‚Ñï | n < 2500 ‚àß ¬¨ (‚àÉ m : ‚Ñï, f(m) = n) } = 4 :=
by sorry

end count_non_factorial_tails_lt_2500_l101_101449


namespace complement_of_union_correct_l101_101962

open Set

variable (U : Set ‚Ñï) (A : Set ‚Ñï) (B : Set ‚Ñï)

-- Defining the universal set
def universal_set : Set ‚Ñï := {1, 2, 3, 4, 5}

-- Defining set A
def set_A : Set ‚Ñï := { x | x^2 - 3*x + 2 = 0 }

-- Defining set B
def set_B : Set ‚Ñï := { x | ‚àÉ a ‚àà set_A, x = 2 * a}

-- Defining the complement of A ‚à™ B with respect to U
def complement_of_union : Set ‚Ñï := universal_set \ (set_A ‚à™ set_B)

-- The theorem to prove
theorem complement_of_union_correct :
  complement_of_union universal_set set_A set_B = {3, 5} :=
sorry

end complement_of_union_correct_l101_101962


namespace Jane_age_l101_101193

theorem Jane_age {n x y : ‚Ñï} (h1 : n = x^3 + 1) (h2 : n = y^2 - 4) (h3 : x^3 - y^2 = -5) : n = 1332 :=
by
  sorry

end Jane_age_l101_101193


namespace volume_apple_juice_correct_l101_101363

noncomputable def volumeAppleJuice
    (container_height : ‚Ñù)
    (container_diameter : ‚Ñù)
    (fill_ratio : ‚Ñù)
    (juice_ratio : ‚Ñù)
    (water_ratio : ‚Ñù)
    : ‚Ñù :=
  let radius := container_diameter / 2
  let volume_cylinder := Real.pi * radius^2 * (container_height * fill_ratio)
  let juice_fraction := juice_ratio / (juice_ratio + water_ratio)
  volume_cylinder * juice_fraction

theorem volume_apple_juice_correct :
    volumeAppleJuice 9 3 (1 / 3) 2 5 ‚âà 6.06 :=
by
  sorry

end volume_apple_juice_correct_l101_101363


namespace jackson_grade_l101_101632

open Function

theorem jackson_grade :
  ‚àÉ (grade : ‚Ñï), 
  ‚àÄ (hours_playing hours_studying : ‚Ñï), 
    (hours_playing = 9) ‚àß 
    (hours_studying = hours_playing / 3) ‚àß 
    (grade = hours_studying * 15) ‚Üí
    grade = 45 := 
by {
  sorry
}

end jackson_grade_l101_101632


namespace find_m_of_hyperbola_l101_101558

noncomputable def eccen_of_hyperbola (a b : ‚Ñù) : ‚Ñù := Real.sqrt (1 + (b^2) / (a^2))

theorem find_m_of_hyperbola :
  ‚àÉ (m : ‚Ñù), (m > 0) ‚àß (eccen_of_hyperbola 2 m = Real.sqrt 3) ‚àß (m = 2 * Real.sqrt 2) :=
by
  sorry

end find_m_of_hyperbola_l101_101558


namespace min_max_eq_four_min_abs_sum_eq_six_l101_101926

variables {a b c : ‚Ñù}

theorem min_max_eq_four (h1 : a + b + c = 2) (h2 : a * b * c = 4) : 
  ‚àÉ d, (d = max a (max b c)) ‚àß d = 4 :=
begin
  sorry
end

theorem min_abs_sum_eq_six (h1 : a + b + c = 2) (h2 : a * b * c = 4) : 
  ‚àÉ s, (s = |a| + |b| + |c|) ‚àß s = 6 :=
begin
  sorry
end

end min_max_eq_four_min_abs_sum_eq_six_l101_101926


namespace right_triangle_shorter_leg_l101_101133

theorem right_triangle_shorter_leg (a b : ‚Ñï) (h : a^2 + b^2 = 25^2) : a = 7 ‚à® a = 20 :=
begin
  sorry
end

end right_triangle_shorter_leg_l101_101133


namespace expectation_of_2Œæ_plus_1_variance_of_2Œæ_plus_1_l101_101065

variable (Œæ : ‚Ñù)

-- Given conditions
def E_Œæ : ‚Ñù := 3
def D_Œæ : ‚Ñù := 4

-- Questions and corresponding correct answers
theorem expectation_of_2Œæ_plus_1 : 
  E (2 * Œæ + 1) = 7 := by sorry

theorem variance_of_2Œæ_plus_1 : 
  D (2 * Œæ + 1) = 16 := by sorry

end expectation_of_2Œæ_plus_1_variance_of_2Œæ_plus_1_l101_101065


namespace people_per_family_l101_101786

theorem people_per_family
  (families : ‚Ñï) (days : ‚Ñï) (towels_per_day : ‚Ñï) (loads : ‚Ñï) (towels_per_load : ‚Ñï)
  (h1 : families = 3) (h2 : days = 7) (h3 : towels_per_day = 1)
  (h4 : towels_per_load = 14) (h5 : loads = 6) :
  (loads * towels_per_load / (days * families)) = 4 := by
  calc
    loads * towels_per_load / (days * families)
        = 6 * 14 / (7 * 3) : by 
        rw [h1, h2, h3, h4, h5]
    ... = 84 / 21 : by norm_num
    ... = 4 : by norm_num

end people_per_family_l101_101786


namespace line_does_not_pass_through_third_quadrant_l101_101702

theorem line_does_not_pass_through_third_quadrant (x y : ‚Ñù) (h : y = -x + 1) :
  ¬¨(x < 0 ‚àß y < 0) :=
sorry

end line_does_not_pass_through_third_quadrant_l101_101702


namespace smallest_positive_value_S_n_l101_101146

theorem smallest_positive_value_S_n
  (a : ‚Ñï ‚Üí ‚Ñù) 
  (h1 : is_arithmetic_sequence a) 
  (h2 : a 11 / a 10 < -1) 
  (h3 : ‚àÉ N, ‚àÄ n, S n ‚â§ S N) : 
  (‚àÉ n, S n > 0 ‚àß ‚àÄ m, m < n ‚Üí S m ‚â§ 0) ‚Üí n = 19 :=
sorry

end smallest_positive_value_S_n_l101_101146


namespace total_area_of_triangles_l101_101595

theorem total_area_of_triangles :
    let AB := 12
    let DE := 8 * Real.sqrt 2
    let area_ABC := (1 / 2) * AB * AB
    let area_DEF := (1 / 2) * DE * DE * 2
    area_ABC + area_DEF = 136 := by
  sorry

end total_area_of_triangles_l101_101595


namespace geometric_sequence_sum_l101_101266

noncomputable theory

-- Define the conditions and the problem statement
theorem geometric_sequence_sum (a r : ‚Ñù) (h‚ÇÅ : a * (1 - r^3000) / (1 - r) = 500) 
  (h‚ÇÇ : a * (1 - r^6000) / (1 - r) = 950) : 
  a * (1 - r^9000) / (1 - r) = 1355 := 
sorry

end geometric_sequence_sum_l101_101266


namespace sum_of_coefficients_shifted_function_l101_101350

def original_function (x : ‚Ñù) : ‚Ñù :=
  3*x^2 - 2*x + 6

def shifted_function (x : ‚Ñù) : ‚Ñù :=
  original_function (x + 5)

theorem sum_of_coefficients_shifted_function : 
  let a := 3
  let b := 28
  let c := 71
  a + b + c = 102 :=
by
  -- Placeholder for the proof
  sorry

end sum_of_coefficients_shifted_function_l101_101350


namespace find_m_l101_101121

open Set

variable {m : ‚Ñù}
def A := {0, m}
def B := {1, 2}

theorem find_m (h : A ‚à© B = {1}) : m = 1 := 
  sorry

end find_m_l101_101121


namespace problem1_problem2_l101_101920

def point (x y : ‚Ñù) := (x, y)

def slope (P Q : ‚Ñù √ó ‚Ñù) : ‚Ñù := (Q.snd - P.snd) / (Q.fst - P.fst)

def slopes_product_neg_quarter (P Q : ‚Ñù √ó ‚Ñù) (M : ‚Ñù √ó ‚Ñù) : Prop :=
  slope P M * slope Q M = -1 / 4

def trajectory_equation (x y : ‚Ñù) : Prop :=
  x^2 / 8 + y^2 / 2 = 1 ‚àß x ‚â† 2 ‚àß x ‚â† -2

def triangle_area (P A O : ‚Ñù √ó ‚Ñù) : ‚Ñù :=
  0.5 * abs (P.fst * (A.snd - O.snd) + A.fst * (O.snd - P.snd) + O.fst * (P.snd - A.snd))

def area_range (A P : ‚Ñù √ó ‚Ñù) : Prop :=
  0 < triangle_area P A (0,0) ‚àß triangle_area P A (0,0) ‚â§ 2

theorem problem1 : 
  ‚àÄ (P : ‚Ñù √ó ‚Ñù) (Q M : ‚Ñù √ó ‚Ñù),
  P = (2, 1) ‚Üí Q = (-2, -1) ‚Üí
  slopes_product_neg_quarter P Q M ‚Üí
  trajectory_equation M.fst M.snd := 
by
  sorry

theorem problem2 :
  ‚àÄ (P A : ‚Ñù √ó ‚Ñù),
  P = (2,1) ‚Üí
  ‚àÉ k : ‚Ñù, ‚àÄ l : set (‚Ñù √ó ‚Ñù), l = {A | A.snd = k * (A.fst - 2) + 1} ‚Üí
  A ‚àà l ‚Üí
  trajectory_equation A.fst A.snd ‚Üí
  area_range A P :=
by
  sorry

end problem1_problem2_l101_101920


namespace length_of_AC_l101_101126

variables {A B C D E : Type}
variables [MetricSpace A] [MetricSpace B] [MetricSpace C] [MetricSpace D] [MetricSpace E]

-- Assume segment lengths and bisector property
def triangle_data (A B C D E : Type) [MetricSpace A] [MetricSpace B] [MetricSpace C] [MetricSpace D] [MetricSpace E]
  (BD DE EC AB AC : ‚Ñï) :=
  (BD = 2) ‚àß (DE = 3) ‚àß (EC = 9) ‚àß (AB = 10) ‚àß (AD bisects ‚à†BAC)

noncomputable def angle_bisector_theorem (A B C D E : Type) [MetricSpace A] [MetricSpace B] [MetricSpace C] [MetricSpace D] [MetricSpace E]
  (BD DE EC AB AC BD_DC_ratio AB_AC_ratio : ‚Ñï) :=
  (BD / (DE + EC) = AB / AC) ‚àß (BD = 2) ‚àß (DE = 3) ‚àß (EC = 9) ‚àß (AB = 10) ‚Üí (AC = 60)

theorem length_of_AC {A B C D E : Type} [MetricSpace A] [MetricSpace B] [MetricSpace C] [MetricSpace D] [MetricSpace E]
  (BD DE EC AB AC : ‚Ñï) (h : triangle_data A B C D E BD DE EC AB AC) :
  AC = 60 :=
  by sorry

end length_of_AC_l101_101126


namespace nonneg_integer_solutions_l101_101885

open Nat

theorem nonneg_integer_solutions (x y : ‚Ñï) : 
  (x! + 2^y = (x + 1)! ) ‚Üî ((x = 1 ‚àß y = 0) ‚à® (x = 2 ‚àß y = 1)) := by
  sorry

end nonneg_integer_solutions_l101_101885


namespace part1_part2_part3_l101_101073

noncomputable def f (x : ‚Ñù) := (4^x - 2^x)

def range_f : Set ‚Ñù := {y | ‚àÉ x, x ‚àà Icc (-1 : ‚Ñù) (1 : ‚Ñù) ‚àß y = f x}

def g (a : ‚Ñù) : ‚Ñù := (a^2 - a) / 2

def D : Set ‚Ñù := Ioo 1 2

theorem part1 : range_f = Icc (-1 / 4 : ‚Ñù) 2 := 
sorry

theorem part2 (s t : ‚Ñù) (h1 : f s + f t = 0) (a = 2^s + 2^t) (b = 2^(s+t)) :
  b = g a ‚àß a ‚àà D :=
sorry

theorem part3 (x1 m : ‚Ñù) (h1 : x1 ‚àà D) (h2 : ‚àÉ x2, x2 ‚àà Icc (-1 : ‚Ñù) (1 : ‚Ñù) ‚àß g x1 = f x2 + m) :
  m ‚àà Icc (-1 : ‚Ñù) (1 / 4) :=
sorry

end part1_part2_part3_l101_101073


namespace not_factorial_tails_l101_101464

noncomputable def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) + ...

theorem not_factorial_tails :
  let n := 2500 in ‚àÉ (k : ‚Ñï), k = 500 ‚àß ‚àÄ m < n, ¬¨(f m = k) :=
by {
  sorry
}

end not_factorial_tails_l101_101464


namespace angle_E_measure_l101_101378

theorem angle_E_measure (H F G E : ‚Ñù) 
  (h1 : E = 2 * F) (h2 : F = 2 * G) (h3 : G = 1.25 * H) 
  (h4 : E + F + G + H = 360) : E = 150 := by
  sorry

end angle_E_measure_l101_101378


namespace weight_of_7th_person_l101_101776

-- Defining the constants and conditions
def num_people_initial : ‚Ñï := 6
def avg_weight_initial : ‚Ñù := 152
def num_people_total : ‚Ñï := 7
def avg_weight_total : ‚Ñù := 151

-- Calculating the total weights from the given average weights
def total_weight_initial := num_people_initial * avg_weight_initial
def total_weight_total := num_people_total * avg_weight_total

-- Theorem stating the weight of the 7th person
theorem weight_of_7th_person : total_weight_total - total_weight_initial = 145 := 
sorry

end weight_of_7th_person_l101_101776


namespace trigonometric_expression_identity_l101_101230

theorem trigonometric_expression_identity :
  (2 * Real.sin (100 * Real.pi / 180) - Real.cos (70 * Real.pi / 180)) / Real.cos (20 * Real.pi / 180)
  = 2 * Real.sqrt 3 - 1 :=
sorry

end trigonometric_expression_identity_l101_101230


namespace Q_at_2_l101_101723

-- Define the polynomial Q(x)
def Q (x : ‚Ñö) : ‚Ñö := x^4 - 8 * x^2 + 16

-- Define the properties of Q(x)
def is_special_polynomial (P : (‚Ñö ‚Üí ‚Ñö)) : Prop := 
  degree P = 4 ‚àß leading_coeff P = 1 ‚àß P.is_root(‚àö3 + ‚àö7)

-- Problem: Prove Q(2) = 0 given the polynomial Q meets the conditions.
theorem Q_at_2 (Q : ‚Ñö ‚Üí ‚Ñö) (h1 : degree Q = 4) (h2 : leading_coeff Q = 1) (h3 : is_root Q (‚àö3 + ‚àö7)) : 
  Q 2 = 0 := by
  sorry

end Q_at_2_l101_101723


namespace min_perimeter_triangle_l101_101125

theorem min_perimeter_triangle (a b c : ‚Ñù) (cosC : ‚Ñù) :
  a + b = 10 ‚àß cosC = -1/2 ‚àß c^2 = (a - 5)^2 + 75 ‚Üí
  a + b + c = 10 + 5 * Real.sqrt 3 :=
by
  sorry

end min_perimeter_triangle_l101_101125


namespace range_of_a_max_area_of_triangle_l101_101954

variable (p a : ‚Ñù) (h : p > 0)

def parabola_eq (x y : ‚Ñù) := y ^ 2 = 2 * p * x
def line_eq (x y : ‚Ñù) := y = x - a
def intersects_parabola (A B : ‚Ñù √ó ‚Ñù) := parabola_eq p A.fst A.snd ‚àß line_eq a A.fst A.snd ‚àß parabola_eq p B.fst B.snd ‚àß line_eq a B.fst B.snd
def ab_length_le_2p (A B : ‚Ñù √ó ‚Ñù) := (Real.sqrt ((A.fst - B.fst)^2 + (A.snd - B.snd)^2) ‚â§ 2 * p)

theorem range_of_a
  (A B : ‚Ñù √ó ‚Ñù)
  (h_intersects : intersects_parabola a p A B)
  (h_ab_length : ab_length_le_2p p A B) :
  - p / 2 < a ‚àß a ‚â§ - p / 4 := sorry

theorem max_area_of_triangle
  (A B : ‚Ñù √ó ‚Ñù) (N : ‚Ñù √ó ‚Ñù)
  (h_intersects : intersects_parabola a p A B)
  (h_ab_length : ab_length_le_2p p A B)
  (h_N : N.snd = 0) :
  ‚àÉ (S : ‚Ñù), S = Real.sqrt 2 * p^2 := sorry

end range_of_a_max_area_of_triangle_l101_101954


namespace sum_of_geometric_sequence_first_9000_terms_l101_101252

noncomputable def geomSum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r ^ n) / (1 - r)

theorem sum_of_geometric_sequence_first_9000_terms (a r : ‚Ñù) (h1 : geomSum a r 3000 = 500) (h2 : geomSum a r 6000 = 950) :
  geomSum a r 9000 = 1355 :=
by
  sorry

end sum_of_geometric_sequence_first_9000_terms_l101_101252


namespace math_problem_l101_101015

noncomputable def f (x : ‚Ñù) : ‚Ñù := 3 * real.sqrt 3 / (3 + real.sqrt 3 * x)
noncomputable def g (x : ‚Ñù) : ‚Ñù := -27 / (3 + real.sqrt 3 * x)^3

theorem math_problem (x : ‚Ñù) (h‚ÇÄ : 0 ‚â§ x) :
  let k := real.sqrt 3 in
  (‚àÄ x, 0 ‚â§ x ‚Üí f(x) = k + ‚à´ t in 0..x, g(t) / f(t)) ‚àß
  (‚àÄ x, 0 ‚â§ x ‚Üí g(x) = -k - ‚à´ t in 0..x, f(t) * g(t)) ‚àß
  f(0) = k ‚àß
  (differentiable ‚Ñù f) ‚àß
  f' 0 = -k^2 / 3 ‚àß
  (‚àÄ x, 0 ‚â§ x ‚Üí f(x) ‚â† 0) :=
by 
  sorry

end math_problem_l101_101015


namespace orthocenter_distance_sum_eq_twice_circumradius_l101_101994

variable (A B C : Type) 
variable [EuclideanGeometry A B C]

theorem orthocenter_distance_sum_eq_twice_circumradius 
  (ABC_triangle : Triangle A B C)
  (orthocenter_H : Orthocenter ABC_triangle)
  (circumcenter_O : Circumcenter ABC_triangle)
  (circumradius_R : real)
  (H_distance_to_vertices : 
    dist orthocenter_H A + dist orthocenter_H B + dist orthocenter_H C = 2 * circumradius_R) : 
  dist orthocenter_H A + dist orthocenter_H B + dist orthocenter_H C = 2 * circumradius_R :=
sorry

end orthocenter_distance_sum_eq_twice_circumradius_l101_101994


namespace Q_at_2_l101_101721

-- Define the polynomial Q(x)
def Q (x : ‚Ñö) : ‚Ñö := x^4 - 8 * x^2 + 16

-- Define the properties of Q(x)
def is_special_polynomial (P : (‚Ñö ‚Üí ‚Ñö)) : Prop := 
  degree P = 4 ‚àß leading_coeff P = 1 ‚àß P.is_root(‚àö3 + ‚àö7)

-- Problem: Prove Q(2) = 0 given the polynomial Q meets the conditions.
theorem Q_at_2 (Q : ‚Ñö ‚Üí ‚Ñö) (h1 : degree Q = 4) (h2 : leading_coeff Q = 1) (h3 : is_root Q (‚àö3 + ‚àö7)) : 
  Q 2 = 0 := by
  sorry

end Q_at_2_l101_101721


namespace count_multiples_of_7_with_units_digit_7_less_than_150_l101_101086

-- Definition of the problem's conditions and expected result
theorem count_multiples_of_7_with_units_digit_7_less_than_150 : 
  let multiples_of_7 := { n : Nat // n < 150 ‚àß n % 7 = 0 }
  let units_digit_7_multiples := { n : Nat // n < 150 ‚àß n % 7 = 0 ‚àß n % 10 = 7 }
  List.length (units_digit_7_multiples.members) = 3 :=
by
  sorry

end count_multiples_of_7_with_units_digit_7_less_than_150_l101_101086


namespace measure_angle_B_in_triangle_l101_101627

theorem measure_angle_B_in_triangle (x : ‚Ñù) (h1 : ‚à† C = 3 * ‚à† A) (h2 : ‚à† B = 2 * ‚à† A) (h_angle_sum : ‚à† A + ‚à† B + ‚à† C = 180) : 
‚à† B = 60 :=
by
  -- Lean only needs to take the conditions and the conclusion directly.
  sorry

end measure_angle_B_in_triangle_l101_101627


namespace find_m_if_z_is_pure_imaginary_l101_101578

def is_pure_imaginary (z : ‚ÑÇ) : Prop :=
  z.re = 0

theorem find_m_if_z_is_pure_imaginary (m : ‚Ñù) (z : ‚ÑÇ) (i : ‚ÑÇ) (h_i_unit : i^2 = -1) (h_z : z = (1 + i) / (1 - i) + m * (1 - i)) :
  is_pure_imaginary z ‚Üí m = 0 := 
by
  sorry

end find_m_if_z_is_pure_imaginary_l101_101578


namespace profit_percentage_l101_101829

theorem profit_percentage (initial_value : ‚Ñù) (percentage_lost : ‚Ñù) (overall_loss : ‚Ñù) (expected_profit : ‚Ñù) :
  initial_value = 100 ‚Üí
  percentage_lost = 0.5 ‚Üí
  overall_loss = 0.45 ‚Üí
  let remaining_value := initial_value * (1 - percentage_lost) in
  let loss_value := initial_value * overall_loss in
  let required_value := initial_value - loss_value in
  let equation := remaining_value * (1 + expected_profit / 100) = required_value in
  equation ‚Üí
  expected_profit = 10 := 
by
  intros h1 h2 h3
  simp [h1, h2, h3]
  sorry

end profit_percentage_l101_101829


namespace rectangle_area_error_percent_l101_101137

theorem rectangle_area_error_percent 
  (L W : ‚Ñù)
  (hL: L > 0)
  (hW: W > 0) :
  let original_area := L * W
  let measured_length := 1.06 * L
  let measured_width := 0.95 * W
  let measured_area := measured_length * measured_width
  let error := measured_area - original_area
  let error_percent := (error / original_area) * 100
  error_percent = 0.7 := by
  let original_area := L * W
  let measured_length := 1.06 * L
  let measured_width := 0.95 * W
  let measured_area := measured_length * measured_width
  let error := measured_area - original_area
  let error_percent := (error / original_area) * 100
  sorry

end rectangle_area_error_percent_l101_101137


namespace rajesh_work_completion_l101_101187

noncomputable def work_completion_time_by_rajesh (W : ‚Ñù) : ‚Ñù :=
  let mahesh_work_rate := W / 50
  let suresh_work_rate := W / 60
  let work_by_mahesh := 20 * mahesh_work_rate
  let remaining_work := W - work_by_mahesh
  let combined_work_rate := remaining_work / 30
  let rajesh_work_rate := combined_work_rate - suresh_work_rate in
  W / rajesh_work_rate

theorem rajesh_work_completion (W : ‚Ñù) (H : W > 0) :
  work_completion_time_by_rajesh W = 300 :=
by
  -- Detailed proof goes here
  sorry

end rajesh_work_completion_l101_101187


namespace fk_monotonically_increasing_l101_101509

noncomputable def f (x : ‚Ñù) : ‚Ñù := 2^(-|x|)

noncomputable def f_K (K : ‚Ñù) (x : ‚Ñù) : ‚Ñù :=
if f x <= K then f x else K

theorem fk_monotonically_increasing :
  let K := 1 / 2,
      f_k := Œª x, f_K K x in
  ‚àÄ x1 x2 : ‚Ñù, x1 < x2 ‚Üí x1 < -1 ‚Üí x2 < -1 ‚Üí f_k x1 ‚â§ f_k x2 :=
by
  let K := 1 / 2
  let f_k := Œª x, f_K K x
  sorry

end fk_monotonically_increasing_l101_101509


namespace total_cost_of_deck_l101_101290

def num_rare_cards : ‚Ñï := 19
def num_uncommon_cards : ‚Ñï := 11
def num_common_cards : ‚Ñï := 30

def cost_per_rare_card : ‚Ñï := 1
def cost_per_uncommon_card : ‚Ñù := 0.50
def cost_per_common_card : ‚Ñù := 0.25

def cost_of_rare_cards : ‚Ñï := num_rare_cards * cost_per_rare_card
def cost_of_uncommon_cards : ‚Ñù := num_uncommon_cards * cost_per_uncommon_card
def cost_of_common_cards : ‚Ñù := num_common_cards * cost_per_common_card

def total_cost : ‚Ñù := cost_of_rare_cards + cost_of_uncommon_cards + cost_of_common_cards

theorem total_cost_of_deck : total_cost = 32 := by
  -- We will need to convert integers to real numbers for this addition
  have h1 : (cost_of_rare_cards : ‚Ñù) = 19 := by norm_cast
  rw [h1]
  have h2 : (num_uncommon_cards: ‚Ñù) * cost_per_uncommon_card = 5.5 := by norm_num
  have h3 : (num_common_cards: ‚Ñù) * cost_per_common_card = 7.5 := by norm_num
  calc
    (19 : ‚Ñù) + 5.5 + 7.5 = 32 := by norm_num

end total_cost_of_deck_l101_101290


namespace value_of_n_l101_101761

theorem value_of_n (n : ‚Ñù) (h : n + (n + 1) + (n + 2) + (n + 3) = 20) : n = 3.5 :=
by sorry

end value_of_n_l101_101761


namespace geometric_sequence_sum_l101_101255

theorem geometric_sequence_sum
  (a r : ‚Ñù)
  (h1 : a * (1 - r ^ 3000) / (1 - r) = 500)
  (h2 : a * (1 - r ^ 6000) / (1 - r) = 950) :
  a * (1 - r ^ 9000) / (1 - r) = 1355 :=
sorry

end geometric_sequence_sum_l101_101255


namespace percentage_reduction_in_women_l101_101202

theorem percentage_reduction_in_women
    (total_people : Nat) (men_in_office : Nat) (women_in_office : Nat)
    (men_in_meeting : Nat) (women_in_meeting : Nat)
    (even_men_women : men_in_office = women_in_office)
    (total_people_condition : total_people = men_in_office + women_in_office)
    (meeting_condition : total_people = 60)
    (men_meeting_condition : men_in_meeting = 4)
    (women_meeting_condition : women_in_meeting = 6) :
    ((women_in_meeting * 100) / women_in_office) = 20 :=
by
  sorry

end percentage_reduction_in_women_l101_101202


namespace num_5_digit_numbers_is_six_l101_101356

-- Define that we have the digits 2, 45, and 68
def digits : List Nat := [2, 45, 68]

-- Function to generate all permutations of given digits
def permute : List Nat ‚Üí List (List Nat)
| [] => [[]]
| (x::xs) =>
  List.join (List.map (Œª ys =>
    List.map (Œª zs => x :: zs) (permute xs)) (permute xs))

-- Calculate the number of distinct 5-digit numbers
def numberOf5DigitNumbers : Int := 
  (permute digits).length

-- Theorem to prove the number of distinct 5-digit numbers formed
theorem num_5_digit_numbers_is_six : numberOf5DigitNumbers = 6 := by
  sorry

end num_5_digit_numbers_is_six_l101_101356


namespace BD_length_is_40_l101_101743

-- Definitions for the conditions
structure Trapezoid (A B C D O P : Type) :=
(parallel_AB_CD : A // AB ‚Üí Prop)
(equal_AB_CD : ‚àÄ{a b : AB}, a = b ‚Üí b = a ‚Üí Prop)
(equal_BC_AD : ‚àÄ{a d : BC AD}, a = d ‚Üí Prop)
(intersection_AC_BD : ‚àÄ (a b c d o : Point), intersect AC BD o ‚Üí Prop)
(centroid_BOD : Point)
(length_OP : length OP = 10)

-- The main statement we want to prove
theorem BD_length_is_40 (A B C D O P : Point) 
    (trapezoid : Trapezoid A B C D O P) :
  length BD = 40 := sorry

end BD_length_is_40_l101_101743


namespace Annette_more_than_Sara_l101_101402

variable (A C S : ‚Ñï)

-- Define the given conditions as hypotheses
def Annette_Caitlin_weight : Prop := A + C = 95
def Caitlin_Sara_weight : Prop := C + S = 87

-- The theorem to prove: Annette weighs 8 pounds more than Sara
theorem Annette_more_than_Sara (h1 : Annette_Caitlin_weight A C)
                               (h2 : Caitlin_Sara_weight C S) :
  A - S = 8 := by
  sorry

end Annette_more_than_Sara_l101_101402


namespace no_triangle_sides_exist_l101_101878

theorem no_triangle_sides_exist (x y z : ‚Ñù) (h_triangle_sides : x > 0 ‚àß y > 0 ‚àß z > 0)
  (h_triangle_inequality : x < y + z ‚àß y < x + z ‚àß z < x + y) :
  x^3 + y^3 + z^3 ‚â† (x + y) * (y + z) * (z + x) :=
sorry

end no_triangle_sides_exist_l101_101878


namespace S10_equals_21_l101_101959

variable {a : ‚Ñï ‚Üí ‚Ñù}

-- The given conditions
def initial_condition : a 1 = 3 := by sorry
def recursive_relation (n : ‚Ñï) (h : 2 ‚â§ n) : a (n - 1) + a n + a (n + 1) = 6 := by sorry

-- Definition of the partial sum
def S (n : ‚Ñï) : ‚Ñù := (Finset.range n).sum a

-- The proof goal
theorem S10_equals_21 : S 10 = 21 := by sorry

end S10_equals_21_l101_101959


namespace equal_parts_fraction_l101_101430

theorem equal_parts_fraction (wire_length : ‚Ñù) (parts : ‚Ñï) (fraction : ‚Ñù) 
  (h1 : wire_length = 4/5) (h2 : parts = 3) (h3 : fraction = 1/3) : 
  let total_length := wire_length / parts in 
  fraction = total_length / wire_length :=
by
  sorry

end equal_parts_fraction_l101_101430


namespace value_of_m_l101_101113

theorem value_of_m (m x : ‚Ñù) (h : x = 3) (h_eq : 3 * m - 2 * x = 6) : m = 4 := by
  -- Given x = 3
  subst h
  -- Now we have to show m = 4
  sorry

end value_of_m_l101_101113


namespace sam_milk_amount_l101_101484

variable (initial_milk : ‚Ñö) (rachel_fraction : ‚Ñö) (sam_fraction : ‚Ñö)

def milk_rachel_drinks := rachel_fraction * initial_milk
def milk_remaining := initial_milk - milk_rachel_drinks
def milk_sam_drinks := sam_fraction * milk_remaining

theorem sam_milk_amount :
  initial_milk = 3/4 ‚àß
  rachel_fraction = 1/2 ‚àß
  sam_fraction = 1/3 ‚Üí
  milk_sam_drinks initial_milk rachel_fraction sam_fraction = 1/8 := by
    intro h
    cases h with h1 h2
    cases h2 with h3 h4
    rw [h1, h3, h4]
    dsimp [milk_rachel_drinks, milk_remaining, milk_sam_drinks]
    simp
    norm_num,
    sorry

end sam_milk_amount_l101_101484


namespace deck_cost_correct_l101_101285

def rare_cards := 19
def uncommon_cards := 11
def common_cards := 30
def rare_card_cost := 1
def uncommon_card_cost := 0.5
def common_card_cost := 0.25

def total_deck_cost := rare_cards * rare_card_cost + uncommon_cards * uncommon_card_cost + common_cards * common_card_cost

theorem deck_cost_correct : total_deck_cost = 32 :=
  by
  -- The proof would go here.
  sorry

end deck_cost_correct_l101_101285


namespace sqrt_factorial_mul_self_eq_sqrt_factorial_mul_self_value_l101_101758

theorem sqrt_factorial_mul_self_eq :
  sqrt ((5!) * (5!)) = 5! :=
by sorry

theorem sqrt_factorial_mul_self_value :
  sqrt ((5!) * (5!)) = 120 :=
by {
  rw sqrt_factorial_mul_self_eq,
  norm_num,
  exact rfl,
  sorry
}

end sqrt_factorial_mul_self_eq_sqrt_factorial_mul_self_value_l101_101758


namespace martha_blue_butterflies_l101_101667

variables (B Y : Nat)

theorem martha_blue_butterflies (h_total : B + Y + 5 = 11) (h_twice : B = 2 * Y) : B = 4 :=
by
  sorry

end martha_blue_butterflies_l101_101667


namespace number_of_equidistant_planes_l101_101918

structure Point3D where
  x : ‚Ñù
  y : ‚Ñù
  z : ‚Ñù

def areNonCoplanar (A B C D : Point3D) : Prop := 
  -- A condition to check if four points are not coplanar.
  ‚àÉ (volume : ‚Ñù), volume ‚â† 0
    ‚àß volume = det ![
          ![(B.x - A.x), (B.y - A.y), (B.z - A.z)],
          ![(C.x - A.x), (C.y - A.y), (C.z - A.z)],
          ![(D.x - A.x), (D.y - A.y), (D.z - A.z)]
        ]

def equidistantPlanesCount (A B C D : Point3D) (nonCoplanar : areNonCoplanar A B C D) : ‚Ñï :=
  7

theorem number_of_equidistant_planes (A B C D : Point3D) : 
  areNonCoplanar A B C D ‚Üí equidistantPlanesCount A B C D (areNonCoplanar A B C D) = 7 := 
by 
  intros nonCoplanar
  exact rfl

end number_of_equidistant_planes_l101_101918


namespace max_knights_l101_101010

theorem max_knights (people : Fin 10 ‚Üí ‚Ñï) (knight : Fin 10 ‚Üí Prop) (liar : Fin 10 ‚Üí Prop)
  (h1 : ‚àÄ i, knight i ‚Üî (people i > i + 1)) 
  (h2 : ‚àÄ i, liar i ‚Üî ¬¨ (people i > i + 1)) 
  (h_knight_liar : ‚àÄ i, knight i ‚à® liar i) 
  (h_unique_knight : ‚àÄ i j, knight i ‚Üí knight j ‚Üí i = j) 
  (h_unique_liar : ‚àÄ i j, liar i ‚Üí liar j ‚Üí i = j) :
  (‚àë i, if knight i then 1 else 0) = 8 :=
sorry

end max_knights_l101_101010


namespace fraction_uninterested_students_interested_l101_101409

theorem fraction_uninterested_students_interested 
  (students : Nat)
  (interest_ratio : ‚Ñö)
  (express_interest_ratio_if_interested : ‚Ñö)
  (express_disinterest_ratio_if_not_interested : ‚Ñö) 
  (h1 : students > 0)
  (h2 : interest_ratio = 0.70)
  (h3 : express_interest_ratio_if_interested = 0.75)
  (h4 : express_disinterest_ratio_if_not_interested = 0.85) :
  let interested_students := students * interest_ratio
  let not_interested_students := students * (1 - interest_ratio)
  let express_interest_and_interested := interested_students * express_interest_ratio_if_interested
  let not_express_interest_and_interested := interested_students * (1 - express_interest_ratio_if_interested)
  let express_disinterest_and_not_interested := not_interested_students * express_disinterest_ratio_if_not_interested
  let express_interest_and_not_interested := not_interested_students * (1 - express_disinterest_ratio_if_not_interested)
  let not_express_interest_total := not_express_interest_and_interested + express_disinterest_and_not_interested
  let fraction := not_express_interest_and_interested / not_express_interest_total
  fraction = 0.407 := 
by
  sorry

end fraction_uninterested_students_interested_l101_101409


namespace not_factorial_tails_l101_101460

noncomputable def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) + ...

theorem not_factorial_tails :
  let n := 2500 in ‚àÉ (k : ‚Ñï), k = 500 ‚àß ‚àÄ m < n, ¬¨(f m = k) :=
by {
  sorry
}

end not_factorial_tails_l101_101460


namespace find_height_of_pyramid_l101_101223

noncomputable def volume (B h : ‚Ñù) : ‚Ñù := (1/3) * B * h
noncomputable def area_of_isosceles_right_triangle (leg : ‚Ñù) : ‚Ñù := (1/2) * leg * leg

theorem find_height_of_pyramid (leg : ‚Ñù) (h : ‚Ñù) (V : ‚Ñù) (B : ‚Ñù)
  (Hleg : leg = 3)
  (Hvol : V = 6)
  (Hbase : B = area_of_isosceles_right_triangle leg)
  (Hvol_eq : V = volume B h) :
  h = 4 :=
by
  sorry

end find_height_of_pyramid_l101_101223


namespace jerry_spent_l101_101155

theorem jerry_spent :
  ‚àÄ (original_amount spent_amount remaining_amount : ‚Ñï),
    original_amount = 18 ‚Üí
    remaining_amount = 12 ‚Üí
    spent_amount = original_amount - remaining_amount ‚Üí
    spent_amount = 6 :=
by
  intros original_amount spent_amount remaining_amount
  assume h1 : original_amount = 18
  assume h2 : remaining_amount = 12
  assume h3 : spent_amount = original_amount - remaining_amount
  rw [h1, h2] at h3
  exact h3
  sorry

end jerry_spent_l101_101155


namespace percentage_of_number_l101_101972

theorem percentage_of_number (N P : ‚Ñù) (h1 : 0.20 * N = 1000) (h2 : (P / 100) * N = 6000) : P = 120 :=
sorry

end percentage_of_number_l101_101972


namespace sum_divisors_of_37_is_38_l101_101318

theorem sum_divisors_of_37_is_38 (h : Nat.Prime 37) : (‚àë d in (Finset.filter (Œª d, 37 % d = 0) (Finset.range (37 + 1))), d) = 38 := by
  sorry

end sum_divisors_of_37_is_38_l101_101318


namespace beautiful_fold_probability_l101_101194

-- Define the square and random point F
variable {a : ‚Ñù} -- side length of the square
variable {F : ‚Ñù √ó ‚Ñù} -- random point F within the square
variable {ABCD : set (‚Ñù √ó ‚Ñù)} -- the set representing the square

-- Define the conditions of the problem
def is_square (ABCD : set (‚Ñù √ó ‚Ñù)) (a : ‚Ñù) : Prop :=
  ‚àÉ (A B C D : ‚Ñù √ó ‚Ñù),
  A = (0, 0) ‚àß B = (a, 0) ‚àß C = (a, a) ‚àß D = (0, a) ‚àß
  ABCD = {p | p.1 >= 0 ‚àß p.1 <= a ‚àß p.2 >= 0 ‚àß p.2 <= a }

def is_on_boundary (F : ‚Ñù √ó ‚Ñù) (a : ‚Ñù) : Prop :=
  (F.1 = 0 ‚à® F.1 = a ‚à® F.2 = 0 ‚à® F.2 = a) ‚àß (0 <= F.1 ‚àß F.1 <= a) ‚àß (0 <= F.2 ‚àß F.2 <= a)

def is_beautiful_fold (F : ‚Ñù √ó ‚Ñù) (a : ‚Ñù) : Prop :=
  F.1 = a/2 ‚à® F.2 = a/2

-- The probability calculation statement
theorem beautiful_fold_probability (ABCD : set (‚Ñù √ó ‚Ñù)) (F : ‚Ñù √ó ‚Ñù) (a : ‚Ñù)
  (h_square : is_square ABCD a)
  (h_point : is_on_boundary F a) :
  ‚àÉ p, p = 1 / 2 ‚àß
  (‚àÄ F, F ‚àà ABCD ‚Üí ‚àÉ beautiful_fold, beautiful_fold = is_beautiful_fold F a) :=
sorry

end beautiful_fold_probability_l101_101194


namespace math_problem_l101_101941

noncomputable def ellipse_equation (a b : ‚Ñù) (C : ‚Ñù √ó ‚Ñù ‚Üí Prop) : Prop :=
  ‚àÄ x y, C (x, y) ‚Üî x^2 / a^2 + y^2 / b^2 = 1

noncomputable def is_triangle_area (a b c : ‚Ñù) (area : ‚Ñù) : Prop :=
  ‚àÉ b c, a^2 = b^2 + c^2 ‚àß (b * 2 * c / 2) = area

theorem math_problem
  (eccentricity : ‚Ñù := (Real.sqrt 6) / 3)
  (area : ‚Ñù := (5 * Real.sqrt 2) / 3)
  (a b c : ‚Ñù)
  (C : ‚Ñù √ó ‚Ñù ‚Üí Prop)
  (M : ‚Ñù √ó ‚Ñù := (-7 / 3, 0)) :
  (is_triangle_area a b c area ‚àß (c / a) = eccentricity ‚àß a^2 = 5 ‚àß b^2 = 5 / 3) ‚Üí
  ellipse_equation a b C ‚àß
  (‚àÄ k, (‚àÉ A B : ‚Ñù √ó ‚Ñù, C A ‚àß C B ‚àß 
  ((A.1 + B.1) / 2 = -1 / 2) ‚àß ((A.2 - B.2) > 0) ‚àß (k = Real.sqrt 3 / 3 ‚à® k = -Real.sqrt 3 / 3))) ‚àß
  (‚àÄ A B : ‚Ñù √ó ‚Ñù, C A ‚àß C B ‚àß ‚àÉ k, 
  ((A.1 + B.1) / 2 = -1 / 2) ‚àß 
  ((A.2 = k * (A.1 + 1)) ‚àß (B.2 = k * (B.1 + 1))) ‚àß 
  (let MA := (A.1 + 7 / 3, A.2 - 0); MB := (B.1 + 7 / 3, B.2 - 0)
   in (MA.1 * MB.1 + MA.2 * MB.2) = 4 / 9)) :=
sorry

end math_problem_l101_101941


namespace sequence_general_term_l101_101229

theorem sequence_general_term (n : ‚Ñï) (h : n > 0) : 
  ‚àÉ a : ‚Ñï ‚Üí ‚Ñö, (‚àÄ n, a n = 1 / n) :=
by
  sorry

end sequence_general_term_l101_101229


namespace find_angle_B_l101_101589

noncomputable def cosine_value : ‚Ñù := 13 / 14
noncomputable def side_ratio (a b : ‚Ñù) := 7 * a = 3 * b

theorem find_angle_B (A B : ‚Ñù) (a b c : ‚Ñù) (h1 : cos A = cosine_value) (h2 : side_ratio a b) :
  B = œÄ / 3 ‚à® B = 2 * œÄ / 3 :=
by
  sorry

end find_angle_B_l101_101589


namespace problem_statement_l101_101172

variable (A B C D : Type) [Add A] [Div A] [HasCharZeroA] (K L M N O P Q R : A)

def midpoint (P Q : A) := (P + Q) / 2

def centroid (A B C D : A) := (A + B + C + D) / 4

noncomputable def convex_quadrilateral :=
  K = midpoint A B ‚àß
  L = midpoint B C ‚àß
  M = midpoint C D ‚àß
  N = midpoint D A ‚àß
  O = centroid A B C D ‚àß
  O = midpoint K M ‚àß
  O = midpoint L N ‚àß
  P = midpoint A C ‚àß
  Q = midpoint B D ‚àß
  O = midpoint P Q

theorem problem_statement (A B C D : Type) [Add A] [Div A] [HasCharZeroA] (K L M N O P Q : A) :
  convex_quadrilateral A B C D K L M N O P Q ‚Üí
  O =
  centroid (A B C D) /\
  O = midpoint K M /\
  O = midpoint L N /\
  O = midpoint P Q :=
by
  intro h
  rcases h with ‚ü®h1, h2, h3, h4, h5, h6, h7, h8, h9, h10‚ü©
  sorry

end problem_statement_l101_101172


namespace tan_sum_identity_l101_101527

noncomputable def sin_Œ± : ‚Ñù := 3/5

noncomputable def Œ± : ‚Ñù := sorry -- we assume the existence of such Œ±

axiom Œ±_in_range : 0 < Œ± ‚àß Œ± < œÄ/2

theorem tan_sum_identity : 
  tan (Œ± + œÄ/4) = 7 :=
by
  sorry

end tan_sum_identity_l101_101527


namespace angle_B_measure_range_of_b_l101_101151

variable {A B C : Real}
variable {a b c : Real}

-- Conditions of the problem.
axiom triangle_conditions :
  ‚àÄ {A B C a b c : Real},
    a = 1 - c ‚Üí
    B = œÄ / 3 ‚Üí
    ‚àÉ k: Real, ‚àÉ k': Real, cos C + (cos A - sqrt 3 * sin A) * cos B = 0

-- Questions to prove.
theorem angle_B_measure :
  tan B = sqrt 3 ‚Üí B = œÄ / 3 :=
by
  sorry

theorem range_of_b (h‚ÇÅ : a + c = 1) (h‚ÇÇ : B = œÄ / 3) :
  1 / 2 ‚â§ b ‚àß b < 1 :=
by
  sorry

end angle_B_measure_range_of_b_l101_101151


namespace length_of_room_is_correct_l101_101701

-- We state the conditions as definitions or hypotheses
def width_of_room : ‚Ñù := 3.75
def cost_of_paving : ‚Ñù := 16500
def rate_per_sq_meter : ‚Ñù := 800
def total_area : ‚Ñù := cost_of_paving / rate_per_sq_meter

-- The goal is to prove that the length of the room is 5.5 meters
theorem length_of_room_is_correct : total_area / width_of_room = 5.5 := by
  sorry

end length_of_room_is_correct_l101_101701


namespace truck_tank_percentage_increase_l101_101129

-- Declaration of the initial conditions (as given in the problem)
def service_cost : ‚Ñù := 2.20
def fuel_cost_per_liter : ‚Ñù := 0.70
def num_minivans : ‚Ñï := 4
def num_trucks : ‚Ñï := 2
def total_cost : ‚Ñù := 395.40
def minivan_tank_size : ‚Ñù := 65.0

-- Proof statement with the conditions declared above
theorem truck_tank_percentage_increase :
  ‚àÉ p : ‚Ñù, p = 120 ‚àß (minivan_tank_size * (p + 100) / 100 = 143) :=
sorry

end truck_tank_percentage_increase_l101_101129


namespace sin_15_cos_15_eq_one_fourth_l101_101413

theorem sin_15_cos_15_eq_one_fourth : sin (15 * Real.pi / 180) * cos (15 * Real.pi / 180) = 1 / 4 := by
  sorry

end sin_15_cos_15_eq_one_fourth_l101_101413


namespace arrangement_count_six_people_l101_101719

theorem arrangement_count_six_people (A B C D E F : Type) 
  (arrangements : Finset (List (Type))) 
  (total_arrangements : arrangements.card = 720) 
  (valid_arrangements : Finset (List (Type))) 
  (valid_count : valid_arrangements.card = 480) :
  (valid_count = (2 / 3 : ‚Ñù) * total_arrangements) :=
sorry

end arrangement_count_six_people_l101_101719


namespace abs_inequality_solution_l101_101210

theorem abs_inequality_solution (x : ‚Ñù) : |x - 1| + |x - 3| < 8 ‚Üî -2 < x ‚àß x < 6 :=
by sorry

end abs_inequality_solution_l101_101210


namespace distance_point_to_line_l101_101625

-- Define the polar coordinates for point M
def M_polar := (2, Real.pi / 3)

-- Define the polar equation of the line l
def line_l_polar (œÅ Œ∏ : ‚Ñù) : Prop := œÅ * Real.sin (Œ∏ + Real.pi / 4) = Real.sqrt 2 / 2

-- Define the Cartesian coordinates conversion for point M
def M_cartesian : ‚Ñù √ó ‚Ñù := (2 * Real.cos (Real.pi / 3), 2 * Real.sin (Real.pi / 3))

-- Define the Cartesian equation of the line l
def line_l_cartesian (x y : ‚Ñù) : Prop := x + y = 1

-- Distance from a point to a line in Cartesian coordinates
def distance_from_point_to_line (x0 y0 A B C : ‚Ñù) : ‚Ñù := abs (A * x0 + B * y0 + C) / Real.sqrt (A^2 + B^2)

-- Statement of the theorem in Lean
theorem distance_point_to_line : 
  let M := M_cartesian in
  let (xM, yM) := M in
  distance_from_point_to_line xM yM 1 1 (-1) = Real.sqrt 6 / 2 :=
by 
  unfold M_cartesian 
  unfold distance_from_point_to_line 
  apply congrArg 
  sorry

end distance_point_to_line_l101_101625


namespace adults_count_l101_101408

theorem adults_count (number_of_children : ‚Ñï) (meal_cost : ‚Ñï) (total_bill : ‚Ñï) :
  (number_of_children = 5) ‚Üí (meal_cost = 3) ‚Üí (total_bill = 21) ‚Üí 
  ‚àÉ A : ‚Ñï, A = 2 :=
by
  intros h1 h2 h3
  have h4 : 5 * meal_cost = 15 := by rw [‚Üêh2]; exact rfl
  have h5 : total_bill - 15 = 6 := by rw [‚Üêh3, ‚Üêh4]; exact rfl
  have h6 : 6 / meal_cost = 2 := by rw [‚Üêh2]; exact rfl
  use 2
  exact h6


end adults_count_l101_101408


namespace find_a_plus_b_l101_101546

noncomputable def a : ‚Ñù := sorry
noncomputable def b : ‚Ñù := sorry

def xi_values := {1, 2, 3}
def P (k : ‚Ñù) := a * k + b
def E_xi := ‚àë k in xi_values, k * P k

theorem find_a_plus_b
  (h1 : E_xi = 7 / 3)
  (h2 : ‚àë k in xi_values, P k = 1) :
  a + b = 1 / 6 :=
by
  sorry

end find_a_plus_b_l101_101546


namespace find_dot_product_ad_l101_101165

variables {V : Type*} [inner_product_space ‚Ñù V]
variables (a b c d : V)

-- Definitions based on conditions
def unit_vectors : Prop := 
  ‚à•a‚à• = 1 ‚àß ‚à•b‚à• = 1 ‚àß ‚à•c‚à• = 1 ‚àß ‚à•d‚à• = 1

def dot_products : Prop := 
  inner a b = -1/7 ‚àß 
  inner a c = -1/7 ‚àß 
  inner b c = -1/7 ‚àß 
  inner b d = -1/7 ‚àß 
  inner c d = -1/7

-- Problem statement
theorem find_dot_product_ad (h_unit: unit_vectors a b c d) (h_dot: dot_products a b c d) : 
  inner a d = -37/42 :=
sorry

end find_dot_product_ad_l101_101165


namespace concyclic_of_tangent_circles_l101_101164

noncomputable def concyclic_points (Œì1 Œì2 Œì3 Œì4 : Circle)
  (A : Point) (B : Point) (C : Point) (D : Point) : Prop :=
  Œì1.tangent Œì2 A ‚àß
  Œì2.tangent Œì3 B ‚àß
  Œì3.tangent Œì4 C ‚àß
  Œì4.tangent Œì1 D ‚àß 
  Circle.concyclic A B C D

theorem concyclic_of_tangent_circles
  (Œì1 Œì2 Œì3 Œì4 : Circle)
  (A : Point) (B : Point) (C : Point) (D : Point)
  (h1 : Circles_disjoint_Interiors Œì1 Œì2 Œì3 Œì4)
  (h2 : Œì1.tangent Œì2 A)
  (h3 : Œì2.tangent Œì3 B)
  (h4 : Œì3.tangent Œì4 C)
  (h5 : Œì4.tangent Œì1 D) :
  Circle.concyclic A B C D :=
sorry

end concyclic_of_tangent_circles_l101_101164


namespace solve_for_base_b_l101_101382

-- Definitions that directly come from the conditions of the problem
def is_square (E F G H : ‚Ñù √ó ‚Ñù) : Prop :=
  let ‚ü®x1, y1‚ü© := E
  let ‚ü®x2, y2‚ü© := F
  let ‚ü®x3, y3‚ü© := G
  let ‚ü®x4, y4‚ü© := H
  (x1 - x2)^2 + (y1 - y2)^2 = 25 ‚àß 
  (x2 - x3)^2 + (y2 - y3)^2 = 25 ‚àß
  (x3 - x4)^2 + (y3 - y4)^2 = 25 ‚àß
  (x4 - x1)^2 + (y4 - y1)^2 = 25

def parallel_to_y_axis (E F : ‚Ñù √ó ‚Ñù) : Prop :=
  let ‚ü®x1, y1‚ü© := E
  let ‚ü®x2, y2‚ü© := F
  x1 = x2

noncomputable def y_log (b x : ‚Ñù) : ‚Ñù := log b x
noncomputable def y_3log (b x : ‚Ñù) : ‚Ñù := 3 * log b x
noncomputable def x_b2y (b y : ‚Ñù) : ‚Ñù := b ^ (2 * y)

theorem solve_for_base_b (b : ‚Ñù) (E F G H : ‚Ñù √ó ‚Ñù)
  (h1 : is_square E F G H)
  (h2 : parallel_to_y_axis E F)
  (he : E.2 = y_log b E.1)
  (hf : F.2 = y_3log b F.1)
  (hh : H.1 = x_b2y b H.2) :
  b = 1.5 := 
sorry

end solve_for_base_b_l101_101382


namespace train_crosses_platform_in_given_time_l101_101333

-- Define the given conditions
def length_of_train : ‚Ñï := 140  -- in meters
def length_of_platform : ‚Ñï := 520  -- in meters
def speed_of_train_km_per_hr : ‚Ñï := 55  -- in km/hr

-- Convert speed from km/hr to m/s
def speed_of_train_m_per_s : ‚Ñù := (speed_of_train_km_per_hr * 1000) / 3600

-- Calculate the total distance (length_of_train + length_of_platform)
def total_distance : ‚Ñï := length_of_train + length_of_platform 

-- The calculation of expected time taken ignoring the slight approximation
def expected_time : ‚Ñù := total_distance / speed_of_train_m_per_s

-- The statement to be proved
theorem train_crosses_platform_in_given_time :
  expected_time ‚âà 43.2 := by
  sorry

end train_crosses_platform_in_given_time_l101_101333


namespace correct_statements_l101_101932

-- Definitions of planes and lines
variables {Point Line Plane : Type*}

-- Defining perpendicularity and parallelism relationships
variables (l m : Line) (Œ± Œ≤ : Plane)

-- Given conditions
axiom perpendicular_to_plane : ‚àÄ {l : Line} {Œ± : Plane}, l ‚•Æ Œ±
axiom line_in_plane : ‚àÄ {m : Line} {Œ≤ : Plane}, m ‚äÜ Œ≤

-- Proven statements
theorem correct_statements (h1 : l ‚•Æ Œ±) (h2 : m ‚äÜ Œ≤) :
  (Œ± ‚Äñ Œ≤ ‚Üí l ‚•Æ m) ‚àß
  (Œ± ‚•Æ Œ≤ ‚Üí ¬¨ (l ‚Äñ m)) ‚àß
  (l ‚Äñ m ‚Üí Œ± ‚•Æ Œ≤) ‚àß
  (l ‚•Æ m ‚Üí ¬¨ (Œ± ‚Äñ Œ≤)) :=
by
  sorry

end correct_statements_l101_101932


namespace chess_pieces_on_board_l101_101301

theorem chess_pieces_on_board :
  (‚àÄ (board : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï),
    (‚àÄ x y, 0 ‚â§ x ‚àß x < 7 ‚Üí 0 ‚â§ y ‚àß y < 7 ‚Üí 
      board x y + board (x+1) y + board x (y+1) + board (x+1) (y+1) = 4 * board 0 0)
    ‚àß (‚àÄ x y, (0 ‚â§ x ‚àß x < 6 ‚àß 0 ‚â§ y ‚àß y < 8 ‚Üí
      board x y + board (x+1) y + board (x+2) y = 3 * board 0 0) ‚à®
      (0 ‚â§ x ‚àß x < 8 ‚àß 0 ‚â§ y ‚àß y < 6 ‚Üí
      board x y + board x (y+1) + board x (y+2) = 3 * board 0 0)) ‚Üí
  ‚àÉ n : ‚Ñï, n = 0 ‚à® n = 64
:=
begin
  sorry
end

end chess_pieces_on_board_l101_101301


namespace trees_died_in_typhoon_l101_101081

theorem trees_died_in_typhoon :
  ‚àÄ (original_trees left_trees died_trees : ‚Ñï), 
  original_trees = 20 ‚Üí 
  left_trees = 4 ‚Üí 
  died_trees = original_trees - left_trees ‚Üí 
  died_trees = 16 :=
by
  intros original_trees left_trees died_trees h1 h2 h3
  rw [h1, h2] at h3
  exact h3

end trees_died_in_typhoon_l101_101081


namespace count_non_factorial_tails_lt_2500_l101_101450

def f (m : ‚Ñï) : ‚Ñï := 
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + ... -- Continue as needed

theorem count_non_factorial_tails_lt_2500 : 
  #{ n : ‚Ñï | n < 2500 ‚àß ¬¨ (‚àÉ m : ‚Ñï, f(m) = n) } = 4 :=
by sorry

end count_non_factorial_tails_lt_2500_l101_101450


namespace additional_charge_per_international_letter_l101_101862

-- Definitions based on conditions
def standard_postage_per_letter : ‚Ñï := 108
def num_international_letters : ‚Ñï := 2
def total_cost : ‚Ñï := 460
def num_letters : ‚Ñï := 4

-- Theorem stating the question
theorem additional_charge_per_international_letter :
  (total_cost - (num_letters * standard_postage_per_letter)) / num_international_letters = 14 :=
by
  sorry

end additional_charge_per_international_letter_l101_101862


namespace Q_evaluation_at_2_l101_101731

noncomputable def Q : Polynomial ‚Ñö := 
  (Polynomial.X^2 + Polynomial.C 4)^2

theorem Q_evaluation_at_2 : 
  Q.eval 2 = 64 :=
by 
  -- We'll skip the proof as per the instructions.
  sorry

end Q_evaluation_at_2_l101_101731


namespace range_of_b_l101_101076

-- Define the functions
def f (x : ‚Ñù) : ‚Ñù := Real.exp x - 1
def g (x : ‚Ñù) : ‚Ñù := -x^2 + 4 * x - 3

-- Formalizing the main statement
theorem range_of_b (a b : ‚Ñù) (h : f a = g b) : 1 < b ‚àß b < 3 :=
by
  sorry

end range_of_b_l101_101076


namespace find_triples_of_positive_integers_l101_101018

theorem find_triples_of_positive_integers :
  ‚àÄ (x y z : ‚Ñï), 2 * (x + y + z + 2 * x * y * z)^2 = (2 * x * y + 2 * y * z + 2 * z * x + 1)^2 + 2023 ‚Üî 
  (x = 3 ‚àß y = 3 ‚àß z = 2) ‚à®
  (x = 3 ‚àß y = 2 ‚àß z = 3) ‚à®
  (x = 2 ‚àß y = 3 ‚àß z = 3) ‚à®
  (x = 2 ‚àß y = 3 ‚àß z = 3) ‚à®
  (x = 3 ‚àß y = 2 ‚àß z = 3) ‚à®
  (x = 3 ‚àß y = 3 ‚àß z = 2) := 
by 
  sorry

end find_triples_of_positive_integers_l101_101018


namespace rounding_addition_to_100_correct_l101_101663

theorem rounding_addition_to_100_correct : 
  (125 + 96) % 100 = 21 ‚àß (125 + 96) / 100 = 2 ‚Üí
  round (125 + 96) / 100 * 100 = 200 := 
by 
  intros h 
  have h1 : 125 + 96 = 221 := by norm_num
  have h2 : 221 % 100 = 21 := by rw h1; norm_num
  have h3 : 221 / 100 = 2 := by rw h1; norm_num
  exact h

end rounding_addition_to_100_correct_l101_101663


namespace multiples_of_7_with_unit_digit_7_and_lt_150_l101_101099

/--
Given a positive integer n,
Let \(7n\) be a multiple of 7,
\(7n < 150\),
and \(7n \mod 10 = 7\),
prove there are 11 such multiples of 7.
-/
theorem multiples_of_7_with_unit_digit_7_and_lt_150 :
  ‚àÉ! (n : ‚Ñï), n ‚â§ 11 ‚àß ‚àÄ (m : ‚Ñï), (1 ‚â§ m ‚àß m ‚â§ n) ‚Üí (7 * (2 * m - 1) < 150 ‚àß (7 * (2 * m - 1)) % 10 = 7) := by
sorry

end multiples_of_7_with_unit_digit_7_and_lt_150_l101_101099


namespace range_of_a_l101_101638

noncomputable def is_odd_function (f : ‚Ñù ‚Üí ‚Ñù) :=
  ‚àÄ x : ‚Ñù, f (-x) = -f(x)

theorem range_of_a :
  (‚àÄ f : ‚Ñù ‚Üí ‚Ñù, (is_odd_function f) ‚àß (‚àÄ x : ‚Ñù, 0 ‚â§ x ‚Üí f x = x^2) ‚Üí
  (‚àÄ x : ‚Ñù, a ‚â§ x ‚àß x ‚â§ a + 2 ‚Üí f (x + a) ‚â• 2 * f x) ‚Üí a ‚àà Set.Ici (Real.sqrt 2)) :=
begin
  sorry
end

end range_of_a_l101_101638


namespace jackson_final_grade_l101_101633

def jackson_hours_playing_video_games : ‚Ñï := 9

def ratio_study_to_play : ‚Ñö := 1 / 3

def time_spent_studying (hours_playing : ‚Ñï) (ratio : ‚Ñö) : ‚Ñö := hours_playing * ratio

def points_per_hour_studying : ‚Ñï := 15

def jackson_grade (time_studied : ‚Ñö) (points_per_hour : ‚Ñï) : ‚Ñö := time_studied * points_per_hour

theorem jackson_final_grade :
  jackson_grade
    (time_spent_studying jackson_hours_playing_video_games ratio_study_to_play)
    points_per_hour_studying = 45 :=
by
  sorry

end jackson_final_grade_l101_101633


namespace travel_time_ratio_l101_101211

theorem travel_time_ratio 
  (T_NY_SF : ‚Ñï)
  (layover : ‚Ñï)
  (total_time : ‚Ñï)
  (T_NY_SF_val : T_NY_SF = 24)
  (layover_val : layover = 16)
  (total_time_val : total_time = 58)
  (eqn : ‚àÄ (T_NO_NY : ‚Ñï), T_NO_NY + layover + T_NY_SF = total_time) : 
  (T_NO_NY / T_NY_SF = 3/4) :=
by
  have T_NY_SF := T_NY_SF_val
  have layover := layover_val
  have total_time := total_time_val
  specialize eqn (total_time - layover - T_NY_SF)
  calc 
    (total_time - layover - T_NY_SF) / T_NY_SF
        = 18 / 24 : by sorry
        = 3 / 4   : by sorry
  sorry -- Proof should be added here

end travel_time_ratio_l101_101211


namespace circumcircle_fixed_point_l101_101955

open EuclideanGeometry

/-- Given the parabola P: y^2 = x, the tangents at two moving points A and B on it intersect at point C. 
Let D be the circumcenter of triangle ŒîABC. Prove that the circumcircle of triangle ŒîABD passes through 
the fixed point (1/4, 0). -/
theorem circumcircle_fixed_point (A B C D : Point) (F : Point) :
  ‚àÉ F : Point, (F.x = 1/4) ‚àß (F.y = 0) ‚Üí
  (on_parabola A) ‚àß (on_parabola B) ‚àß
  (tangent_intersects_at A B C) ‚àß
  (circumcenter ABC D) ‚Üí
  passes_through_circumcircle ABD F :=
begin
  sorry
end

def on_parabola (P : Point) : Prop := 
  P.y ^ 2 = P.x

def tangent_intersects_at (A B C : Point) : Prop := 
  ‚àÉ k1 k2 : ‚Ñù, 
  is_tangent A k1 ‚àß
  is_tangent B k2 ‚àß
  intersects A B C k1 k2

def circumcenter (A B C D : Point) : Prop := 
  is_circumcenter A B C D

def passes_through_circumcircle (A B D F : Point) : Prop := 
  is_on_circumcircle A B D F

attribute [instance] Mathlib_contact.transforms.circle

end circumcircle_fixed_point_l101_101955


namespace probability_at_least_one_trip_l101_101485

theorem probability_at_least_one_trip (p_A_trip : ‚Ñö) (p_B_trip : ‚Ñö)
  (h1 : p_A_trip = 1/4) (h2 : p_B_trip = 1/5) :
  (1 - ((1 - p_A_trip) * (1 - p_B_trip))) = 2/5 :=
by
  sorry

end probability_at_least_one_trip_l101_101485


namespace total_cost_of_deck_l101_101289

def num_rare_cards : ‚Ñï := 19
def num_uncommon_cards : ‚Ñï := 11
def num_common_cards : ‚Ñï := 30

def cost_per_rare_card : ‚Ñï := 1
def cost_per_uncommon_card : ‚Ñù := 0.50
def cost_per_common_card : ‚Ñù := 0.25

def cost_of_rare_cards : ‚Ñï := num_rare_cards * cost_per_rare_card
def cost_of_uncommon_cards : ‚Ñù := num_uncommon_cards * cost_per_uncommon_card
def cost_of_common_cards : ‚Ñù := num_common_cards * cost_per_common_card

def total_cost : ‚Ñù := cost_of_rare_cards + cost_of_uncommon_cards + cost_of_common_cards

theorem total_cost_of_deck : total_cost = 32 := by
  -- We will need to convert integers to real numbers for this addition
  have h1 : (cost_of_rare_cards : ‚Ñù) = 19 := by norm_cast
  rw [h1]
  have h2 : (num_uncommon_cards: ‚Ñù) * cost_per_uncommon_card = 5.5 := by norm_num
  have h3 : (num_common_cards: ‚Ñù) * cost_per_common_card = 7.5 := by norm_num
  calc
    (19 : ‚Ñù) + 5.5 + 7.5 = 32 := by norm_num

end total_cost_of_deck_l101_101289


namespace ellipse_foci_sum_l101_101639

-- Definitions for the problem's conditions:
def P (x y : ‚Ñù) := (x^2 / 25 + y^2 / 16 = 1)

def a : ‚Ñù := 5
def foci_dist := 10  -- because 2a = 10

-- Statement of the problem in Lean
theorem ellipse_foci_sum (x y : ‚Ñù) (F1 F2 : ‚Ñù) (hP : P x y) :
  |PF_1 + PF_2| = foci_dist :=
by sorry

end ellipse_foci_sum_l101_101639


namespace multiples_of_7_units_digit_7_l101_101091

theorem multiples_of_7_units_digit_7 (n : ‚Ñï) (h1 : n < 150) (h2 : ‚àÉ (k : ‚Ñï), n = 7 * k) (h3 : n % 10 = 7) : 
    ‚àÉ (m : ‚Ñï), m = 2 := 
by
  sorry

end multiples_of_7_units_digit_7_l101_101091


namespace seahorse_penguin_ratio_l101_101843

theorem seahorse_penguin_ratio :
  ‚àÉ S P : ‚Ñï, S = 70 ‚àß P = S + 85 ‚àß Nat.gcd 70 (S + 85) = 5 ‚àß 70 / Nat.gcd 70 (S + 85) = 14 ‚àß (S + 85) / Nat.gcd 70 (S + 85) = 31 :=
by
  sorry

end seahorse_penguin_ratio_l101_101843


namespace equal_BE_CF_l101_101902

open_locale classical
noncomputable theory

variables {A B C D E F M : Point}
variables (triangle_ABC : Triangle A B C)
variables (angle_bisector_AD : AngleBisector A D (LineThrough B C))
variables (CE_parallel_MB : Parallel (LineThrough C E) (LineThrough M B))
variables (BF_parallel_MC : Parallel (LineThrough B F) (LineThrough M C))

theorem equal_BE_CF
  (H1 : M ‚àà angle_bisector_AD)
  (H2 : CE_parallel_MB)
  (H3 : BF_parallel_MC) :
  distance B E = distance C F :=
by
  sorry

end equal_BE_CF_l101_101902


namespace polynomial_remainder_l101_101640

def Q (x : ‚Ñù) : ‚Ñù := sorry -- Define Q(x) as some polynomial (unknown)

-- Conditions given in the problem
def cond1 : Prop := ‚àÉ R : ‚Ñù ‚Üí ‚Ñù, Q(x) = (x - 15) * R(x) + 8
def cond2 : Prop := ‚àÉ S : ‚Ñù ‚Üí ‚Ñù, Q(x) = (x - 10) * S(x) + 3

-- Question: the remainder when Q(x) is divided by (x-10)(x-15)
theorem polynomial_remainder : cond1 ‚àß cond2 ‚Üí ‚àÉ R : ‚Ñù ‚Üí ‚Ñù, Q(x) = (x - 10) * (x - 15) * R(x) + (x - 7) := 
by
  sorry

end polynomial_remainder_l101_101640


namespace find_alpha_l101_101964

-- Given vectors
def a (x : ‚Ñù) : ‚Ñù √ó ‚Ñù := (2 * Real.cos x, 2 * Real.sin x)
def b (x : ‚Ñù) : ‚Ñù √ó ‚Ñù := (Real.sqrt 3 * Real.cos x, Real.cos x)

-- Define the function f
def f (x : ‚Ñù) : ‚Ñù :=
  let dot_product := (a x).1 * (b x).1 + (a x).2 * (b x).2
  dot_product - Real.sqrt 3

-- Given conditions
def cond1 : Prop :=
  f (Œ± / 2 - œÄ / 6) - f (Œ± / 2 + œÄ / 12) = Real.sqrt 6

def cond2 (Œ± : ‚Ñù) : Prop :=
  Œ± ‚àà Set.Ioo (œÄ / 2) œÄ

-- Prove Œ± = 7œÄ/12 or Œ± = 11œÄ/12 given the conditions
theorem find_alpha (Œ± : ‚Ñù) (h1 : cond1 Œ±) (h2 : cond2 Œ±) : Œ± = 7 * œÄ / 12 ‚à® Œ± = 11 * œÄ / 12 :=
  sorry

end find_alpha_l101_101964


namespace bus_speed_calculation_l101_101883

noncomputable def bus_speed_excluding_stoppages : ‚Ñù :=
  let effective_speed_with_stoppages := 50 -- kmph
  let stoppage_time_in_minutes := 13.125 -- minutes per hour
  let stoppage_time_in_hours := stoppage_time_in_minutes / 60 -- convert to hours
  let effective_moving_time := 1 - stoppage_time_in_hours -- effective moving time in one hour
  let bus_speed := (effective_speed_with_stoppages * 60) / (60 - stoppage_time_in_minutes) -- calculate bus speed
  bus_speed

theorem bus_speed_calculation : bus_speed_excluding_stoppages = 64 := by
  sorry

end bus_speed_calculation_l101_101883


namespace angle_q_of_extended_sides_of_regular_decagon_l101_101680

theorem angle_q_of_extended_sides_of_regular_decagon :
  ‚àÄ (A B C D E F G H I J Q : Type) [regular_decagon A B C D E F G H I J]
    (extended_sides_meet : extended_sides_meet Q A J D E),
  measure_angle Q = 144 :=
by sorry

end angle_q_of_extended_sides_of_regular_decagon_l101_101680


namespace triangle_area_afb_l101_101626

noncomputable def length_of_median (a b c : ‚Ñù) : ‚Ñù :=
  real.sqrt ((2*b^2 + 2*c^2 - a^2) / 4)

theorem triangle_area_afb:
  ‚àÉ (m n : ‚Ñï),
  (‚àÄ (A B C D E F : Type)
    (AD CE AB : ‚Ñù)
    (hA : A ‚àà ‚Ñù)
    (hB : B ‚àà ‚Ñù) 
    (hC : C ‚àà ‚Ñù) 
    (hAD : length_of_median AB BC AC = 18)
    (hCE : length_of_median CA AB BC = 27)
    (hAB : AB = 24)
    (hEF : CE > 0)
    (hF : intersects_circumcircle CE F),
  area (‚ñ≥ A F B) = m * real.sqrt n ‚àß
  ‚àÄ (p : ‚Ñï) (hp : p.prime), ¬¨(p^2 ‚à£ n)) :=
begin
  sorry
end

end triangle_area_afb_l101_101626


namespace amc_proposed_by_Dorlir_Ahmeti_Albania_l101_101027

-- Define the problem statement, encapsulating the conditions and the final inequality.
theorem amc_proposed_by_Dorlir_Ahmeti_Albania
  (a b c : ‚Ñù) 
  (h_pos : 0 < a ‚àß 0 < b ‚àß 0 < c) 
  (h_cond : a * b + b * c + c * a = 3) :
  (a / Real.sqrt (a^3 + 5) + b / Real.sqrt (b^3 + 5) + c / Real.sqrt (c^3 + 5) ‚â§ Real.sqrt 6 / 2) := 
by 
  sorry -- Proof steps go here, which are omitted as per the requirement.

end amc_proposed_by_Dorlir_Ahmeti_Albania_l101_101027


namespace add_fractions_add_fractions_as_mixed_l101_101833

theorem add_fractions : (3 / 4) + (5 / 6) + (4 / 3) = (35 / 12) := sorry

theorem add_fractions_as_mixed : (3 / 4) + (5 / 6) + (4 / 3) = 2 + 11 / 12 := sorry

end add_fractions_add_fractions_as_mixed_l101_101833


namespace max_area_triangle_obc_l101_101068

theorem max_area_triangle_obc :
  let ellipse := Œª x y, (x^2) / 4 + (y^2) / 3 = 1
  let B := (1, 3 / 2)
  ‚àÉ C : ‚Ñù √ó ‚Ñù, 
    ellipse C.1 C.2 ‚àß 
    (‚àÉ l : ‚Ñù √ó ‚Ñù ‚Üí Prop, l B ‚àß l C) ‚Üí
    (‚àÉ t : ‚Ñù, l (0, 0) ‚àß l (1, 3 / 2) ‚àß l C) ‚Üí
      let area := Œª O B C, 1/2 * abs (O.1 * (B.2 - C.2) + B.1 * (C.2 - O.2) + C.1 * (O.2 - B.2))
      area (0, 0) B C = sqrt 3 :=
sorry

end max_area_triangle_obc_l101_101068


namespace count_non_factorial_tails_lt_2500_l101_101446

def f (m : ‚Ñï) : ‚Ñï := 
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + ... -- Continue as needed

theorem count_non_factorial_tails_lt_2500 : 
  #{ n : ‚Ñï | n < 2500 ‚àß ¬¨ (‚àÉ m : ‚Ñï, f(m) = n) } = 4 :=
by sorry

end count_non_factorial_tails_lt_2500_l101_101446


namespace room_width_proof_l101_101228

theorem room_width_proof
  (length_room : ‚Ñù) (veranda_width : ‚Ñù) (area_veranda : ‚Ñù) (w : ‚Ñù) 
  (h1 : length_room = 18)
  (h2 : veranda_width = 2)
  (h3 : area_veranda = 136)
  (h4 : 22 * (w + 4) - 18 * w = 136) :
  w = 12 :=
by
  rw [‚Üêh1, ‚Üêh2, ‚Üêh3] at h4
  sorry

end room_width_proof_l101_101228


namespace max_trees_cut_l101_101598

theorem max_trees_cut (rows cols : ‚Ñï) (total_trees : ‚Ñï) (grid : set (‚Ñï √ó ‚Ñï))
  (h1 : rows = 100)
  (h2 : cols = 100)
  (h3 : total_trees = rows * cols)
  (h4 : grid = set.univ.filter (Œª p, p.1 < rows ‚àß p.2 < cols)) :
  ‚àÉ max_cut_trees : ‚Ñï, max_cut_trees = 2500 ‚àß 
  (‚àÄ stumps : set (‚Ñï √ó ‚Ñï), stumps ‚äÜ grid ‚àß stumps.size = max_cut_trees ‚Üí 
    ‚àÄ s1 s2 ‚àà stumps, s1 ‚â† s2 ‚Üí s1.1 ‚â† s2.1 ‚àß s1.2 ‚â† s2.2) :=
begin
  sorry
end

end max_trees_cut_l101_101598


namespace find_n_solution_l101_101524

open Real

noncomputable def find_n (x : ‚Ñù) (n : ‚Ñù) : Prop :=
  ln (sin x) + ln (cos x) = -1 ‚àß
  tan x = sqrt 3 ‚àß
  ln (sin x + cos x) = (1 / 3) * (ln n - 1)

theorem find_n_solution : ‚àÉ n, ‚àÉ x, find_n x (exp (3 * (-1/2 + ln (1 + 1 / sqrt (sqrt 3))) + 1)) :=
by
  sorry

end find_n_solution_l101_101524


namespace triangle_inequality_l101_101051

theorem triangle_inequality
  (A B C P : Point)
  (S S_a S_b S_c : ‚Ñù)
  (PA PB PC : ‚Ñù)
  (R : ‚Ñù)
  (triangle_ABC : Triangle A B C)
  (P_inside_ABC : PointInsideTriangle P triangle_ABC)
  (area_ABC : Area triangle_ABC = S)
  (area_BPC : Area (Triangle B P C) = S_a)
  (area_CPA : Area (Triangle C P A) = S_b)
  (area_APB : Area (Triangle A P B) = S_c)
  (circumradius : Circumradius triangle_ABC = R) :
  (S_a / PA^2) + (S_b / PB^2) + (S_c / PC^2) ‚â• (S / R^2) := 
sorry

end triangle_inequality_l101_101051


namespace ratio_of_lions_to_penguins_is_simplified_correctly_l101_101844

variable (L P : ‚Ñï)
variable (h1 : L = 30)
variable (h2 : P = 112)

theorem ratio_of_lions_to_penguins_is_simplified_correctly : L = 30 ‚Üí P = 112 ‚Üí Nat.gcd L P = 2 ‚Üí (L / 2) = 15 ‚àß (P / 2) = 56 :=
by
  intros
  have hL : L = 30 := by assumption
  have hP : P = 112 := by assumption
  have gcd_2 : Nat.gcd L P = 2 := by assumption
  split
  { rw [hL]
    norm_num }
  { rw [hP]
    norm_num }


end ratio_of_lions_to_penguins_is_simplified_correctly_l101_101844


namespace min_expression_value_l101_101026

theorem min_expression_value (a b c : ‚Ñù) (h‚ÇÄ : c > b) (h‚ÇÅ : b > a) (h‚ÇÇ : c ‚â† 0) :
  ‚àÉ k : ‚Ñù, k = 2 ‚àß (‚àÄ a b c, c > b ‚Üí b > a ‚Üí c ‚â† 0 ‚Üí k ‚â§ (a+b)^2+(b+c)^2+(c-a)^2 / c^2) :=
begin
  use 2,
  split,
  { refl, },
  { intros a b c hc1 hb1 hc2,
    let expr := (a + b)^2 + (b + c)^2 + (c - a)^2,
    let denom := c^2,
    have expr_nonneg : expr ‚â• 0, from
      add_nonneg (add_nonneg (sq_nonneg _) (sq_nonneg _)) (sq_nonneg _),
    have ratio_nonneg : expr / denom ‚â• 0, from div_nonneg expr_nonneg (sq_nonneg _),
    have : ‚àÄ (a b c : ‚Ñù), c > b ‚Üí b > a ‚Üí c ‚â† 0 ‚Üí 2 ‚â§ (a + b)^2 + (b + c)^2 + (c - a)^2 / c^2, 
      sorry,
    from this _ _ _ hc1 hb1 hc2, }
end

end min_expression_value_l101_101026


namespace num_white_black_balls_prob_2_black_balls_dist_exp_black_balls_l101_101357

-- Problem 1: Number of white and black balls
theorem num_white_black_balls (n m : ‚Ñï) (h1 : n + m = 10)
  (h2 : (10 - m) = 4) : n = 4 ‚àß m = 6 :=
by sorry

-- Problem 2: Probability of drawing exactly 2 black balls with replacement
theorem prob_2_black_balls (p_black_draw : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñö)
  (h1 : ‚àÄ n m, p_black_draw n m = (6/10)^(n-m) * (4/10)^m)
  (h2 : p_black_draw 2 3 = 54/125) : p_black_draw 2 3 = 54 / 125 :=
by sorry

-- Problem 3: Distribution and Expectation of number of black balls drawn without replacement
theorem dist_exp_black_balls (prob_X : ‚Ñï ‚Üí ‚Ñö) (expect_X : ‚Ñö)
  (h1 : prob_X 0 = 2/15) (h2 : prob_X 1 = 8/15) (h3 : prob_X 2 = 1/3)
  (h4 : expect_X = 6 / 5) : ‚àÄ k, prob_X k = match k with
    | 0 => 2/15
    | 1 => 8/15
    | 2 => 1/3
    | _ => 0 :=
by sorry

end num_white_black_balls_prob_2_black_balls_dist_exp_black_balls_l101_101357


namespace G_F_E_collinear_l101_101139

noncomputable def cyclic_quad (A B C D : Type) := sorry

theorem G_F_E_collinear (A B C D E F G H I J : Type) (circumcircle : ‚àÄ P Q R : Type, Prop) (inscribed : circumcircle A B C)
  (intersect_AC_BD_F : the_diagonals A C (D) intersect_at F)
  (angle_bisectors_intersect_BAC_CDC_G : the_angle_bisectors BAC CDB intersect G)
  (AG_intersects_BD_H : AG intersects BD at H)
  (DG_intersects_AC_I : DG intersects AC at I)
  (EG_intersects_AD_J : EG intersects AD at J)
  (cyclic_quad_FHGI : cyclic_quad F H G I)
  (JA_FC_GH_JD_FB_GI : JA * FC * GH = JD * FB * GI) :
  collinear G F E := sorry

end G_F_E_collinear_l101_101139


namespace carA_total_distance_2016_meetings_l101_101416

noncomputable def distanceTravelledByCarA : ‚Ñï ‚Üí ‚Ñù 
| 2016 := 1813900

theorem carA_total_distance_2016_meetings
  (a_to_b_speed : ‚Ñù) (b_to_a_speed : ‚Ñù)
  (b_to_a_speed_carB : ‚Ñù) (a_to_b_speed_carB : ‚Ñù)
  (distance_a_b : ‚Ñù) :
  a_to_b_speed = 40 ‚àß b_to_a_speed = 50 ‚àß
  b_to_a_speed_carB = 50 ‚àß a_to_b_speed_carB = 40 ‚àß
  distance_a_b = 900 ‚Üí 
  distanceTravelledByCarA 2016 = 1813900 :=
by
  sorry

end carA_total_distance_2016_meetings_l101_101416


namespace ratio_volumes_of_spheres_l101_101583

theorem ratio_volumes_of_spheres (r R : ‚Ñù) (hratio : (4 * œÄ * r^2) / (4 * œÄ * R^2) = 4 / 9) :
    (4 / 3 * œÄ * r^3) / (4 / 3 * œÄ * R^3) = 8 / 27 := 
by {
  sorry
}

end ratio_volumes_of_spheres_l101_101583


namespace find_angle_C_find_sin_A_l101_101152

noncomputable def triangleABC {A B C : ‚Ñù} (a b c : ‚Ñù) : Prop :=
  2 * c * cos A = 2 * b - sqrt 3 * a

theorem find_angle_C (a b c : ‚Ñù) (A : ‚Ñù) (h : triangleABC a b c) : C = œÄ / 6 :=
  sorry

theorem find_sin_A (a b c : ‚Ñù) (A C : ‚Ñù) (area : ‚Ñù) (h_area : area = 2 * sqrt 3) 
  (h_b : b = 2) (h_C : C = œÄ / 6) (h : triangleABC a b c) : sin A = sqrt 7 / 7 :=
  sorry

end find_angle_C_find_sin_A_l101_101152


namespace rational_linear_independent_sqrt_prime_l101_101336

theorem rational_linear_independent_sqrt_prime (p : ‚Ñï) (hp : Nat.Prime p) (m n m1 n1 : ‚Ñö) :
  m + n * Real.sqrt p = m1 + n1 * Real.sqrt p ‚Üí m = m1 ‚àß n = n1 :=
sorry

end rational_linear_independent_sqrt_prime_l101_101336


namespace sum_of_divisors_37_l101_101310

theorem sum_of_divisors_37 : ‚àë d in (Finset.filter (fun d => d > 0 ‚àß 37 % d = 0) (Finset.range (37 + 1))), d = 38 :=
by
  sorry

end sum_of_divisors_37_l101_101310


namespace greatest_integer_sum_divisors_2013_l101_101033

-- Let s(n) be a function that returns the sum of squares of positive integers less or equal to n that are relatively prime to n
def s (n : ‚Ñï) : ‚Ñï := 
  ‚àë k in finset.filter (Œª k, Nat.gcd k n = 1) (finset.range (n + 1)), k^2

-- Define the proposition that given the prime factorization and divisors of 2013, 
-- the greatest integer less than or equal to the sum of s(n)/n^2 over all divisors equals 345
theorem greatest_integer_sum_divisors_2013 :
  ‚àë n in finset.filter (Œª d, 2013 % d = 0) (finset.range (2013 + 1)), (s n : ‚Ñö) / (n ^ 2) ‚â§ 345 :=
  sorry

end greatest_integer_sum_divisors_2013_l101_101033


namespace prime_power_of_n_l101_101683

theorem prime_power_of_n (n : ‚Ñï) (h : Nat.Prime (4^n + 2^n + 1)) : ‚àÉ k : ‚Ñï, n = 3^k := 
sorry

end prime_power_of_n_l101_101683


namespace pyramid_volume_transformation_l101_101823

theorem pyramid_volume_transformation (V : ‚Ñù) (l w h : ‚Ñù) 
  (hV : V = (1 / 3) * l * w * h) 
  (new_l : ‚Ñù := 3 * l)
  (new_w : ‚Ñù := (1 / 2) * w)
  (new_h : ‚Ñù := 1.25 * h) :
  (1 / 3) * new_l * new_w * new_h = 225 := 
by
  have hV' := V -- original volume, given V = 60
  have l_extended := 3
  have w_extended := 0.5
  have h_extended := 1.25
  calc
    (1 / 3) * (3 * l) * ((1/2) * w) * (1.25 * h)
        = V * l_extended * w_extended * h_extended : by simp [hV, mul_assoc, mul_comm, mul_left_comm]
    ... = 225 : by { rw hV, norm_num }

end pyramid_volume_transformation_l101_101823


namespace dot_product_of_CA_CB_l101_101124

variable {Œ± : Type*} [Field Œ±] [LinearOrderedField Œ±]

noncomputable def triangle_dot_product (a b c : Œ±) (sin B sin C : Œ±) 
  (h1 : a^2 + b^2 - c^2 = sqrt 3 * a * b)
  (h2 : a * c * sin B = 2 * sqrt 3 * sin C) : Œ± :=
  let ab := 2 * sqrt 3 in
  ab * (sqrt 3 / 2)

theorem dot_product_of_CA_CB 
  {a b c sin_B sin_C : Œ±}
  (h1 : a^2 + b^2 - c^2 = sqrt 3 * a * b)
  (h2 : a * c * sin_B = 2 * sqrt 3 * sin_C) : 
  triangle_dot_product a b c sin_B sin_C h1 h2 = 3 := by
  sorry

end dot_product_of_CA_CB_l101_101124


namespace distance_between_parallel_lines_l101_101741

theorem distance_between_parallel_lines (r d : ‚Ñù) 
  (h1 : ‚àÉ p1 p2 p3 : ‚Ñù, p1 = 40 ‚àß p2 = 40 ‚àß p3 = 36) 
  (h2 : ‚àÄ Œ∏ : ‚Ñù, ‚àÉ A B C D : ‚Ñù ‚Üí ‚Ñù, 
    (A Œ∏ - B Œ∏) = 40 ‚àß (C Œ∏ - D Œ∏) = 36) : d = 6 :=
sorry

end distance_between_parallel_lines_l101_101741


namespace calculate_m_plus_n_l101_101855

theorem calculate_m_plus_n :
  let product := ‚àè k in finset.range (22), (csc ((4 * k + 1 - 3 : ‚Ñö) * œÄ / 180)) ^ 2
  ‚àÉ (m n : ‚Ñï), m > 1 ‚àß n > 1 ‚àß product = m^n ‚àß (m + n = 23) :=
by
  let product := ‚àè k in finset.range (22), (csc ((4 * k + 1 - 3 : ‚Ñö) * œÄ / 180)) ^ 2
  use 2
  use 21
  split
  { exact nat.succ_pos' 1 }
  split
  { exact nat.succ_pos' 20 }
  split
  { sorry }
  { refl }

end calculate_m_plus_n_l101_101855


namespace socks_pair_count_l101_101988

theorem socks_pair_count :
  let white := 5
  let brown := 5
  let blue := 3
  let green := 2
  (white * brown) + (white * blue) + (white * green) + (brown * blue) + (brown * green) + (blue * green) = 81 :=
by
  intros
  sorry

end socks_pair_count_l101_101988


namespace solve_sqrt_equation_l101_101209

theorem solve_sqrt_equation (x : ‚Ñù) :
  (sqrt (9 + sqrt (27 + 3 * x)) + sqrt (3 + sqrt (9 + x)) = 3 + 3 * sqrt 3) ‚Üí x = 1 :=
by
  sorry

end solve_sqrt_equation_l101_101209


namespace zoo_total_animals_l101_101389

theorem zoo_total_animals :
  let tiger_enclosures := 4
  let zebra_enclosures := tiger_enclosures * 2
  let giraffe_enclosures := zebra_enclosures * 3
  let tigers := tiger_enclosures * 4
  let zebras := zebra_enclosures * 10
  let giraffes := giraffe_enclosures * 2
  let total_animals := tigers + zebras + giraffes
  in total_animals = 144 := by
  sorry

end zoo_total_animals_l101_101389


namespace find_XY_squared_l101_101647

axiom acute_scalene_triangle (A B C : Point) : Scalene A B C ‚àß Acute A B C

noncomputable def triangle_conditions
  (T X Y : Point) (A B C : Point)
  (BT CT BC TX TY XY : ‚Ñù) : Prop :=
  acute_scalene_triangle A B C ‚àß
  BT = 18 ‚àß CT = 18 ‚àß BC = 26 ‚àß
  (TX^2 + TY^2 + XY^2 = 1420)

theorem find_XY_squared 
  (T X Y A B C : Point) 
  (BT CT BC TX TY XY : ‚Ñù)
  (h : triangle_conditions T X Y A B C BT CT BC TX TY XY) :
  XY^2 = 473 :=
sorry

end find_XY_squared_l101_101647


namespace sum_of_divisors_37_l101_101315

theorem sum_of_divisors_37 : ‚àë d in (finset.filter (Œª d, 37 % d = 0) (finset.range 38)), d = 38 :=
by {
  sorry
}

end sum_of_divisors_37_l101_101315


namespace sum_condition_a_n_correct_T_n_correct_l101_101514

noncomputable def S_n (n : ‚Ñï) : ‚Ñù := sorry

def a_n (n : ‚Ñï) : ‚Ñï := 2 * n - 1

def b_n (q : ‚Ñù) (n : ‚Ñï) : ‚Ñù := q ^ (a_n n)

def T_n (q : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  if q ‚â† 1 then 
    (1 / (q^4 - 1)) * (1 - 1 / q^(4 * n))
  else 
    n

theorem sum_condition : S_4 = 16 ‚àß S_6 = 36 := sorry

theorem a_n_correct (n : ‚Ñï) : a_n n = 2 * n - 1 :=
  sorry

theorem T_n_correct (q : ‚Ñù) (n : ‚Ñï) (hq : q > 0) : 
  T_n q n = 
    if q ‚â† 1 then 
      (1 / (q^4 - 1)) * (1 - 1 / q^(4 * n))
    else 
      n :=
  sorry

end sum_condition_a_n_correct_T_n_correct_l101_101514


namespace non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101440

def g (m : Nat) : Nat :=
  let f k := m / k
  f 5 + f 25 + f 125 + f 625 + f 3125 + f 15625 + f 78125 + f 390625 + f 1953125 + f 9765625 + f 48828125 + f 244140625 + f 1220703125 + f 6103515625 + f 30517578125 -- continue as needed

def is_factorial_tail (n : Nat) : Prop :=
  ‚àÉ m : Nat, g m = n

def count_factorial_tails (N : Nat) : Nat :=
  (List.range N).filter (Œª n, is_factorial_tail n).length

theorem non_factorial_tails_lemma : count_factorial_tails 2500 = 2000 := sorry

theorem count_non_factorial_tails (N : Nat) : Prop :=
  let total := N - 1
  total - count_factorial_tails N = 499

theorem solution : count_non_factorial_tails 2500 := sorry

end non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101440


namespace other_number_is_7_l101_101880

-- Given conditions
variable (a b : ‚Ñ§)
variable (h1 : 2 * a + 3 * b = 110)
variable (h2 : a = 32 ‚à® b = 32)

-- The proof goal
theorem other_number_is_7 : (a = 7 ‚àß b = 32) ‚à® (a = 32 ‚àß b = 7) :=
by
  sorry

end other_number_is_7_l101_101880


namespace average_price_per_racket_l101_101381

theorem average_price_per_racket (total_amount : ‚Ñï) (pairs_sold : ‚Ñï) (expected_average : ‚Ñö) 
  (h1 : total_amount = 637) (h2 : pairs_sold = 65) : 
  expected_average = total_amount / pairs_sold := 
by
  sorry

end average_price_per_racket_l101_101381


namespace total_surface_area_of_resulting_solid_is_12_square_feet_l101_101386

noncomputable def height_of_D :=
  let h_A := 1 / 4
  let h_B := 1 / 5
  let h_C := 1 / 8
  2 - (h_A + h_B + h_C)

theorem total_surface_area_of_resulting_solid_is_12_square_feet :
  let h_A := 1 / 4
  let h_B := 1 / 5
  let h_C := 1 / 8
  let h_D := 2 - (h_A + h_B + h_C)
  let top_and_bottom_area := 4 * 2
  let side_area := 2 * (h_A + h_B + h_C + h_D)
  top_and_bottom_area + side_area = 12 := by
  sorry

end total_surface_area_of_resulting_solid_is_12_square_feet_l101_101386


namespace non_factorial_tails_lt_2500_l101_101438

-- Define the function f(m)
def f (m: ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625

-- Define what it means to be a factorial tail
def is_factorial_tail (n: ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, f(m) = n

-- Define the statement to be proved
theorem non_factorial_tails_lt_2500 : 
  (finset.range 2500).filter (Œª n, ¬¨ is_factorial_tail n).card = 499 :=
by
  sorry

end non_factorial_tails_lt_2500_l101_101438


namespace inverse_variation_l101_101342

theorem inverse_variation :
  (‚àÉ k : ‚Ñù, ‚àÄ y : ‚Ñù, y ‚â† 0 ‚Üí (x = k / y^2)) ‚Üí
  (x = 1 ‚Üí (‚àÉ y : ‚Ñù, x = 1 ‚àß y = 9 ‚àß x = 0.1111111111111111 ‚Üí y = 3)) :=
begin
  sorry
end

end inverse_variation_l101_101342


namespace multiples_of_7_units_digit_7_l101_101093

theorem multiples_of_7_units_digit_7 (n : ‚Ñï) (h1 : n < 150) (h2 : ‚àÉ (k : ‚Ñï), n = 7 * k) (h3 : n % 10 = 7) : 
    ‚àÉ (m : ‚Ñï), m = 2 := 
by
  sorry

end multiples_of_7_units_digit_7_l101_101093


namespace scientific_notation_of_1040000000_l101_101421

theorem scientific_notation_of_1040000000 : (1.04 * 10^9 = 1040000000) :=
by
  -- Math proof steps can be added here
  sorry

end scientific_notation_of_1040000000_l101_101421


namespace tangent_line_at_1_l101_101948

noncomputable def f (x : ‚Ñù) : ‚Ñù := Real.log x + 2 * x^2 - 4 * x

theorem tangent_line_at_1 :
  let slope := (f' 1)
  let point := (1, f 1)
  let tangent_line_eq (x y : ‚Ñù) := y = slope * (x - point.1) + point.2
  ‚àÉ y, tangent_line_eq (x - 1) = x - y - 3 := sorry

end tangent_line_at_1_l101_101948


namespace students_weight_decrease_l101_101221

theorem students_weight_decrease (N : ‚Ñï) 
  (avg_decrease : 3) 
  (weight_old : 80) 
  (weight_new : 62) 
  (weight_difference : 18) 
  (avg_weight_decrease: 3 * N = 18) : 
  N = 6 :=
by
  sorry

end students_weight_decrease_l101_101221


namespace Q_evaluation_at_2_l101_101734

noncomputable def Q : Polynomial ‚Ñö := 
  (Polynomial.X^2 + Polynomial.C 4)^2

theorem Q_evaluation_at_2 : 
  Q.eval 2 = 64 :=
by 
  -- We'll skip the proof as per the instructions.
  sorry

end Q_evaluation_at_2_l101_101734


namespace ads_not_blocked_not_interesting_l101_101569

theorem ads_not_blocked_not_interesting:
  (let A_blocks := 0.75
   let B_blocks := 0.85
   let C_blocks := 0.95
   let A_let_through := 1 - A_blocks
   let B_let_through := 1 - B_blocks
   let C_let_through := 1 - C_blocks
   let all_let_through := A_let_through * B_let_through * C_let_through
   let interesting := 0.15
   let not_interesting := 1 - interesting
   (all_let_through * not_interesting) = 0.00159375) :=
  sorry

end ads_not_blocked_not_interesting_l101_101569


namespace volume_surface_area_ratio_eq_l101_101199

noncomputable
def sphere_radius (R : ‚Ñù) : ‚Ñù := R

noncomputable
def sphere_volume (R : ‚Ñù) : ‚Ñù := (4 / 3) * Real.pi * R^3

noncomputable
def sphere_surface_area (R : ‚Ñù) : ‚Ñù := 4 * Real.pi * R^2

noncomputable
def truncated_cone_volume (h r1 r2 : ‚Ñù) : ‚Ñù := (1 / 3) * Real.pi * h * (r1^2 + r1 * r2 + r2^2)

noncomputable
def truncated_cone_surface_area (h r1 r2 : ‚Ñù) : ‚Ñù :=
  let l := Real.sqrt (h^2 + (r2 - r1)^2)
  œÄ * r1^2 + œÄ * r2^2 + œÄ * (r1 + r2) * l

theorem volume_surface_area_ratio_eq (R h r1 r2 : ‚Ñù) 
  (Vs := sphere_volume R)
  (As := sphere_surface_area R)
  (Vc := truncated_cone_volume h r1 r2)
  (Ac := truncated_cone_surface_area h r1 r2) :
  Vs / Vc = As / Ac :=
by sorry

end volume_surface_area_ratio_eq_l101_101199


namespace evaluate_expression_l101_101882

theorem evaluate_expression : 
  ( (5 ^ 2014) ^ 2 - (5 ^ 2012) ^ 2 ) / ( (5 ^ 2013) ^ 2 - (5 ^ 2011) ^ 2 ) = 25 := 
by sorry

end evaluate_expression_l101_101882


namespace inequality_proof_l101_101990

variable {A B C A' B' C' G A‚ÇÅ B‚ÇÅ C‚ÇÅ : Point}
variable {AB BC CA A'B' B'C' C'A' AG GA' GA‚ÇÅ GB GB' GC GC' CG' : ‚Ñù}
variable {ABC A'B'C' : Triangle}

-- Given conditions
def areCongruent (ABC A'B'C' : Triangle) : Prop :=
  (AB = A'B') ‚àß (BC = B'C') ‚àß (CA = C'A')

def isCentroid (G : Point) (ABC : Triangle) : Prop :=
  G = (A + B + C) / 3

def intersectionPoint (P : Point) (circle1 circle2 : Circle) : Point :=
  -- Definition of intersection point (contextual definition)
  sorry

-- Define points and circles
def A1 : Point := intersectionPoint A' (circle_with_diameter AA') (circle_with_center_radius A' (distance A' G))
def B1 : Point := intersectionPoint B' (circle_with_diameter BB') (circle_with_center_radius B' (distance B' G))
def C1 : Point := intersectionPoint C' (circle_with_diameter CC') (circle_with_center_radius C' (distance C' G))

-- Final proof problem statement
theorem inequality_proof 
  (h1 : areCongruent ABC A'B'C')
  (h2 : isCentroid G ABC)
  (h3 : AA‚ÇÅ = distance A A1)
  (h4 : BB‚ÇÅ = distance B B1)
  (h5 : CC‚ÇÅ = distance C C1) : 
  AA‚ÇÅ^2 + BB‚ÇÅ^2 + CC‚ÇÅ^2 ‚â§ AB^2 + BC^2 + CA^2 :=
sorry

end inequality_proof_l101_101990


namespace angle_relationship_l101_101623

open Real

variables (A B C D : Point)
variables (AB AC AD : ‚Ñù)
variables (CAB DAC BDC DBC : ‚Ñù)
variables (k : ‚Ñù)

-- Given conditions
axiom h1 : AB = AC
axiom h2 : AC = AD
axiom h3 : DAC = k * CAB

-- Proof to be shown
theorem angle_relationship : DBC = k * BDC :=
  sorry

end angle_relationship_l101_101623


namespace vince_savings_l101_101299

-- Define constants and conditions
def earnings_per_customer : ‚Ñï := 18
def monthly_expenses : ‚Ñï := 280
def percentage_for_recreation : ‚Ñï := 20
def number_of_customers : ‚Ñï := 80

-- Function to calculate total earnings
def total_earnings (customers : ‚Ñï) (earnings_per_customer : ‚Ñï) : ‚Ñï :=
  customers * earnings_per_customer

-- Function to calculate amount allocated for recreation and relaxation
def recreation_amount (total_earnings : ‚Ñï) (percentage : ‚Ñï) : ‚Ñï :=
  total_earnings * percentage / 100

-- Function to calculate total expenses
def total_monthly_expenses (base_expenses : ‚Ñï) (recreation : ‚Ñï) : ‚Ñï :=
  base_expenses + recreation

-- Function to calculate savings
def savings (total_earnings : ‚Ñï) (total_expenses : ‚Ñï) : ‚Ñï :=
  total_earnings - total_expenses

theorem vince_savings :
  let earnings := total_earnings number_of_customers earnings_per_customer,
      recreation := recreation_amount earnings percentage_for_recreation,
      expenses := total_monthly_expenses monthly_expenses recreation
  in savings earnings expenses = 872 :=
by
  sorry

end vince_savings_l101_101299


namespace multiples_of_7_units_digit_7_l101_101092

theorem multiples_of_7_units_digit_7 (n : ‚Ñï) (h1 : n < 150) (h2 : ‚àÉ (k : ‚Ñï), n = 7 * k) (h3 : n % 10 = 7) : 
    ‚àÉ (m : ‚Ñï), m = 2 := 
by
  sorry

end multiples_of_7_units_digit_7_l101_101092


namespace kitten_tail_percentage_increase_l101_101153

theorem kitten_tail_percentage_increase 
    (L1 : ‚Ñù) (L3 : ‚Ñù) (h1 : L1 = 16) (h3 : L3 = 25) : 
    ‚àÉ P : ‚Ñù, L3 = L1 * (1 + P / 100) ^ 2 ‚àß P = 25 :=
by {
    use 25,
    rw [h1, h3],
    norm_num,
    sorry
}

end kitten_tail_percentage_increase_l101_101153


namespace original_number_l101_101813

theorem original_number (N y x : ‚Ñï) 
  (h1: N + y = 54321)
  (h2: N = 10 * y + x)
  (h3: 11 * y + x = 54321)
  (h4: x = 54321 % 11)
  (hy: y = 4938) : 
  N = 49383 := 
  by 
  sorry

end original_number_l101_101813


namespace unique_poly_degree_4_l101_101737

theorem unique_poly_degree_4 
  (Q : ‚Ñö[X]) 
  (h_deg : Q.degree = 4) 
  (h_lead_coeff : Q.leading_coeff = 1)
  (h_root : Q.eval (sqrt 3 + sqrt 7) = 0) : 
  Q = X^4 - 12 * X^2 + 16 ‚àß Q.eval 2 = 0 :=
by sorry

end unique_poly_degree_4_l101_101737


namespace multiples_of_7_with_unit_digit_7_and_lt_150_l101_101102

/--
Given a positive integer n,
Let \(7n\) be a multiple of 7,
\(7n < 150\),
and \(7n \mod 10 = 7\),
prove there are 11 such multiples of 7.
-/
theorem multiples_of_7_with_unit_digit_7_and_lt_150 :
  ‚àÉ! (n : ‚Ñï), n ‚â§ 11 ‚àß ‚àÄ (m : ‚Ñï), (1 ‚â§ m ‚àß m ‚â§ n) ‚Üí (7 * (2 * m - 1) < 150 ‚àß (7 * (2 * m - 1)) % 10 = 7) := by
sorry

end multiples_of_7_with_unit_digit_7_and_lt_150_l101_101102


namespace concentric_circles_ratio_l101_101747

theorem concentric_circles_ratio (R r k : ‚Ñù) (hr : r > 0) (hRr : R > r) (hk : k > 0)
  (area_condition : œÄ * (R^2 - r^2) = k * œÄ * r^2) :
  R / r = Real.sqrt (k + 1) :=
by
  sorry

end concentric_circles_ratio_l101_101747


namespace smallest_k_correct_l101_101754

noncomputable def smallest_k (n m : ‚Ñï) (hn : 0 < n) (hm : 0 < m ‚àß m ‚â§ 5) : ‚Ñï :=
    6

theorem smallest_k_correct (n : ‚Ñï) (m : ‚Ñï) (hn : 0 < n) (hm : 0 < m ‚àß m ‚â§ 5) :
  64 ^ smallest_k n m hn hm + 32 ^ m > 4 ^ (16 + n) :=
sorry

end smallest_k_correct_l101_101754


namespace solve_for_n_l101_101766

theorem solve_for_n (n : ‚Ñö) (h : n + (n + 1) + (n + 2) + (n + 3) = 20) : 
    n = 3.5 :=
  sorry

end solve_for_n_l101_101766


namespace log_a_fraction_inequality_l101_101045

theorem log_a_fraction_inequality (a : ‚Ñù) (h : log a (2 / 3) < 1) : (0 < a ‚àß a < 2 / 3) ‚à® (1 < a) :=
by {
  sorry
}

end log_a_fraction_inequality_l101_101045


namespace sum_of_divisors_37_l101_101312

theorem sum_of_divisors_37 : ‚àë d in (Finset.filter (fun d => d > 0 ‚àß 37 % d = 0) (Finset.range (37 + 1))), d = 38 :=
by
  sorry

end sum_of_divisors_37_l101_101312


namespace num_not_factorial_tails_lt_2500_l101_101473

-- Definition of the function f(m)
def f (m : ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625 + m / 78125 + m / 390625 + m / 1953125

-- The theorem stating the main result
theorem num_not_factorial_tails_lt_2500 : 
  let count_non_tails := ‚àë k in finset.range 2500, if ‚àÄ m, f m ‚â† k then 1 else 0
  in count_non_tails = 500 :=
by
  sorry

end num_not_factorial_tails_lt_2500_l101_101473


namespace problem_statement_l101_101973

theorem problem_statement (x y : ‚Ñï) (hx : x = 3) (hy : y = 4) :
  (x^3 + 3 * y^2) / 7 = 75 / 7 :=
by 
  -- proof goes here
  sorry

end problem_statement_l101_101973


namespace inverse_function_correct_l101_101700

-- defining the original function for x > 1
def f (x : ‚Ñù) (hx : x > 1) : ‚Ñù := log (2, x / (x - 1))

-- defining the proposed inverse function for x > 0
def g (y : ‚Ñù) (hy : y > 0) : ‚Ñù := 2 ^ y / (2 ^ y - 1)

theorem inverse_function_correct (x : ‚Ñù) (hx : x > 1) : 
  let y := f x hx in g y y > 0 = x := by
  -- proof steps
  sorry

end inverse_function_correct_l101_101700


namespace sin_double_angle_identity_l101_101521

open Real

theorem sin_double_angle_identity {Œ± : ‚Ñù} (h1 : œÄ / 2 < Œ± ‚àß Œ± < œÄ) 
    (h2 : sin (Œ± + œÄ / 6) = 1 / 3) :
  sin (2 * Œ± + œÄ / 3) = -4 * sqrt 2 / 9 := 
by 
  sorry

end sin_double_angle_identity_l101_101521


namespace eccentricity_range_l101_101048

noncomputable def hyperbola_eccentricity_range (a b : ‚Ñù) (ha : 0 < a) (hb : 0 < b) : Prop :=
  let c := a * Real.sqrt((b^2/a^2 - 1)) in
  let e := Real.sqrt(1 + (b/a)^2) in
  (Real.sqrt(5) + 1)/2 < e ‚àß e < (Real.sqrt(6) + Real.sqrt(2))/2

theorem eccentricity_range (a b : ‚Ñù) (ha : 0 < a) (hb : 0 < b) :
  hyperbola_eccentricity_range a b ha hb :=
begin
  sorry
end

end eccentricity_range_l101_101048


namespace evaluate_Q_at_2_l101_101730

-- Define the polynomial Q(x)
noncomputable def Q (x : ‚Ñö) : ‚Ñö := x^4 - 20 * x^2 + 16

-- Define the root condition of sqrt(3) + sqrt(7)
def root_condition (x : ‚Ñö) : Prop := (x = ‚Ñö.sqrt(3) + ‚Ñö.sqrt(7))

-- Theorem statement
theorem evaluate_Q_at_2 : Q 2 = -32 :=
by
  -- Given conditions
  have h1 : degree Q = 4 := sorry,
  have h2 : leading_coeff Q = 1 := sorry,
  have h3 : root_condition (‚Ñö.sqrt(3) + ‚Ñö.sqrt(7)) := sorry,
  -- Goal
  exact sorry

end evaluate_Q_at_2_l101_101730


namespace feifei_reaches_school_at_828_l101_101842

-- Definitions for all conditions
def start_time : Nat := 8 * 60 + 10  -- Feifei starts walking at 8:10 AM in minutes since midnight
def dog_delay : Nat := 3             -- Dog starts chasing after 3 minutes
def catch_up_200m_time : ‚Ñï := 1      -- Time for dog to catch Feifei at 200 meters
def catch_up_400m_time : ‚Ñï := 4      -- Time for dog to catch Feifei at 400 meters
def school_distance : ‚Ñï := 800       -- Distance from home to school
def feifei_speed : ‚Ñï := 2            -- assumed speed of Feifei where distance covered uniformly
def dog_speed : ‚Ñï := 6               -- dog speed is three times Feifei's speed
def catch_times := [200, 400, 800]   -- Distances (in meters) where dog catches Feifei

-- Derived condition:
def total_travel_time : ‚Ñï := 
  let time_for_200m := catch_up_200m_time + catch_up_200m_time;
  let time_for_400m_and_back := 2* catch_up_400m_time ;
  (time_for_200m + time_for_400m_and_back + (school_distance - 400))

-- The statement we wish to prove:
theorem feifei_reaches_school_at_828 : 
  (start_time + total_travel_time - dog_delay/2) % 60 = 28 :=
sorry

end feifei_reaches_school_at_828_l101_101842


namespace distinct_remainders_l101_101030

theorem distinct_remainders (n : ‚Ñï) (h : n > 1) :
  ‚àÉ (A : Finset ‚Ñï), (A = Finset.range n ‚àß
  ‚àÄ (i j : ‚Ñï) (hi : i < n) (hj : j < n),
  (i + j) % (n * (n + 1) / 2) ‚â† (i' + j') % (n * (n + 1) / 2) 
  ‚Üí (i = i' ‚àß j = j') ‚à® (i = j' ‚àß j = i')) :=
begin
  use Finset.range n,
  split,
  { refl },
  { intros i j hi hj,
    sorry
  }
end

end distinct_remainders_l101_101030


namespace find_number_l101_101498

theorem find_number (x k : ‚Ñï) (h‚ÇÅ : x / k = 4) (h‚ÇÇ : k = 6) : x = 24 := by
  sorry

end find_number_l101_101498


namespace range_a_and_intersections_l101_101553

-- Definitions of the functions f and g
def f (x : ‚Ñù) (a b : ‚Ñù) := (a * Real.log x + b) / x
def g (x : ‚Ñù) (a : ‚Ñù) := a + 2 - x - 2 / x

-- Hypothesis and conditions
variable {a b : ‚Ñù} (ha1 : a ‚â§ 2) (ha2 : a ‚â† 0)
variable (hx : ‚àÄ x : ‚Ñù, x = 1/e ‚Üí HasExtremum (f x a b))

-- The expression for b derived from the extremum condition
noncomputable def b := 2 * a

-- Statement of the problem in Lean
theorem range_a_and_intersections :
  (‚àÄ x : ‚Ñù, (0 < x ‚àß x < 1/e) ‚Üí (f x a (b a) < 0) ‚àß (1/e < x ‚Üí f x a (b a) > 0) ‚à®
   (a ‚àà (0 : ‚Ñù) ‚à© ((-‚àû) ‚à™ {2})) ‚àß
   (‚àÉ x : ‚Ñù, (0 < x ‚àß x ‚â§ 2) ‚àß f x a (b a) = g x a ‚àß
    (a = -1 ‚à® a < - 2 / Real.log 2 ‚à® 0 < a ‚àß a ‚â§ 2))) :=
sorry

end range_a_and_intersections_l101_101553


namespace sum_of_a_values_l101_101278

theorem sum_of_a_values : 
  (‚àë a in {a : ‚Ñ§ | ‚àÉ x < 0, x^2 + |x - a| - 2 < 0}, a) = -2 :=
by naive_optional
  sorry  -- Proof needs to be filled in

end sum_of_a_values_l101_101278


namespace non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101443

def g (m : Nat) : Nat :=
  let f k := m / k
  f 5 + f 25 + f 125 + f 625 + f 3125 + f 15625 + f 78125 + f 390625 + f 1953125 + f 9765625 + f 48828125 + f 244140625 + f 1220703125 + f 6103515625 + f 30517578125 -- continue as needed

def is_factorial_tail (n : Nat) : Prop :=
  ‚àÉ m : Nat, g m = n

def count_factorial_tails (N : Nat) : Nat :=
  (List.range N).filter (Œª n, is_factorial_tail n).length

theorem non_factorial_tails_lemma : count_factorial_tails 2500 = 2000 := sorry

theorem count_non_factorial_tails (N : Nat) : Prop :=
  let total := N - 1
  total - count_factorial_tails N = 499

theorem solution : count_non_factorial_tails 2500 := sorry

end non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101443


namespace angles_equal_l101_101839

-- Definitions based on conditions
structure Triangle (A B C : Type) :=
(equilateral : Prop)

variables {A B C D E H K : Type}
variables [InPlane : A √ó B √ó C]
variables (triangle_ABC : Triangle A B C) -- Equilateral triangle ABC
variables (triangle_CDE : Triangle C D E) -- Equilateral triangle CDE
variables (triangle_EHK : Triangle E H K) -- Equilateral triangle EHK
variables (shared_vertex_CE : Prop) -- Triangles share vertices C and E
variables (midpoint_D : D = (AK) / 2) -- D is the midpoint of AK

-- This should prove that the angle DBH equals the angle BDH given the conditions
theorem angles_equal (tABC : triangle_ABC.equilateral) (tCDE : triangle_CDE.equilateral) (tEHK : triangle_EHK.equilateral) 
                      (shared_CE : shared_vertex_CE) (mid_D : midpoint_D) : 
  ‚à† DBH = ‚à† BDH :=
by sorry

end angles_equal_l101_101839


namespace rock_paper_scissors_probability_l101_101034

noncomputable def probability_beats_all (n k : ‚Ñï) (p : ‚Ñö) : ‚Ñö :=
  let independent_event_prob := p ^ k in
  (n * 3 * independent_event_prob)

theorem rock_paper_scissors_probability :
  probability_beats_all 4 3 (1/3 : ‚Ñö) = (4/27 : ‚Ñö) :=
by
  sorry

end rock_paper_scissors_probability_l101_101034


namespace find_angle_C_range_b_minus_2a_l101_101050

noncomputable def triangle_AC_conditions (a b c : ‚Ñù) (A B C : ‚Ñù) : Prop :=
(a + b > c) ‚àß (a + c > b) ‚àß (b + c > a) ‚àß (C = Real.acos ((a^2 + b^2 - c^2) / (2 * a * b)))

theorem find_angle_C (a b : ‚Ñù) (h‚ÇÅ : ‚àÄ x : ‚Ñù, 0 < x) : ‚àÉ C, 
  triangle_AC_conditions a b (sqrt 3) A B C ‚àß (Real.sin C = sqrt 3 / 2) ‚àß (0 < C ‚àß C < Real.pi / 2) := 
begin
  sorry
end

theorem range_b_minus_2a (a b : ‚Ñù) (h‚ÇÅ : ‚àÄ x : ‚Ñù, 0 < x) : 
  ‚àÉ A, (Real.pi / 6 < A) ‚àß (A < Real.pi / 2) ‚Üí 
  (-3 < b - 2 * a) ‚àß (b - 2 * a < 0) := 
begin
  sorry
end

end find_angle_C_range_b_minus_2a_l101_101050


namespace journey_total_distance_l101_101115

/--
Given:
- A person covers 3/5 of their journey by train.
- A person covers 7/20 of their journey by bus.
- A person covers 3/10 of their journey by bicycle.
- A person covers 1/50 of their journey by taxi.
- The rest of the journey (4.25 km) is covered by walking.

Prove:
  D = 15.74 km
where D is the total distance of the journey.
-/
theorem journey_total_distance :
  ‚àÄ (D : ‚Ñù), 3/5 * D + 7/20 * D + 3/10 * D + 1/50 * D + 4.25 = D ‚Üí D = 15.74 :=
by
  intro D
  sorry

end journey_total_distance_l101_101115


namespace solve_servant_payment_problem_l101_101372

/-- A Lean definition to state the problem conditions and the resulting proof statement --/

-- We first define the constants and variables given in the problem.
constant U : ‚Ñù  -- Value of the uniform
constant A : ‚Ñù  -- Agreed amount after one year of service
constant received_amount : ‚Ñù := 250  -- Amount received for 9 months of service

-- Define the statement that expresses the problem conditions
def servant_payment_problem : Prop :=
  -- The servant worked for 9 months, which is 3/4 of a year
  (3 / 4 * A + U = received_amount + U) ‚Üí 
  -- The agreed amount after one year should be approximately Rs. 333.33
  A ‚âà 333.33

-- Insert the "sorry" placeholder to skip the proof
theorem solve_servant_payment_problem : servant_payment_problem :=
  sorry

end solve_servant_payment_problem_l101_101372


namespace application_schemes_eq_l101_101275

noncomputable def number_of_application_schemes (graduates : ‚Ñï) (universities : ‚Ñï) : ‚Ñï :=
  universities ^ graduates

theorem application_schemes_eq : 
  number_of_application_schemes 5 3 = 3 ^ 5 := 
by 
  -- proof goes here
  sorry

end application_schemes_eq_l101_101275


namespace mutually_exclusive_events_l101_101596

-- Definitions based on given conditions
def num_boys := 3
def num_girls := 2
def total_students := num_boys + num_girls

-- Events
def at_least_one_boy (selection : List Nat) : Prop :=
  ‚àÉ b ‚àà selection, b < num_boys  -- assuming boys are numbered 0, 1, 2

def all_girls (selection : List Nat) : Prop :=
  ‚àÄ g ‚àà selection, g ‚â• num_boys  -- assuming girls are numbered 3, 4

-- The proof problem statement
theorem mutually_exclusive_events :
  ‚àÄ (selection : List Nat), 
    (length selection = 2) ‚Üí
    (at_least_one_boy selection) ‚Üí
    (all_girls selection) ‚Üí 
    False :=
by sorry

end mutually_exclusive_events_l101_101596


namespace ways_to_receive_fifth_pass_l101_101818

def players : Fin 3 := ‚ü®3‚ü©

def steps : Fin 5 := ‚ü®5‚ü©

def pass_to_other (p1 p2 : Fin 3) : Prop := p1 ‚â† p2

theorem ways_to_receive_fifth_pass (A B C : Fin 3)
  (h1 : A ‚â† B ‚àß B ‚â† C ‚àß C ‚â† A)
  (first_pass : Fin 3 := A)
  (steps := 5) :
  (‚àÉ (total_ways : Nat), total_ways = 10) :=
sorry

end ways_to_receive_fifth_pass_l101_101818


namespace least_rice_l101_101742

variable (o r : ‚Ñù)

-- Conditions
def condition_1 : Prop := o ‚â• 8 + r / 2
def condition_2 : Prop := o ‚â§ 3 * r

-- The main theorem we want to prove
theorem least_rice (h1 : condition_1 o r) (h2 : condition_2 o r) : r ‚â• 4 :=
sorry

end least_rice_l101_101742


namespace num_not_factorial_tails_lt_2500_l101_101469

-- Definition of the function f(m)
def f (m : ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625 + m / 78125 + m / 390625 + m / 1953125

-- The theorem stating the main result
theorem num_not_factorial_tails_lt_2500 : 
  let count_non_tails := ‚àë k in finset.range 2500, if ‚àÄ m, f m ‚â† k then 1 else 0
  in count_non_tails = 500 :=
by
  sorry

end num_not_factorial_tails_lt_2500_l101_101469


namespace find_complex_conjugate_l101_101525

-- Given conditions
def complex_conjugate (z : ‚ÑÇ) : ‚ÑÇ := conj z -- The complex conjugate function
variable (z : ‚ÑÇ) (h : (1 - complex.i) * z = 1 + complex.i)

-- Proof problem statement: Prove that the complex conjugate of z is -i
theorem find_complex_conjugate : complex_conjugate z = -complex.i := by
  sorry

end find_complex_conjugate_l101_101525


namespace expected_value_red_balls_draws_l101_101687

/-- Let there be a bag containing 4 red balls and 2 white balls,
all of the same size and texture. 
If balls are drawn one after another with replacement from the bag,
and the number of times a red ball is drawn in 6 draws is denoted by 
Œæ, then the expected value E(Œæ) is 4. -/
theorem expected_value_red_balls_draws :
  let p := 2 / 3 in
  let n := 6 in
  let Œæ : ‚Ñï ‚Üí ‚Ñï := Œª k, k  in
  n * p = 4 := 
by
  -- Proof steps would go here
  sorry

end expected_value_red_balls_draws_l101_101687


namespace find_f_x_l101_101040

theorem find_f_x (f : ‚Ñù ‚Üí ‚Ñù) : (‚àÄ x : ‚Ñù, f(x - 1) = x^2) ‚Üí (‚àÄ x : ‚Ñù, f(x) = (x + 1)^2) :=
by
  intro h
  sorry

end find_f_x_l101_101040


namespace find_N_l101_101022

def G := 101
def k (N : ‚Ñï) : ‚Ñï := sorry
def m : ‚Ñï := 5161 / G

theorem find_N (N : ‚Ñï) : (N % G = 8) ‚àß (5161 % G = 10) ‚Üí N = 5159 :=
by
  intro h
  cases h with hNmod h5161mod
  have hN : (N = G * k N + 8) := sorry
  have h5161 : (5161 = G * m + 10) := sorry
  sorry

end find_N_l101_101022


namespace caroline_rearrangements_time_l101_101418

theorem caroline_rearrangements_time :
  let rearrangements_count := 8!
  let rearrangements_per_minute := 15
  let total_minutes := rearrangements_count / rearrangements_per_minute
  let total_hours := total_minutes / 60
  total_hours = 44.8 := by
  -- Definitions as conditions
  let rearrangements_count := 8!
  let rearrangements_per_minute := 15
  let total_minutes := rearrangements_count / rearrangements_per_minute
  let total_hours := total_minutes / 60

  -- Sorry to skip the proof
  sorry

end caroline_rearrangements_time_l101_101418


namespace find_min_n_l101_101834

theorem find_min_n (n k : ‚Ñï) (h : 14 * n = k^2) : n = 14 := sorry

end find_min_n_l101_101834


namespace percentage_increase_rate_flow_l101_101697

theorem percentage_increase_rate_flow
  (R1 R2 R3 : ‚Ñï)
  (h1 : R2 = 36)
  (h2 : R3 = 1.25 * R2)
  (h3 : R1 + R2 + R3 = 105) :
  ((R2 - R1) / R1.to_float * 100.0 = 50.0) :=
by 
  sorry

end percentage_increase_rate_flow_l101_101697


namespace solve_alternating_fraction_l101_101481

noncomputable def alternating_fraction : ‚Ñù :=
  3 + 6 / (2 + 6 / (3 + 6 / (2 + 6 / (3 + ...))))

theorem solve_alternating_fraction :
  alternating_fraction = 2 + Real.sqrt 7 :=
sorry

end solve_alternating_fraction_l101_101481


namespace time_spent_on_type_a_problems_l101_101339

theorem time_spent_on_type_a_problems 
  (total_problems : ‚Ñï)
  (exam_time_minutes : ‚Ñï)
  (type_a_problems : ‚Ñï)
  (type_b_problem_time : ‚Ñï)
  (total_time_type_a : ‚Ñï)
  (h1 : total_problems = 200)
  (h2 : exam_time_minutes = 180)
  (h3 : type_a_problems = 50)
  (h4 : ‚àÄ x : ‚Ñï, type_b_problem_time = 2 * x)
  (h5 : ‚àÄ x : ‚Ñï, total_time_type_a = type_a_problems * type_b_problem_time)
  : total_time_type_a = 72 := 
by
  sorry

end time_spent_on_type_a_problems_l101_101339


namespace find_original_number_l101_101797

open Int

theorem find_original_number (N y x : ‚Ñï) (h1 : N = 10 * y + x) (h2 : N + y = 54321) (h3 : x = 54321 % 11) (h4 : y = 4938) : N = 49383 := by
  sorry

end find_original_number_l101_101797


namespace triangle_inequality_proof_l101_101913

theorem triangle_inequality_proof (a b c : ‚Ñù) (h : a + b > c) : a^3 + b^3 + 3 * a * b * c > c^3 :=
by sorry

end triangle_inequality_proof_l101_101913


namespace population_increase_l101_101710

theorem population_increase (P0 P : ‚Ñù) (t : ‚Ñù) (r : ‚Ñù) 
  (h1 : P0 = 60000) 
  (h2 : P = 79860) 
  (h3 : t = 3) 
  (h4 : P = P0 * (1 + r)^t) : r ‚âà 0.099 :=
by {
  have h: 79860 = 60000 * (1 + r)^3, from h4,
  calc r ‚âà 0.099 : sorry
}

end population_increase_l101_101710


namespace Q_evaluation_at_2_l101_101732

noncomputable def Q : Polynomial ‚Ñö := 
  (Polynomial.X^2 + Polynomial.C 4)^2

theorem Q_evaluation_at_2 : 
  Q.eval 2 = 64 :=
by 
  -- We'll skip the proof as per the instructions.
  sorry

end Q_evaluation_at_2_l101_101732


namespace number_of_cars_sold_next_four_days_cars_sold_each_day_next_four_days_l101_101035

def cars_sold_each_day_first_three_days : ‚Ñï := 5
def days_first_period : ‚Ñï := 3
def quota : ‚Ñï := 50
def cars_remaining_after_next_four_days : ‚Ñï := 23
def days_next_period : ‚Ñï := 4

theorem number_of_cars_sold_next_four_days :
  (quota - cars_sold_each_day_first_three_days * days_first_period) - cars_remaining_after_next_four_days = 12 :=
by
  sorry

theorem cars_sold_each_day_next_four_days :
  (quota - cars_sold_each_day_first_three_days * days_first_period - cars_remaining_after_next_four_days) / days_next_period = 3 :=
by
  sorry

end number_of_cars_sold_next_four_days_cars_sold_each_day_next_four_days_l101_101035


namespace relationship_between_a_b_c_l101_101505

-- Definitions as conditions from a)
def a := 2 / Real.log 4
def b := Real.log 3 / Real.log 2
def c := 3 / 2

-- Statement of the equivalence proof problem
theorem relationship_between_a_b_c : b > c ‚àß c > a :=
by {
  sorry
}

end relationship_between_a_b_c_l101_101505


namespace zoo_total_animals_l101_101391

theorem zoo_total_animals (tiger_enclosure : ‚Ñï) (zebra_enclosure_per_tiger : ‚Ñï) 
  (giraffe_enclosures_ratio : ‚Ñï) (tigers_per_enclosure : ‚Ñï) 
  (zebras_per_enclosure : ‚Ñï) (giraffes_per_enclosure : ‚Ñï) 
  (Htiger : tiger_enclosure = 4) (Hzebra_per_tiger : zebra_enclosure_per_tiger = 2) 
  (Hgiraffe_ratio : giraffe_enclosures_ratio = 3) (Ht_pe : tigers_per_enclosure = 4) 
  (Hz_pe : zebras_per_enclosure = 10) (Hg_pe : giraffes_per_enclosure = 2) : 
  let zebra_enclosures := tiger_enclosure * zebra_enclosure_per_tiger in
  let giraffe_enclosures := zebra_enclosures * giraffe_enclosures_ratio in
  let total_tigers := tiger_enclosure * tigers_per_enclosure in
  let total_zebras := zebra_enclosures * zebras_per_enclosure in
  let total_giraffes := giraffe_enclosures * giraffes_per_enclosure in
  total_tigers + total_zebras + total_giraffes = 144 :=
by
  sorry

end zoo_total_animals_l101_101391


namespace largest_prime_factor_divides_sum_l101_101794

theorem largest_prime_factor_divides_sum (seq : List ‚Ñï) (h_seq_len : seq.length = 4)
(h_digits : ‚àÄ i, seq.nth i % 1000 / 100 = seq.nth ((i + 1) % 4) / 1000)
(h_cycle : ‚àÄ i, seq.nth ((i - 1) % 4) % 100 = (seq.nth i % 1000) / 10)
: 101 ‚à£ seq.sum :=
sorry

end largest_prime_factor_divides_sum_l101_101794


namespace probability_sum9_of_two_dice_is_1_div_9_l101_101305

theorem probability_sum9_of_two_dice_is_1_div_9 :
  let outcomes := { (x, y) | x ‚àà {1, 2, 3, 4, 5, 6} ‚àß y ‚àà {1, 2, 3, 4, 5, 6} },
      favorable := { (x, y) | (x, y) ‚àà outcomes ‚àß x + y = 9 } in
  (favorable.card : ‚Ñö) / (outcomes.card : ‚Ñö) = 1 / 9 := 
by
  sorry

end probability_sum9_of_two_dice_is_1_div_9_l101_101305


namespace sequence_pairwise_relatively_prime_l101_101907

noncomputable def f (x : ‚Ñï) : ‚Ñï := x^2 - x + 1

theorem sequence_pairwise_relatively_prime (m : ‚Ñï) (h : m > 1) :
  ‚àÄ n k : ‚Ñï, n ‚â† k ‚Üí Nat.Coprime (nat.iterate f n m) (nat.iterate f k m) :=
sorry

end sequence_pairwise_relatively_prime_l101_101907


namespace find_abs_dot_product_l101_101656

variables (a b : ‚Ñù^3)

def norm (v : ‚Ñù^3) : ‚Ñù := real.sqrt (v.1 ^ 2 + v.2 ^ 2 + v.3 ^ 2)
def dot (u v : ‚Ñù^3) : ‚Ñù := u.1 * v.1 + u.2 * v.2 + u.3 * v.3
def cross (u v : ‚Ñù^3) : ‚Ñù^3 := (u.2 * v.3 - u.3 * v.2, u.3 * v.1 - u.1 * v.3, u.1 * v.2 - u.2 * v.1)

noncomputable def abs_dot_product : ‚Ñù :=
  |dot a b|

axioms
  (h1 : norm a = 3)
  (h2 : norm b = 4)
  (h3 : norm (cross a (b + a)) = 15)

theorem find_abs_dot_product :
  abs_dot_product a b = 12 * real.sqrt (1 - 25 / (25 + 6 * abs_dot_product a b)) :=
sorry

end find_abs_dot_product_l101_101656


namespace focus_of_parabola_l101_101494

theorem focus_of_parabola :
  (‚àÉ (x y : ‚Ñù), y = 4 * x ^ 2 - 8 * x - 12 ‚àß x = 1 ‚àß y = -15.9375) :=
by
  sorry

end focus_of_parabola_l101_101494


namespace abhay_speed_l101_101773

variable {A S : ‚Ñù}

noncomputable theory

theorem abhay_speed (h1 : 30 / A = 30 / S + 2) (h2 : 30 / (2 * A) = 30 / S - 1) : A = 10 :=
sorry

end abhay_speed_l101_101773


namespace least_n_property_l101_101023

theorem least_n_property :
  ‚àÉ (n : ‚Ñï), (‚àÄ (V : finset (‚Ñù √ó ‚Ñù)), V.card = 8 ‚àß 
    (‚àÄ (p1 p2 p3 : ‚Ñù √ó ‚Ñù), p1 ‚â† p2 ‚àß p2 ‚â† p3 ‚àß p1 ‚â† p3 ‚Üí ¬¨collinear p1 p2 p3) ‚Üí
    (‚àÄ (E : finset (‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù)), E.card = n ‚Üí
      ‚àÉ (line : ‚Ñù √ó ‚Ñù ‚Üí Prop), (‚àÉ (S : finset (‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù)), S ‚äÜ E ‚àß S.card = 4 ‚àß 
        ‚àÄ (seg : ‚Ñù √ó ‚Ñù √ó ‚Ñù √ó ‚Ñù), seg ‚àà S ‚Üí line (intrPoint seg))))
  := sorry

end least_n_property_l101_101023


namespace solution_set_of_inequality_l101_101071

def f (x : ‚Ñù) : ‚Ñù :=
  2016^x + Real.logBase 2016 (Real.sqrt (x^2 + 1) + x) - 2016^(-x) + 2

theorem solution_set_of_inequality :
  { x : ‚Ñù | f (3 * x + 1) + f x > 4 } = Set.Ioi (-1 / 4) :=
sorry

end solution_set_of_inequality_l101_101071


namespace jackson_grade_l101_101631

open Function

theorem jackson_grade :
  ‚àÉ (grade : ‚Ñï), 
  ‚àÄ (hours_playing hours_studying : ‚Ñï), 
    (hours_playing = 9) ‚àß 
    (hours_studying = hours_playing / 3) ‚àß 
    (grade = hours_studying * 15) ‚Üí
    grade = 45 := 
by {
  sorry
}

end jackson_grade_l101_101631


namespace find_original_number_l101_101805

-- Variables and assumptions
variables (N y x : ‚Ñï)

-- Conditions
def crossing_out_condition : Prop := N = 10 * y + x
def sum_condition : Prop := N + y = 54321
def remainder_condition : Prop := x = 54321 % 11
def y_value : Prop := y = 4938

-- The final proof problem statement
theorem find_original_number (h1 : crossing_out_condition N y x) (h2 : sum_condition N y) 
  (h3 : remainder_condition x) (h4 : y_value y) : N = 49383 :=
sorry

end find_original_number_l101_101805


namespace sphere_volume_ratio_l101_101586

theorem sphere_volume_ratio
  (r R : ‚Ñù)
  (h : (4:‚Ñù) * œÄ * r^2 / (4 * œÄ * R^2) = (4:‚Ñù) / 9) : 
  (r^3 / R^3 = (8:‚Ñù) / 27) := by
  sorry

end sphere_volume_ratio_l101_101586


namespace roots_of_quadratic_l101_101122

theorem roots_of_quadratic (b c : ‚Ñù) (h1 : 1 + -2 = -b) (h2 : 1 * -2 = c) : b = 1 ‚àß c = -2 :=
by
  sorry

end roots_of_quadratic_l101_101122


namespace n_divisible_by_3_l101_101608

variables {n : ‚Ñï}
variables (S_col S_row : ‚Ñï ‚Üí ‚Ñï)

def exists_valid_n (n : ‚Ñï) :=
  ‚àÄ k : ‚Ñï, k ‚â• 1 ‚àß k ‚â§ n ‚Üí S_row k = S_col k - 1 ‚à® S_row k = S_col k + 2

theorem n_divisible_by_3 (h : exists_valid_n n S_col S_row) : 3 ‚à£ n :=
sorry

end n_divisible_by_3_l101_101608


namespace identify_false_coin_bag_triangle_area_less_than_100_smallest_whole_number_lucky_ticket_sum_divisible_by_13_l101_101351

-- Problem 1
theorem identify_false_coin_bag (W : ‚Ñï) (W_honest : W =  10 * (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10)) :
  ‚àÉ n : ‚Ñï,
    (n = W - 549) := 
by sorry

-- Problem 2
theorem triangle_area_less_than_100 
  (a b c h_a h_b h_c : ‚Ñù) 
  (h_a_lt_1 : h_a < 1) 
  (h_b_lt_1 : h_b < 1) 
  (h_c_lt_1 : h_c < 1) :
    ‚àÉ A : ‚Ñù, 
      A < 100 := 
by sorry

-- Problem 3
theorem smallest_whole_number : 
  ‚àÉ x : ‚Ñï, 
    (‚àÉ a b c : ‚Ñï, 
      2 * a * a = x ‚àß 3 * b^3 = x ‚àß 5 * c^5 = x) ‚àß  x = 10125000 := 
by sorry

-- Problem 4
theorem lucky_ticket_sum_divisible_by_13 : 
  (‚àë i in finset.range 999999, 
    i = N) ‚Üí 
    N % 13 = 0 := 
by sorry

end identify_false_coin_bag_triangle_area_less_than_100_smallest_whole_number_lucky_ticket_sum_divisible_by_13_l101_101351


namespace change_factor_l101_101216

theorem change_factor (avg1 avg2 : ‚Ñù) (n : ‚Ñï) (h_avg1 : avg1 = 40) (h_n : n = 10) (h_avg2 : avg2 = 80) : avg2 * (n : ‚Ñù) / (avg1 * (n : ‚Ñù)) = 2 :=
by
  sorry

end change_factor_l101_101216


namespace residue_of_f_2015_l101_101857

noncomputable def f : ‚Ñï ‚Üí ‚Ñï
| 0     := 1
| 1 := 1
| 2 := 1
| (n+3) := f n + f (n + 2) + 1

theorem residue_of_f_2015 : (f 2015) % 4 = 3 := 
sorry

end residue_of_f_2015_l101_101857


namespace unique_n_degree_polynomial_l101_101956

noncomputable def P (a b c : ‚Ñù) (x : ‚Ñù) := a * x^2 + b * x + c

theorem unique_n_degree_polynomial (a b c : ‚Ñù) (h : a ‚â† 0) (n : ‚Ñï) :
  ‚àÉ at_most_one (Q : ‚Ñù ‚Üí ‚Ñù), degree Q = n ‚àß ‚àÄ x : ‚Ñù, (a ‚â† 0) ‚Üí Q (P a b c x) = P a b c (Q x) :=
sorry

end unique_n_degree_polynomial_l101_101956


namespace correct_propositions_are_1_and_3_l101_101564

noncomputable def proposition1 := ‚àÄ (b c : ‚Ñù), ‚àÉ m ‚àà ‚Ñù, ‚àÄ x ‚àà ‚Ñù, x^2 + b*x + c ‚â• m
noncomputable def proposition2 := ¬¨ (‚àÉ (p1 p2 d1 d2 : ‚Ñï) (h1 : p1 + d1 = 5) (h2 : p2 + d2 = 3),
  (2 * 1 * choose 3 2 / (choose 5 3)) = 1)
noncomputable def proposition3 := 12 = 6 * 2

theorem correct_propositions_are_1_and_3 : proposition1 ‚àß proposition3 ‚àß proposition2 := 
by
  split
  {
    sorry
  },
  split
  {
    sorry
  },
  sorry

end correct_propositions_are_1_and_3_l101_101564


namespace slopes_product_of_tangents_l101_101177

theorem slopes_product_of_tangents 
  (x‚ÇÄ y‚ÇÄ : ‚Ñù) 
  (h_hyperbola : (2 * x‚ÇÄ^2) / 3 - y‚ÇÄ^2 / 6 = 1) 
  (h_outside_circle : x‚ÇÄ^2 + y‚ÇÄ^2 > 2) :
  ‚àÉ (k‚ÇÅ k‚ÇÇ : ‚Ñù), 
    k‚ÇÅ * k‚ÇÇ = 4 ‚àß 
    (y‚ÇÄ - k‚ÇÅ * x‚ÇÄ)^2 + k‚ÇÅ^2 = 2 ‚àß 
    (y‚ÇÄ - k‚ÇÇ * x‚ÇÄ)^2 + k‚ÇÇ^2 = 2 :=
by {
  -- this proof will use the properties of tangents to a circle and the constraints given
  -- we don't need to implement it now, but we aim to show the correct relationship
  sorry
}

end slopes_product_of_tangents_l101_101177


namespace shortest_distance_between_circles_l101_101307

noncomputable def circle1_center : ‚Ñù √ó ‚Ñù :=
  (3, 4)

noncomputable def circle1_radius : ‚Ñù :=
  real.sqrt 26

noncomputable def circle2_center : ‚Ñù √ó ‚Ñù :=
  (-5, 3)

noncomputable def circle2_radius : ‚Ñù :=
  real.sqrt 59

noncomputable def distance_between_centers : ‚Ñù :=
  real.sqrt ((3 - (-5))^2 + (4 - 3)^2)

noncomputable def shortest_distance : ‚Ñù :=
  distance_between_centers - (circle1_radius + circle2_radius)

theorem shortest_distance_between_circles : shortest_distance = 0 :=
sorry

end shortest_distance_between_circles_l101_101307


namespace smallest_m_for_2n_roots_of_unity_l101_101644

noncomputable def T : set ‚ÑÇ := 
  {z : ‚ÑÇ | ‚àÉ u v : ‚Ñù, z = complex.mk u v ‚àß (real.sqrt 3 / 3 ‚â§ u ‚àß u ‚â§ real.sqrt 3 / 2)}

theorem smallest_m_for_2n_roots_of_unity : 
  ‚àÉ m : ‚Ñï, m = 16 ‚àß ‚àÄ n : ‚Ñï, n ‚â• m ‚Üí (‚àÉ z ‚àà T, z ^ (2 * n) = 1) :=
begin
  sorry -- Proof goes here
end

end smallest_m_for_2n_roots_of_unity_l101_101644


namespace find_original_number_l101_101798

open Int

theorem find_original_number (N y x : ‚Ñï) (h1 : N = 10 * y + x) (h2 : N + y = 54321) (h3 : x = 54321 % 11) (h4 : y = 4938) : N = 49383 := by
  sorry

end find_original_number_l101_101798


namespace no_extreme_points_l101_101478

noncomputable def f (x a : ‚Ñù) : ‚Ñù := x^3 + 3 * x^2 + 4 * x - a

theorem no_extreme_points (a : ‚Ñù) : ‚àÄ x : ‚Ñù, 3 * x^2 + 6 * x + 4 ‚â† 0 :=
by
  intro x
  have h : 3 * (x + 1)^2 + 1 > 0 := by
    simp [pow_two, mul_add, mul_one, add_assoc]
    exact add_pos_of_nonneg_of_pos (mul_nonneg zero_le_three (pow_two_nonneg (x + 1))) zero_lt_one
  linarith
  sorry

end no_extreme_points_l101_101478


namespace imaginary_part_conjugate_l101_101067

noncomputable def i := Complex.I

theorem imaginary_part_conjugate (z : ‚ÑÇ) (h : (1 - i) * z = i ^ 2015) : Complex.im (Complex.conj z) = 1 / 2 :=
by
  sorry

end imaginary_part_conjugate_l101_101067


namespace solve_for_x_l101_101208

theorem solve_for_x (x : ‚Ñù) (h : log10 (3 * x + 4) = 1) : x = 2 :=
by
  sorry

end solve_for_x_l101_101208


namespace problem_statement_l101_101160

theorem problem_statement 
  (x y : ‚Ñï)
  (h1 : 2^x = 180.gcd 2^180)
  (h2 : 3^y = 180.gcd 3^180) :
  ((1 / 7) : ‚Ñù)^(y - x) = 1 :=
by sorry

end problem_statement_l101_101160


namespace sum_divisors_of_37_is_38_l101_101320

theorem sum_divisors_of_37_is_38 (h : Nat.Prime 37) : (‚àë d in (Finset.filter (Œª d, 37 % d = 0) (Finset.range (37 + 1))), d) = 38 := by
  sorry

end sum_divisors_of_37_is_38_l101_101320


namespace transformed_inequality_l101_101326

theorem transformed_inequality (x : ‚Ñù) : 
  (x - 3) / 3 < (2 * x + 1) / 2 - 1 ‚Üî 2 * (x - 3) < 3 * (2 * x + 1) - 6 :=
by
  sorry

end transformed_inequality_l101_101326


namespace find_k_l101_101672

noncomputable def circle_center : ‚Ñù √ó ‚Ñù := (1, 0)
noncomputable def circle_radius : ‚Ñù := 1
noncomputable def line (k : ‚Ñù) : ‚Ñù √ó ‚Ñù ‚Üí Prop := Œª P, k * P.1 + P.2 + 3 = 0
noncomputable def area_quadrilateral (P : ‚Ñù √ó ‚Ñù)(k : ‚Ñù) : ‚Ñù := 
  -- an expression that computes the area of quadrilateral PACB involving point P and k
  -- this expression should be derived based on geometric properties
  sorry

theorem find_k (k : ‚Ñù) (h_pos : k > 0) :
  (‚àÉ P, line k P ‚àß area_quadrilateral P k = 2) ‚Üí k = 2 :=
by sorry

end find_k_l101_101672


namespace range_of_f_l101_101927

open Real

def condition1 (m Œ± Œ≤ : ‚Ñù) := (tan Œ± + tan Œ≤ = (1 - 2 * m) / m) ‚àß (tan Œ± * tan Œ≤ = (2 * m - 3) / (2 * m)) ‚àß (Œ± ‚â† Œ≤)
def condition2 (m : ‚Ñù) := m ‚àà set.Icc (-1/2) 0 ‚à™ set.Icc 0 (‚àû)
noncomputable def f (m : ‚Ñù) : ‚Ñù := 5 * m^2 + 3 * m * (tan ((Œ± + Œ≤))) + 4

theorem range_of_f :
  ‚àÄ m : ‚Ñù, condition1 m Œ± Œ≤ ‚àß condition2 m ‚Üí f(m) ‚àà set.Icc (13/4) 4 ‚à™ set.Icc 4 (‚àû) := by
  sorry

end range_of_f_l101_101927


namespace count_non_factorial_tails_lt_2500_l101_101448

def f (m : ‚Ñï) : ‚Ñï := 
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + ... -- Continue as needed

theorem count_non_factorial_tails_lt_2500 : 
  #{ n : ‚Ñï | n < 2500 ‚àß ¬¨ (‚àÉ m : ‚Ñï, f(m) = n) } = 4 :=
by sorry

end count_non_factorial_tails_lt_2500_l101_101448


namespace coefficient_x4_expansion_l101_101618

theorem coefficient_x4_expansion :
  let expr := (2 * x ^ 2 - 1 / x) ^ 5
  ‚àÉ (c : ‚Ñ§), c = 80 ‚àß ‚àÉ (t : ‚Ñï ‚Üí ‚Ñù) (r : ‚Ñï),
    t r ‚â† 0 ‚àß
    expr.expandCoef r = c ‚àß
    expr.expandPower r = 4 :=
sorry

end coefficient_x4_expansion_l101_101618


namespace SomeAthletesNotHonorSociety_l101_101407

variable (Athletes HonorSociety : Type)
variable (Discipline : Athletes ‚Üí Prop)
variable (isMember : Athletes ‚Üí HonorSociety ‚Üí Prop)

-- Some athletes are not disciplined
axiom AthletesNotDisciplined : ‚àÉ a : Athletes, ¬¨Discipline a

-- All members of the honor society are disciplined
axiom AllHonorSocietyDisciplined : ‚àÄ h : HonorSociety, ‚àÄ a : Athletes, isMember a h ‚Üí Discipline a

-- The theorem to be proved
theorem SomeAthletesNotHonorSociety : ‚àÉ a : Athletes, ‚àÄ h : HonorSociety, ¬¨isMember a h :=
  sorry

end SomeAthletesNotHonorSociety_l101_101407


namespace minimum_tan_product_l101_101605

theorem minimum_tan_product 
  {A B C : ‚Ñù} 
  (h1 : A + B + C = œÄ)
  (h2 : A < œÄ / 2)
  (h3 : B < œÄ / 2)
  (h4 : C < œÄ / 2)
  (h5 : ‚àÉ a b c : ‚Ñù, 
        b * Real.sin C + c * Real.sin B = 4 * a * Real.sin B * Real.sin C)
  (h6 : Real.sin A = 1/2):
  ‚àÉ (B C : ‚Ñù), 
  (œÄ / 6 < B) ‚àß (B < œÄ / 2) ‚àß (œÄ / 6 < C) ‚àß (C < œÄ / 2) ‚àß 
  tan A * tan B * tan C = (12 + 7 * Real.sqrt 3) / 3 := 
by
  sorry

end minimum_tan_product_l101_101605


namespace child_grandmother_ratio_l101_101235

def grandmother_weight (G D C : ‚Ñù) : Prop :=
  G + D + C = 160

def daughter_child_weight (D C : ‚Ñù) : Prop :=
  D + C = 60

def daughter_weight (D : ‚Ñù) : Prop :=
  D = 40

theorem child_grandmother_ratio (G D C : ‚Ñù) (h1 : grandmother_weight G D C) (h2 : daughter_child_weight D C) (h3 : daughter_weight D) :
  C / G = 1 / 5 :=
sorry

end child_grandmother_ratio_l101_101235


namespace vince_savings_l101_101296

-- Definitions based on conditions
def earnings_per_customer : ‚Ñï := 18
def monthly_expenses : ‚Ñ§ := 280
def recreation_percentage : ‚Ñö := 0.20
def customers_served : ‚Ñï := 80

-- Intermediate calculations (explained in the solution steps but not used directly here)
def total_earnings : ‚Ñï := customers_served * earnings_per_customer
def recreation_expenses : ‚Ñ§ := (recreation_percentage.toReal * total_earnings).to_nat
def total_monthly_expenses : ‚Ñ§ := monthly_expenses + recreation_expenses
def savings : ‚Ñ§ := total_earnings - total_monthly_expenses

-- The proof statement we need to verify
theorem vince_savings :
  savings = 872 :=
sorry

end vince_savings_l101_101296


namespace non_factorial_tails_lt_2500_l101_101437

-- Define the function f(m)
def f (m: ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625

-- Define what it means to be a factorial tail
def is_factorial_tail (n: ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, f(m) = n

-- Define the statement to be proved
theorem non_factorial_tails_lt_2500 : 
  (finset.range 2500).filter (Œª n, ¬¨ is_factorial_tail n).card = 499 :=
by
  sorry

end non_factorial_tails_lt_2500_l101_101437


namespace ratio_first_term_common_difference_l101_101480

theorem ratio_first_term_common_difference
  (a d : ‚Ñö)
  (h : (15 / 2) * (2 * a + 14 * d) = 4 * (8 / 2) * (2 * a + 7 * d)) :
  a / d = -7 / 17 := 
by {
  sorry
}

end ratio_first_term_common_difference_l101_101480


namespace maximum_area_of_quadrilateral_l101_101909

theorem maximum_area_of_quadrilateral (R k : ‚Ñù) (k_pos : 0 ‚â§ k) : 
  ‚àÉ (S_max : ‚Ñù),
    (S_max = (k + 1) * R^2 ‚àß k ‚â§ real.sqrt 2 - 1) ‚à®
    (S_max = (2 * real.sqrt (k * (k + 2)) / (k + 1)) * R^2 ‚àß k > real.sqrt 2 - 1) :=
sorry

end maximum_area_of_quadrilateral_l101_101909


namespace number_of_factors_in_224_l101_101795

def smallest_is_half_largest (n1 n2 : ‚Ñï) : Prop :=
  n1 * 2 = n2

theorem number_of_factors_in_224 :
  ‚àÉ n1 n2 n3 : ‚Ñï, n1 * n2 * n3 = 224 ‚àß smallest_is_half_largest (min n1 (min n2 n3)) (max n1 (max n2 n3)) ‚àß
    (if h : n1 < n2 ‚àß n1 < n3 then
      if h2 : n2 < n3 then 
        smallest_is_half_largest n1 n3 
        else 
        smallest_is_half_largest n1 n2 
    else if h : n2 < n1 ‚àß n2 < n3 then 
      if h2 : n1 < n3 then 
        smallest_is_half_largest n2 n3 
        else 
        smallest_is_half_largest n2 n1 
    else 
      if h2 : n1 < n2 then 
        smallest_is_half_largest n3 n2 
        else 
        smallest_is_half_largest n3 n1) = true ‚àß 
    (if h : n1 < n2 ‚àß n1 < n3 then
       if h2 : n2 < n3 then 
         n1 * n2 * n3 
         else 
         n1 * n3 * n2 
     else if h : n2 < n1 ‚àß n2 < n3 then 
       if h2 : n1 < n3 then 
         n2 * n1 * n3
         else 
         n2 * n3 * n1 
     else 
       if h2 : n1 < n2 then 
         n3 * n1 * n2 
         else 
         n3 * n2 * n1) = 224 := sorry

end number_of_factors_in_224_l101_101795


namespace count_axisymmetric_shapes_eq_four_l101_101560

-- Define the given shapes
inductive Shape
| line_segment
| right_angle
| isosceles_triangle
| parallelogram
| rectangle

open Shape

-- Define a function to check if a shape is axisymmetric
def is_axisymmetric : Shape ‚Üí Bool
| line_segment := true
| right_angle := true
| isosceles_triangle := true
| parallelogram := false
| rectangle := true

-- Define a function to count the number of axisymmetric shapes in a list
def count_axisymmetric (shapes : List Shape) : Nat :=
  shapes.filter is_axisymmetric |>.length

-- Define the list of given shapes
def given_shapes : List Shape := [line_segment, right_angle, isosceles_triangle, parallelogram, rectangle]

-- The proof problem statement
theorem count_axisymmetric_shapes_eq_four :
  count_axisymmetric given_shapes = 4 :=
by
  sorry

end count_axisymmetric_shapes_eq_four_l101_101560


namespace water_left_in_cooler_l101_101328

def initial_gallons := 3
def ounces_per_gallon := 128
def dixie_cup_ounces := 6
def rows_of_chairs := 5
def chairs_per_row := 10

theorem water_left_in_cooler :
  let initial_ounces := initial_gallons * ounces_per_gallon,
      total_chairs := rows_of_chairs * chairs_per_row,
      total_ounces_used := total_chairs * dixie_cup_ounces,
      final_ounces := initial_ounces - total_ounces_used
  in final_ounces = 84 :=
  sorry

end water_left_in_cooler_l101_101328


namespace negation_of_implication_iff_l101_101238

variable (a : ‚Ñù)

theorem negation_of_implication_iff (p : a > 1 ‚Üí a^2 > 1) :
  ¬¨(a > 1 ‚Üí a^2 > 1) ‚Üî (a ‚â§ 1 ‚Üí a^2 ‚â§ 1) :=
by sorry

end negation_of_implication_iff_l101_101238


namespace pencils_given_l101_101487

theorem pencils_given (initial_pencils : ‚Ñï) (total_pencils : ‚Ñï) (received_pencils : ‚Ñï) 
  (h_initial : initial_pencils = 51) (h_total : total_pencils = 57) :
  received_pencils = total_pencils - initial_pencils :=
by
  rw [h_initial, h_total]
  exact Nat.sub_self 51

end pencils_given_l101_101487


namespace angle_between_vectors_l101_101567

variable (a : ‚Ñù √ó ‚Ñù := (1, sqrt 3))
variable (b : ‚Ñù √ó ‚Ñù := (3, m))
variable (m : ‚Ñù)
variable (projection_cond : (a.1 * b.1 + a.2 * b.2) / (sqrt (a.1^2 + a.2^2)) = 3)

theorem angle_between_vectors (a : ‚Ñù √ó ‚Ñù) (b : ‚Ñù √ó ‚Ñù) (h : (a.1 * b.1 + a.2 * b.2) / (sqrt (a.1^2 + a.2^2)) = 3) : 
  ‚àÉ Œ∏ : ‚Ñù, Œ∏ = œÄ / 6 :=
by
  -- Placeholder for proof
  sorry

end angle_between_vectors_l101_101567


namespace tangent_line_equation_and_triangle_area_l101_101936

theorem tangent_line_equation_and_triangle_area
  (curve : ‚Ñù ‚Üí ‚Ñù)
  (tangent_l1 : ‚Ñù ‚Üí ‚Ñù)
  (tangent_l2 : ‚Ñù ‚Üí ‚Ñù)
  (tangent_at_point : tangent_l1 = Œª x, 3 * x - 3)
  (tangent_curve_relationship : ‚àÄ x, tangent_l1 x = x^2 + x - 2 ‚àß
                                     tangent_l2 x = (2 * (-2/3) + 1) * x - ((-2/3)^2 + (-2/3) - 2))
  (perpendicular_relationship : ‚àÄ x, (tangent_l1 x).derivative * (tangent_l2 x).derivative = -1) :
  (‚àÄ x, tangent_l2 x = -1/3 * x - 22/9) ‚àß 
  (1/2 * 25/3 * 5/2 = 125/12) :=
by
  sorry

end tangent_line_equation_and_triangle_area_l101_101936


namespace no_psafe_numbers_l101_101499

def is_psafe (n p : ‚Ñï) : Prop := 
  ¬¨ (n % p = 0 ‚à® n % p = 1 ‚à® n % p = 2 ‚à® n % p = 3 ‚à® n % p = p - 3 ‚à® n % p = p - 2 ‚à® n % p = p - 1)

theorem no_psafe_numbers (N : ‚Ñï) (hN : N = 10000) :
  ‚àÄ n, (n ‚â§ N ‚àß is_psafe n 5 ‚àß is_psafe n 7 ‚àß is_psafe n 11) ‚Üí false :=
by
  sorry

end no_psafe_numbers_l101_101499


namespace range_m_l101_101224
noncomputable def z (m : ‚Ñù) : ‚ÑÇ := 1 + complex.I + m / (1 + complex.I)

theorem range_m (m : ‚Ñù) :
  (1 + (m / 2) : ‚Ñù) > 0 ‚àß (1 - (m / 2) : ‚Ñù) > 0 ‚Üî -2 < m ‚àß m < 2 :=
by {
  sorry
}

end range_m_l101_101224


namespace non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101442

def g (m : Nat) : Nat :=
  let f k := m / k
  f 5 + f 25 + f 125 + f 625 + f 3125 + f 15625 + f 78125 + f 390625 + f 1953125 + f 9765625 + f 48828125 + f 244140625 + f 1220703125 + f 6103515625 + f 30517578125 -- continue as needed

def is_factorial_tail (n : Nat) : Prop :=
  ‚àÉ m : Nat, g m = n

def count_factorial_tails (N : Nat) : Nat :=
  (List.range N).filter (Œª n, is_factorial_tail n).length

theorem non_factorial_tails_lemma : count_factorial_tails 2500 = 2000 := sorry

theorem count_non_factorial_tails (N : Nat) : Prop :=
  let total := N - 1
  total - count_factorial_tails N = 499

theorem solution : count_non_factorial_tails 2500 := sorry

end non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101442


namespace sum_f_sigma_over_permutations_l101_101029

open Finset

-- Definitions for transpositions and permutations
def transposition (n : ‚Ñï) := Œ£ i j : Fin n, i ‚â† j

def f_sigma (œÉ : Equiv.Perm (Fin 7)) : ‚Ñï :=
  œÉ.support.card - 1

-- Main statement to prove
theorem sum_f_sigma_over_permutations : 
  (‚àë œÉ in univ (Equiv.Perm (Fin 7)), f_sigma œÉ) = 22212 :=
sorry

end sum_f_sigma_over_permutations_l101_101029


namespace non_factorial_tails_lt_2500_l101_101434

-- Define the function f(m)
def f (m: ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625

-- Define what it means to be a factorial tail
def is_factorial_tail (n: ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, f(m) = n

-- Define the statement to be proved
theorem non_factorial_tails_lt_2500 : 
  (finset.range 2500).filter (Œª n, ¬¨ is_factorial_tail n).card = 499 :=
by
  sorry

end non_factorial_tails_lt_2500_l101_101434


namespace problem_l101_101562

variable (U : Set ‚Ñï) (M : Set ‚Ñï) (N : Set ‚Ñï)

axiom universal_set : U = {1, 2, 3, 4, 5, 6, 7}
axiom set_M : M = {3, 4, 5}
axiom set_N : N = {1, 3, 6}

def complement (U M : Set ‚Ñï) : Set ‚Ñï := {x | x ‚àà U ‚àß x ‚àâ M}

theorem problem :
  {1, 6} = (complement U M) ‚à© N :=
by
  sorry

end problem_l101_101562


namespace ways_to_choose_organizers_and_leaders_l101_101191

theorem ways_to_choose_organizers_and_leaders : 
  ‚àÉ (n k : ‚Ñï), n = 6 ‚àß k = 3 ‚àß (nat.choose n k) * (k * k) = 180 := 
by
  use 6
  use 3
  split
  { refl }
  split
  { refl }
  simp only [nat.choose, nat.factorial]
  norm_num
  sorry

end ways_to_choose_organizers_and_leaders_l101_101191


namespace find_points_on_number_line_l101_101519

noncomputable def numbers_are_opposite (x y : ‚Ñù) : Prop :=
  x = -y

theorem find_points_on_number_line (A B : ‚Ñù) 
  (h1 : numbers_are_opposite A B) 
  (h2 : |A - B| = 8) 
  (h3 : A < B) : 
  (A = -4 ‚àß B = 4) :=
by
  sorry

end find_points_on_number_line_l101_101519


namespace not_factorial_tails_count_l101_101458

def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) -- you can extend further if needed

def is_factorial_tail (n : ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, m > 0 ‚àß f(m) = n

theorem not_factorial_tails_count : 
  ‚àÉ c : ‚Ñï, c = 500 ‚àß ‚àÄ k : ‚Ñï, k < 2500 ‚Üí ¬¨is_factorial_tail k ‚Üí k < 2500 - c :=
by
  sorry

end not_factorial_tails_count_l101_101458


namespace number_of_towers_l101_101359

-- Variables representing the number of cubes of each color
def num_red_cubes : ‚Ñï := 3
def num_blue_cubes : ‚Ñï := 3
def num_green_cubes : ‚Ñï := 3
def tower_height : ‚Ñï := 7

-- Function to calculate binomial coefficient
def binomial (n k : ‚Ñï) : ‚Ñï := Nat.choose n k

-- Sum of valid combinations for creating the towers
def valid_combinations_sum : ‚Ñï := 
  (binomial 9 7) * ‚àë r in Finset.Icc 0 num_red_cubes,
  ‚àë b in Finset.Icc 0 num_blue_cubes,
  ‚àë g in Finset.Icc 0 num_green_cubes, 
  if r + b + g = tower_height then
    Nat.factorial tower_height / (Nat.factorial r * Nat.factorial b * Nat.factorial g)
  else
    0

-- Theorem to prove the number of different towers is 140
theorem number_of_towers : valid_combinations_sum = 140 := 
  sorry

end number_of_towers_l101_101359


namespace angle_AMC_equals_angle_BMP_l101_101916

variables {A B C M P : Type}
variables (triangle_ABC : is_isosceles_triangle A B C)
variables (midpoint_M : is_midpoint M A B)
variables (right_angle_A : ‚à†A = 90)
variables (perpendicular_line : ‚àÄ (line_CM : ‚àÉ line_CM, is_perpendicular line_CM CM ‚àß passes_through line_CM A), intersects (pass_through A (perpendicular_to CM)) BC P)

theorem angle_AMC_equals_angle_BMP :
  ‚à†AMC = ‚à†BMP :=
sorry

end angle_AMC_equals_angle_BMP_l101_101916


namespace fruit_basket_count_l101_101571

theorem fruit_basket_count :
  let apples := 6
  let oranges := 8
  let min_apples := 2
  let min_fruits := 1
  (0 <= oranges ‚àß oranges <= 8) ‚àß (min_apples <= apples ‚àß apples <= 6) ‚àß (min_fruits <= (apples + oranges)) ‚Üí
  (5 * 9 = 45) :=
by
  intro h
  sorry

end fruit_basket_count_l101_101571


namespace net_gain_of_C_l101_101669

theorem net_gain_of_C : 
  let initial_value : ‚Ñï := 20000,
      selling_price : ‚Ñï := initial_value * 6 / 5, -- 20% profit
      buying_price : ‚Ñï := selling_price * 17 / 20 -- 15% loss
  in selling_price - buying_price = 3600 :=
by 
  sorry

end net_gain_of_C_l101_101669


namespace value_of_place_ratio_l101_101624

theorem value_of_place_ratio :
  let d8_pos := 10000
  let d6_pos := 0.1
  d8_pos = 100000 * d6_pos :=
by
  let d8_pos := 10000
  let d6_pos := 0.1
  sorry

end value_of_place_ratio_l101_101624


namespace true_propositions_l101_101836

theorem true_propositions :
  (("if p then q" and "if ¬¨q then ¬¨p" are contrapositive propositions of each other) = true) ‚àß
  ((am^2 < bm^2 is a necessary and sufficient condition for a < b) = false) ‚àß
  ((the negation of the proposition "the diagonals of a rectangle are equal in length" is false) = false) ‚àß
  ((the roots of the equation 2*x^2 - 5*x + 2 = 0 can represent the eccentricities of an ellipse and a hyperbola) = true) ‚àß
  ((the directrix equation of the parabola y = 4*x^2 is y = -1) = false) ‚Üî
  ([1, 4] = [1, 4]) := 
by
  sorry

end true_propositions_l101_101836


namespace rita_months_needed_l101_101995

noncomputable def total_hours_needed : ‚Ñï := 1500
noncomputable def hours_backstroke : ‚Ñï := 50
noncomputable def hours_breaststroke : ‚Ñï := 9
noncomputable def hours_butterfly : ‚Ñï := 121
noncomputable def monthly_hours : ‚Ñï := 220
noncomputable def completed_hours_so_far : ‚Ñï := hours_backstroke + hours_breaststroke + hours_butterfly
noncomputable def remaining_hours : ‚Ñï := total_hours_needed - completed_hours_so_far
noncomputable def months_needed : ‚Ñï := remaining_hours / monthly_hours

theorem rita_months_needed : months_needed = 6 :=
by
  rw [total_hours_needed, completed_hours_so_far, hours_backstroke, hours_breaststroke, hours_butterfly, monthly_hours, remaining_hours, months_needed]
  exact sorry

end rita_months_needed_l101_101995


namespace ch_sub_ch_add_sh_sub_sh_add_l101_101953

noncomputable def sh (x : ‚Ñù) : ‚Ñù := (Real.exp x - Real.exp (-x)) / 2
noncomputable def ch (x : ‚Ñù) : ‚Ñù := (Real.exp x + Real.exp (-x)) / 2

theorem ch_sub (x y : ‚Ñù) : ch (x - y) = ch x * ch y - sh x * sh y := sorry
theorem ch_add (x y : ‚Ñù) : ch (x + y) = ch x * ch y + sh x * sh y := sorry
theorem sh_sub (x y : ‚Ñù) : sh (x - y) = sh x * ch y - ch x * sh y := sorry
theorem sh_add (x y : ‚Ñù) : sh (x + y) = sh x * ch y + ch x * sh y := sorry

end ch_sub_ch_add_sh_sub_sh_add_l101_101953


namespace sum_of_other_endpoint_coordinates_l101_101708

theorem sum_of_other_endpoint_coordinates
  (x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ : ‚Ñù)
  (hx : (x‚ÇÅ + x‚ÇÇ) / 2 = 5)
  (hy : (y‚ÇÅ + y‚ÇÇ) / 2 = -8)
  (endpt1 : x‚ÇÅ = 7)
  (endpt2 : y‚ÇÅ = -2) :
  x‚ÇÇ + y‚ÇÇ = -11 :=
sorry

end sum_of_other_endpoint_coordinates_l101_101708


namespace proof_problem_l101_101911

noncomputable def line_l (t Œ± : ‚Ñù) : ‚Ñù √ó ‚Ñù :=
  (t * Real.cos Œ±, 2 + t * Real.sin Œ±)

noncomputable def curve_C (Œ∏ œÅ : ‚Ñù) : Prop :=
  œÅ * (Real.cos Œ∏)^2 = 4 * Real.sin Œ∏

theorem proof_problem {Œ± : ‚Ñù} (hŒ± : 0 ‚â§ Œ± ‚àß Œ± < Real.pi) :
  let l_general_eqn := (Œ± = Real.pi / 6) ‚Üí (‚àÄ t : ‚Ñù, line_l t (Real.pi / 6) = (t * (Real.cos (Real.pi / 6)), 2 + t * (Real.sin (Real.pi / 6)))) ‚Üí ‚àÉ a b c, a * line_l t (Real.pi / 6) + b * line_l t (Real.pi / 6) + c = 0
  ‚àß (‚àÄ Œ∏ œÅ : ‚Ñù, curve_C Œ∏ œÅ ‚Üí ‚àÉ x y, x^2 = 4*y)
  ‚àß (‚àÄ A B : ‚Ñù √ó ‚Ñù, l_general_eqn ‚Üí curve_C A.2 A.1 ‚Üí curve_C B.2 B.1 ‚Üí ‚àÉ min_dist : ‚Ñù, dist A B = 4 * Real.sqrt 2) := sorry

end proof_problem_l101_101911


namespace triangle_area_l101_101079

variables (a b c : ‚Ñù)
noncomputable def sin (x : ‚Ñù) := Real.sin x

theorem triangle_area (h1 : a^2 = b^2 + c^2 - b * c) (h2 : b * c = 16) :
  (1 / 2) * b * c * sin (real.pi / 3) = 4 * Real.sqrt 3 :=
by
  sorry

end triangle_area_l101_101079


namespace line_l_standard_eq_dot_product_constant_l101_101518

section
variables {t Œ± : ‚Ñù} (Œ∏ œÅ : ‚Ñù)

-- Conditions:
-- Parametric equation of line l
def line_l (t Œ± : ‚Ñù) : ‚Ñù √ó ‚Ñù := (1 + t * real.cos Œ±, t * real.sin Œ±)

-- Polar equation of curve C
def curve_C (œÅ Œ∏ : ‚Ñù) : Prop :=
  œÅ * real.cos Œ∏ ^ 2 + 4 * real.cos Œ∏ = œÅ ‚àß (œÅ ‚â• 0) ‚àß (0 ‚â§ Œ∏ ‚àß Œ∏ ‚â§ 2 * real.pi)

-- Prove:
theorem line_l_standard_eq (Œ± : ‚Ñù) (hŒ± : Œ± = real.pi / 3) :
  let (x, y) := line_l t (real.pi / 3) in y = real.sqrt 3 * (x - 1) :=
by
  sorry

theorem dot_product_constant {A B : ‚Ñù √ó ‚Ñù} (hA : A ‚àà set.range (Œª (t : ‚Ñù), line_l t (real.pi / 3)))
  (hB : B ‚àà set.range (Œª (t : ‚Ñù), line_l t (real.pi / 3)))
  (hCA : curve_C (real.sqrt (A.1 ^ 2 + A.2 ^ 2)) (real.atan2 A.2 A.1))
  (hCB : curve_C (real.sqrt (B.1 ^ 2 + B.2 ^ 2)) (real.atan2 B.2 B.1)) :
  A.1 * B.1 + A.2 * B.2 = -3 :=
by 
  sorry

end

end line_l_standard_eq_dot_product_constant_l101_101518


namespace allowance_amount_l101_101398

variable (initial_money spent_money final_money : ‚Ñï)

theorem allowance_amount (initial_money : ‚Ñï) (spent_money : ‚Ñï) (final_money : ‚Ñï) (h1: initial_money = 5) (h2: spent_money = 2) (h3: final_money = 8) : (final_money - (initial_money - spent_money)) = 5 := 
by 
  sorry

end allowance_amount_l101_101398


namespace intensity_on_Thursday_l101_101827

-- Step a) - Definitions from Conditions
def inversely_proportional (i b k : ‚Ñï) : Prop := i * b = k

-- Translation of the proof problem
theorem intensity_on_Thursday (k b : ‚Ñï) (h‚ÇÅ : k = 24) (h‚ÇÇ : b = 3) : ‚àÉ i, inversely_proportional i b k ‚àß i = 8 := 
by
  sorry

end intensity_on_Thursday_l101_101827


namespace sum_of_divisors_37_l101_101314

theorem sum_of_divisors_37 : ‚àë d in (finset.filter (Œª d, 37 % d = 0) (finset.range 38)), d = 38 :=
by {
  sorry
}

end sum_of_divisors_37_l101_101314


namespace range_a_empty_intersection_range_a_sufficient_condition_l101_101933

noncomputable def A (x : ‚Ñù) : Prop := -10 < x ‚àß x < 2
noncomputable def B (x : ‚Ñù) (a : ‚Ñù) : Prop := x ‚â• 1 + a ‚à® x ‚â§ 1 - a
noncomputable def A_inter_B_empty (a : ‚Ñù) : Prop := ‚àÄ x : ‚Ñù, A x ‚Üí ¬¨ B x a
noncomputable def neg_p (x : ‚Ñù) : Prop := x ‚â• 2 ‚à® x ‚â§ -10
noncomputable def neg_p_implies_q (a : ‚Ñù) : Prop := ‚àÄ x : ‚Ñù, neg_p x ‚Üí B x a

theorem range_a_empty_intersection : (‚àÄ x : ‚Ñù, A x ‚Üí ¬¨ B x 11) ‚Üí 11 ‚â§ a := by
  sorry

theorem range_a_sufficient_condition : (‚àÄ x : ‚Ñù, neg_p x ‚Üí B x 1) ‚Üí 0 < a ‚àß a ‚â§ 1 := by
  sorry

end range_a_empty_intersection_range_a_sufficient_condition_l101_101933


namespace no_multiple_of_10_l101_101135

theorem no_multiple_of_10 (grid: Fin 8 ‚Üí Fin 8 ‚Üí ‚Ñï)
  (operation : (Fin 8 ‚Üí Fin 8) ‚Üí (Fin (max 3 4) ‚Üí Fin (max 3 4)) ‚Üí (Fin 8 ‚Üí Fin 8 ‚Üí ‚Ñï) ‚Üí (Fin 8 ‚Üí Fin 8 ‚Üí ‚Ñï))
  (h_op: ‚àÄ grid, ‚àÄ f: Fin (max 3 4) ‚Üí Fin (max 3 4), ‚àÄ g: Fin 8 ‚Üí Fin 8, 
    operation g f grid = Œª i j, grid i j + 1) :
  ¬¨ ‚àÉ n: ‚Ñï, ‚àÄ i j: Fin 8, (operation g f grid i j) % 10 = 0 := 
begin
  sorry
end

end no_multiple_of_10_l101_101135


namespace original_number_l101_101814

theorem original_number (N y x : ‚Ñï) 
  (h1: N + y = 54321)
  (h2: N = 10 * y + x)
  (h3: 11 * y + x = 54321)
  (h4: x = 54321 % 11)
  (hy: y = 4938) : 
  N = 49383 := 
  by 
  sorry

end original_number_l101_101814


namespace angle_equality_l101_101140

variables {A B C D E F : Type*} [Nonempty A] [Nonempty B] [Nonempty C] [Nonempty D] [Nonempty E] [Nonempty F]
variables (angle : Type*) (‚à† : A ‚Üí B ‚Üí C ‚Üí angle)
variables (circumcircle : A ‚Üí B ‚Üí D ‚Üí Type*) (lies_on : E ‚Üí (circumcircle A B D) ‚Üí Prop) (intersection_point : A ‚Üí C ‚Üí circumcircle = F)

theorem angle_equality
  (h1 : E ‚àà BD) (h2 : ‚à† E C D = ‚à† A C B) 
  (h3 : lies_on F (circumcircle A B D))
  (h4 : ‚à† A C B = ‚à† D A F) :
  ‚à† D F E = ‚à† A F B :=
by
  sorry

end angle_equality_l101_101140


namespace trajectory_of_P_l101_101925

-- Define points M and N
def M : ‚Ñù √ó ‚Ñù := (-3, 0)
def N : ‚Ñù √ó ‚Ñù := (3, 0)

-- Define the condition |PM| - |PN| = 4
def satisfies_condition (P : ‚Ñù √ó ‚Ñù) : Prop :=
  Real.sqrt ((P.1 - M.1)^2 + (P.2 - M.2)^2) - Real.sqrt ((P.1 - N.1)^2 + (P.2 - N.2)^2) = 4

-- Define the target proposition: P lies on the right branch of a hyperbola with foci M and N
def right_branch_hyperbola (P : ‚Ñù √ó ‚Ñù) : Prop :=
  (sqrt (((M.1 + N.1) / 2 - P.1)^2 + P.2^2) > 3) ‚àß (P.1 > (M.1 + N.1) / 2)

theorem trajectory_of_P (P : ‚Ñù √ó ‚Ñù) (h : satisfies_condition P) :
  right_branch_hyperbola P :=
sorry

end trajectory_of_P_l101_101925


namespace jenny_kenny_meet_time_l101_101154

-- Definitions of initial conditions
def jen_speed := 2 -- Jenny's speed in feet per second
def ken_speed := 4 -- Kenny's speed in feet per second
def path_distance := 300 -- Distance between paths in feet
def building_diameter := 150 -- Diameter of the building in feet
def obstruct_distance_start := 300 -- Initial obstruct distance in feet

-- The radius of the building from its diameter
def building_radius : ‚Ñù := building_diameter / 2

-- Proof statement
theorem jenny_kenny_meet_time :
  (‚àÉ (t : ‚Ñù), 
    t = 48 ‚àß
    -- condition 5 revised for clarity in the theorem context
    (obstruct_distance_start = path_distance) ‚àß
    ‚àÄùë° (t > 0), 
    (4 * t + 2 * t = 300 + 2 * 150) -- Line obstruction geometry adapted for proof clarity
  ) :=
sorry

end jenny_kenny_meet_time_l101_101154


namespace num_integer_solutions_l101_101965

theorem num_integer_solutions : 
  (‚àÄ x : ‚Ñ§, (x^2 - x - 1)^(x + 2) = 1) ‚Üí (‚àÄ x : ‚Ñ§, List.mem x [2, -1, 0, -2]) ‚Üí (List.length [2, -1, 0, -2] = 4) :=
by
  sorry

end num_integer_solutions_l101_101965


namespace exponentiation_division_l101_101847

variable (a b : ‚Ñù)

theorem exponentiation_division (a b : ‚Ñù) : ((2 * a) / b) ^ 4 = (16 * a ^ 4) / (b ^ 4) := by
  sorry

end exponentiation_division_l101_101847


namespace non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101445

def g (m : Nat) : Nat :=
  let f k := m / k
  f 5 + f 25 + f 125 + f 625 + f 3125 + f 15625 + f 78125 + f 390625 + f 1953125 + f 9765625 + f 48828125 + f 244140625 + f 1220703125 + f 6103515625 + f 30517578125 -- continue as needed

def is_factorial_tail (n : Nat) : Prop :=
  ‚àÉ m : Nat, g m = n

def count_factorial_tails (N : Nat) : Nat :=
  (List.range N).filter (Œª n, is_factorial_tail n).length

theorem non_factorial_tails_lemma : count_factorial_tails 2500 = 2000 := sorry

theorem count_non_factorial_tails (N : Nat) : Prop :=
  let total := N - 1
  total - count_factorial_tails N = 499

theorem solution : count_non_factorial_tails 2500 := sorry

end non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101445


namespace ellipse_properties_ellipse_intersection_theorem_l101_101942

noncomputable def ellipse_equation (a b : ‚Ñù) : ‚Ñù √ó ‚Ñù ‚Üí Prop :=
  Œª p, (p.1^2/a^2 + p.2^2/b^2 = 1)

def focal_distance (a b c : ‚Ñù) : Prop :=
  a^2 - b^2 = c^2

def passes_through_point (a b : ‚Ñù) (p : ‚Ñù √ó ‚Ñù) : Prop :=
  ellipse_equation a b p

def isonceles_triangle {x E B : ‚Ñù √ó ‚Ñù} : Prop :=
  E.2 = x.2 + B.2

theorem ellipse_properties :
  ‚àÉ a b : ‚Ñù, ‚àÉ C : ‚Ñù √ó ‚Ñù ‚Üí Prop,
  (a > b ‚àß b > 0) ‚àß
  (focal_distance a b (2 * real.sqrt 3)) ‚àß
  (passes_through_point a b (2 * real.sqrt 3, 1)) ‚àß
  (C = ellipse_equation 4 2)
:=
begin
  sorry
end

theorem ellipse_intersection_theorem :
  let C : ‚Ñù √ó ‚Ñù ‚Üí Prop := ellipse_equation 4 2,
      k : ‚Ñù := real.sqrt 2 / 4,
      B : ‚Ñù √ó ‚Ñù := (0, -2),
      E := (real.sqrt 2 / 4, 1 - real.sqrt 2),
      F := (- real.sqrt 2 / 4, 1 + real.sqrt 2),
      circle := Œª p : ‚Ñù √ó ‚Ñù, p.1^2 + p.2^2 = 0.5 in
  isonceles_triangle E F B ‚Üí
  ‚àÄ M‚ÇÄ M : ‚Ñù √ó ‚Ñù, 
    (M‚ÇÄ.1 * E.1 + M‚ÇÄ.2 * E.2 = M.1 * E.1 + M.2 * E.2) ‚Üí
    (M.2 - M‚ÇÄ.2 = k * (M.1 - M‚ÇÄ.1)) ‚Üí
    (let d := abs 1/(M.1 * C.trace + M.1 * B.trace) Ctrace_circle := let dist := abs 2*B.trace ‚àß (dist > real.sqrt 2/2) in intersect : 
  ‚àÄ p; 
    (p = C.trace div circle ‚Üí Csection := ‚àÖ):=
begin
  sorry
end

end ellipse_properties_ellipse_intersection_theorem_l101_101942


namespace point_in_second_quadrant_l101_101969

theorem point_in_second_quadrant (A B C : ‚Ñù) (hA : 0 < A ‚àß A < 90) (hB : 0 < B ‚àß B < 90) (hC : 0 < C ‚àß C < 90) (h_sum : A + B + C = 180) : 
  (-1 * (cos B - sin A) > 0 ‚àß sin B - cos A > 0) :=
by
  sorry

end point_in_second_quadrant_l101_101969


namespace non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101441

def g (m : Nat) : Nat :=
  let f k := m / k
  f 5 + f 25 + f 125 + f 625 + f 3125 + f 15625 + f 78125 + f 390625 + f 1953125 + f 9765625 + f 48828125 + f 244140625 + f 1220703125 + f 6103515625 + f 30517578125 -- continue as needed

def is_factorial_tail (n : Nat) : Prop :=
  ‚àÉ m : Nat, g m = n

def count_factorial_tails (N : Nat) : Nat :=
  (List.range N).filter (Œª n, is_factorial_tail n).length

theorem non_factorial_tails_lemma : count_factorial_tails 2500 = 2000 := sorry

theorem count_non_factorial_tails (N : Nat) : Prop :=
  let total := N - 1
  total - count_factorial_tails N = 499

theorem solution : count_non_factorial_tails 2500 := sorry

end non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101441


namespace cos_sum_identity_l101_101930

-- Define conditions:
def argument_of (z : ‚ÑÇ) := complex.arg z

-- Theorem statement:
theorem cos_sum_identity (z : ‚ÑÇ) (h : z ‚â† 0) :
  let Œ± := complex.arg z in
  (complex.cos Œ± + complex.cos (2 * Œ±) + complex.cos (3 * Œ±) = -1 / 2) :=
by
  sorry

end cos_sum_identity_l101_101930


namespace probability_DEQ_greater_than_DFQ_and_EFQ_l101_101375

namespace EquilateralTriangle

noncomputable def probability_in_quadrilateral (DEF : Type) [triangle DEF] : ‚Ñù :=
  let centroid := centroid DEF
  let quadrilateral_area := area (quadrilateral FGHI)
  let total_area := area DEF
  quadrilateral_area / total_area

theorem probability_DEQ_greater_than_DFQ_and_EFQ (Q : Point DEF) :
  Q ‚àà interior DEF ‚Üí
  (area (triangle DEQ) > area (triangle DFQ)) ‚Üí 
  (area (triangle DEQ) > area (triangle EFQ)) ‚Üí
  probability_in_quadrilateral DEF = 1 / 3 := 
by sorry

end EquilateralTriangle

end probability_DEQ_greater_than_DFQ_and_EFQ_l101_101375


namespace international_postage_surcharge_l101_101859

theorem international_postage_surcharge 
  (n_letters : ‚Ñï) 
  (std_postage_per_letter : ‚Ñö) 
  (n_international : ‚Ñï) 
  (total_cost : ‚Ñö) 
  (cents_per_dollar : ‚Ñö) 
  (std_total_cost : ‚Ñö) 
  : 
  n_letters = 4 ‚Üí
  std_postage_per_letter = 108 / 100 ‚Üí
  n_international = 2 ‚Üí
  total_cost = 460 / 100 ‚Üí
  cents_per_dollar = 100 ‚Üí
  std_total_cost = n_letters * std_postage_per_letter ‚Üí
  (total_cost - std_total_cost) / n_international * cents_per_dollar = 14 := 
sorry

end international_postage_surcharge_l101_101859


namespace maximum_omega_l101_101075

theorem maximum_omega : 
  ‚àÄ (œâ : ‚Ñù),
  (‚àÄ x : ‚Ñù, x ‚àà Icc (-œÄ / 12) (œÄ / 4) ‚Üí -œÄ / 3 ‚â§ 4 * œâ * x ‚àß 4 * œâ * x ‚â§ œÄ / 2) ‚Üí
  œâ ‚â§ 1/2 :=
by sorry

end maximum_omega_l101_101075


namespace find_lambda_l101_101183

variables (a b : Type) [AddCommGroup a] [Module ‚Ñù a]
variables (u v : a) (Œª : ‚Ñù)

-- Definition: vectors a and b are non-parallel
def non_parallel (u v : a) : Prop := ¬¨ (‚àÉ k : ‚Ñù, u = k ‚Ä¢ v)

-- Definition: vector addition under the given lambda
def parallel_condition (u v : a) (Œª : ‚Ñù) : Prop := 
  ‚àÉ k : ‚Ñù, (Œª ‚Ä¢ u + v) = k ‚Ä¢ (u - 2 ‚Ä¢ v)

-- Theorem to prove
theorem find_lambda (h1 : non_parallel u v) (h2 : parallel_condition u v Œª) : Œª = -1 / 2 :=
sorry

end find_lambda_l101_101183


namespace find_radius_l101_101790
-- Definitions for the conditions
def diameter_hole : ‚Ñù := 24
def depth_hole : ‚Ñù := 8
def r : ‚Ñù := diameter_hole / 2
def d (R : ‚Ñù) : ‚Ñù := R - depth_hole

-- The Pythagorean theorem applied to this scenario
lemma radius_of_ball (R : ‚Ñù) : R^2 = r^2 + (d R)^2 := by
  unfold r d

-- Prove that the radius R is 13 based on the given conditions
theorem find_radius : ‚àÉ (R : ‚Ñù), R^2 = 12^2 + (R - 8)^2 ‚àß R = 13 := by
  use 13
  split
  -- Prove that 13^2 = 12^2 + (13 - 8)^2
  calc 13^2 = 169 : by norm_num
       ... = 144 + 25 : by norm_num
  sorry

end find_radius_l101_101790


namespace solve_proof_problem_l101_101522

noncomputable def proof_problem (alpha : ‚Ñù) :=
  ùöúùöéùöåùöòùöóùöçùöÄùöûùöäùöçùöõùöäùöóùöù : ‚àÉ k : ‚Ñ§, Œ± ‚àà set.Ioo (k * (2 * Real.pi) + Real.pi / 2) (k * (2 * Real.pi) + Real.pi) ‚àß
  (h : Real.sin (alpha + Real.pi / 6) = 1 / 3),
  Real.sin (2 * alpha + Real.pi / 3) = -4 * Real.sqrt 2 / 9

theorem solve_proof_problem (alpha : ‚Ñù) (h1 : ‚àÉ k : ‚Ñ§, alpha ‚àà set.Ioo (k * (2 * Real.pi) + Real.pi / 2) (k * (2 * Real.pi) + Real.pi)) 
                             (h2 : Real.sin (alpha + Real.pi / 6) = 1 / 3) :
  Real.sin (2 * alpha + Real.pi / 3) = -4 * Real.sqrt 2 / 9 :=
sorry

end solve_proof_problem_l101_101522


namespace range_f_x_negative_l101_101062

-- We define the conditions: f is an even function, increasing on (-‚àû, 0), and f(2) = 0.
variables {f : ‚Ñù ‚Üí ‚Ñù}

def even_function (f : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x, f x = f (-x)

def increasing_on_neg_infinity_to_zero (f : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x y, x < y ‚Üí x < 0 ‚àß y < 0 ‚Üí f x ‚â§ f y

def f_at_2_is_zero (f : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  f 2 = 0

-- The theorem to be proven.
theorem range_f_x_negative (hf_even : even_function f)
  (hf_incr : increasing_on_neg_infinity_to_zero f)
  (hf_at2 : f_at_2_is_zero f) :
  ‚àÄ x, f x < 0 ‚Üî x < -2 ‚à® x > 2 :=
by
  sorry

end range_f_x_negative_l101_101062


namespace problem1_problem2_l101_101039

def f (x a : ‚Ñù) := |x - 1| + |x - a|

/-
  Problem 1:
  Prove that if a = 3, the solution set to the inequality f(x) ‚â• 4 is 
  {x | x ‚â§ 0 ‚à® x ‚â• 4}.
-/
theorem problem1 (f : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù) (a : ‚Ñù) (h : a = 3) : 
  {x : ‚Ñù | f x a ‚â• 4} = {x : ‚Ñù | x ‚â§ 0 ‚à® x ‚â• 4} := 
sorry

/-
  Problem 2:
  Prove that for any x‚ÇÅ ‚àà ‚Ñù, if f(x‚ÇÅ) ‚â• 2 holds true, the range of values for
  a is {a | a ‚â• 3 ‚à® a ‚â§ -1}.
-/
theorem problem2 (f : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù) (x‚ÇÅ : ‚Ñù) :
  (‚àÄ x‚ÇÅ : ‚Ñù, f x‚ÇÅ a ‚â• 2) ‚Üî (a ‚â• 3 ‚à® a ‚â§ -1) :=
sorry

end problem1_problem2_l101_101039


namespace range_of_c_l101_101555

def cubic_polynomial (a b c : ‚Ñù) : (x : ‚Ñù) ‚Üí ‚Ñù := Œª x, x^3 + a * x^2 + b * x + c

theorem range_of_c {a b c : ‚Ñù}
  (h1 : 0 < cubic_polynomial a b c (-1))
  (h2 : cubic_polynomial a b c (-1) = cubic_polynomial a b c (-2))
  (h3 : cubic_polynomial a b c (-2) = cubic_polynomial a b c (-3))
  (h4 : cubic_polynomial a b c (-1) ‚â§ 3) :
  6 < c ‚àß c ‚â§ 9 := 
sorry

end range_of_c_l101_101555


namespace sum_first_9000_terms_l101_101249

noncomputable def geometric_sequence_sum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r^n) / (1 - r)

theorem sum_first_9000_terms (a r : ‚Ñù) :
  geometric_sequence_sum a r 3000 = 500 ‚Üí
  geometric_sequence_sum a r 6000 = 950 ‚Üí
  geometric_sequence_sum a r 9000 = 1355 :=
by
  intros h1 h2
  sorry

end sum_first_9000_terms_l101_101249


namespace length_of_train_l101_101011

-- Conditions
variable (L E T : ‚Ñù)
axiom h1 : 300 * E = L + 300 * T
axiom h2 : 90 * E = L - 90 * T

-- The statement to be proved
theorem length_of_train : L = 200 * E :=
by
  sorry

end length_of_train_l101_101011


namespace right_triangle_length_QR_l101_101601

theorem right_triangle_length_QR (Q P R : ‚Ñù) 
  (h1 : tan Q = 0.5) (h2 : ‚àÉ Q' P' R', QP = (Q' - P') = 16) (h3 : right_triangle Q P R) :
  QR = 8 * sqrt 5 := by
  sorry

end right_triangle_length_QR_l101_101601


namespace move_chocolates_l101_101846

theorem move_chocolates {p q : ‚Ñï} (hp_odd : p % 2 = 1) (hq_odd : q % 2 = 1) (h : p > q) :
  let chocolates_to_move := (p - q + 2) / 2
  (q + chocolates_to_move > p - chocolates_to_move) :=
by {
  let chocolates_to_move := (p - q + 2) / 2,
  have h1 : q + chocolates_to_move = q + (p - q + 2) / 2, from rfl,
  have h2 : p - chocolates_to_move = p - (p - q + 2) / 2, from rfl,
  have h3 : q + (p - q + 2) / 2 > p - (p - q + 2) / 2, sorry,
  exact h3
}

end move_chocolates_l101_101846


namespace find_equation_of_ellipse_and_line_l101_101516

variable (a b c m k : ‚Ñù)
variable (A B : ‚Ñù √ó ‚Ñù)
variable (O : ‚Ñù √ó ‚Ñù := (0, 0))
variable (F1 F2 : ‚Ñù √ó ‚Ñù)

def ellipse_C (x y : ‚Ñù) : Prop :=
  (x^2 / a^2) + (y^2 / b^2) = 1

def hyperbola_H (x y : ‚Ñù) : Prop :=
  (x^2 / 2) - y^2 = 1

theorem find_equation_of_ellipse_and_line :
  (a > b) ‚Üí
  (b > 0) ‚Üí
  (c / a = Real.sqrt 2 / 2) ‚Üí
  (dist (F1.1, F1.2) (line (1, Real.sqrt 2)) = Real.sqrt 3 / 3) ‚Üí
  (‚àÄ (x y : ‚Ñù), (line (k, m) x y) ‚Üí ellipse_C x y) ‚Üí
  k < 0 ‚Üí
  (dist O (line k m) = 2 * Real.sqrt 5 / 5) ‚Üí
  (‚àÉ a b : ‚Ñù, a = Real.sqrt 2 ‚àß b = 1 ‚àß (ellipse_C x y) ‚Üî (x^2 / 2 + y^2) = 1) ‚àß
  (‚àÉ k m : ‚Ñù, k = -1/2 ‚àß m = 1 ‚àß (line k m x y) ‚Üî (y = -1/2 * x + 1)) :=
sorry

end find_equation_of_ellipse_and_line_l101_101516


namespace fraction_equivalence_l101_101504

theorem fraction_equivalence (a b : ‚Ñù) (h : ((1 / a) + (1 / b)) / ((1 / a) - (1 / b)) = 2020) : (a + b) / (a - b) = 2020 :=
sorry

end fraction_equivalence_l101_101504


namespace evaluate_Q_at_2_l101_101729

-- Define the polynomial Q(x)
noncomputable def Q (x : ‚Ñö) : ‚Ñö := x^4 - 20 * x^2 + 16

-- Define the root condition of sqrt(3) + sqrt(7)
def root_condition (x : ‚Ñö) : Prop := (x = ‚Ñö.sqrt(3) + ‚Ñö.sqrt(7))

-- Theorem statement
theorem evaluate_Q_at_2 : Q 2 = -32 :=
by
  -- Given conditions
  have h1 : degree Q = 4 := sorry,
  have h2 : leading_coeff Q = 1 := sorry,
  have h3 : root_condition (‚Ñö.sqrt(3) + ‚Ñö.sqrt(7)) := sorry,
  -- Goal
  exact sorry

end evaluate_Q_at_2_l101_101729


namespace cos_of_odd_multiple_of_90_in_0_720_eq_neg6_l101_101104

theorem cos_of_odd_multiple_of_90_in_0_720_eq_neg6 : 
  ‚àÄ x : ‚Ñù, 
  (0 ‚â§ x) ‚Üí (x < 720) ‚Üí (‚àÉ k : ‚Ñ§, x = (2 * k + 1) * 90) ‚Üí cos (x * (œÄ / 180)) = -0.6 ‚Üí false :=
by
  intros x h0 h1 h2 hcos
  sorry

end cos_of_odd_multiple_of_90_in_0_720_eq_neg6_l101_101104


namespace find_original_number_l101_101804

-- Variables and assumptions
variables (N y x : ‚Ñï)

-- Conditions
def crossing_out_condition : Prop := N = 10 * y + x
def sum_condition : Prop := N + y = 54321
def remainder_condition : Prop := x = 54321 % 11
def y_value : Prop := y = 4938

-- The final proof problem statement
theorem find_original_number (h1 : crossing_out_condition N y x) (h2 : sum_condition N y) 
  (h3 : remainder_condition x) (h4 : y_value y) : N = 49383 :=
sorry

end find_original_number_l101_101804


namespace find_side_length_S2_l101_101676

-- Define the variables and conditions
variables (r s : ‚Ñï)
def is_solution (r s : ‚Ñï) : Prop :=
  2 * r + s = 2160 ‚àß 2 * r + 3 * s = 3450

-- Define the problem statement
theorem find_side_length_S2 (r s : ‚Ñï) (h : is_solution r s) : s = 645 :=
sorry

end find_side_length_S2_l101_101676


namespace number_of_divisors_of_1200_l101_101637

theorem number_of_divisors_of_1200 : 
  (number of d : ‚Ñï | d ‚à£ 1200 ‚àß 1 ‚â§ d ‚àß d ‚â§ 1200) = 30 :=
sorry

end number_of_divisors_of_1200_l101_101637


namespace calculate_sum_l101_101426

-- Define the right-angled triangle ABC
variables {A B C P Q E F : Point}
variable {c b : ‚Ñù}

-- Definition of right angle and lengths of sides involved
def right_angle_triangle (A B C : Point) (c b : ‚Ñù) :=
  angle A B C = œÄ / 2 ‚àß dist A B = c ‚àß dist A C = b

-- Points on sides and angles
def specific_points (P Q : Point) (A B C : Point) :=
  P ‚àà segment A C ‚àß Q ‚àà segment A B ‚àß angle A P Q = angle A B C ‚àß angle A Q P = angle A C B

-- Projections onto sides
def projections (E F P Q B C : Point) :=
  proj B onto (line B C) = E ‚àß proj Q onto (line B C) = F

-- Altitude calculation from right-angled triangle properties
def altitude (A B C : Point) (c b : ‚Ñù) : ‚Ñù :=
  dist A B * dist A C / sqrt ((dist A B) ^ 2 + (dist A C) ^ 2)

-- The theorem to prove PQ + PE + QF = 4 * h_a
theorem calculate_sum {A B C P Q E F : Point} {c b : ‚Ñù}
  (h1 : right_angle_triangle A B C c b)
  (h2 : specific_points P Q A B C)
  (h3 : projections E F P Q B C)
  : dist P Q + dist P E + dist Q F = 4 * altitude A B C c b :=
sorry -- the proof is to be completed

end calculate_sum_l101_101426


namespace right_column_sum_eq_ab_l101_101344

theorem right_column_sum_eq_ab (a b : ‚Ñ§) (h : a > 0) :
  let f : ‚Ñ§ √ó ‚Ñ§ ‚Üí ‚Ñ§ √ó ‚Ñ§ := Œª p, 
    if even p.1 then (p.1 / 2, p.2 * 2) else ((p.1 - 1) / 2, p.2 * 2)
    in 
    (‚àë n in Nat.range (Nat.log2 (Int.toNat a) + 1), 
      if (Nat.bitTest n (Int.toNat a)) 
      then some_fun (f^[n] (a, b)).2 
      else 0 ) = a * b :=
sorry

end right_column_sum_eq_ab_l101_101344


namespace Q_at_2_l101_101722

-- Define the polynomial Q(x)
def Q (x : ‚Ñö) : ‚Ñö := x^4 - 8 * x^2 + 16

-- Define the properties of Q(x)
def is_special_polynomial (P : (‚Ñö ‚Üí ‚Ñö)) : Prop := 
  degree P = 4 ‚àß leading_coeff P = 1 ‚àß P.is_root(‚àö3 + ‚àö7)

-- Problem: Prove Q(2) = 0 given the polynomial Q meets the conditions.
theorem Q_at_2 (Q : ‚Ñö ‚Üí ‚Ñö) (h1 : degree Q = 4) (h2 : leading_coeff Q = 1) (h3 : is_root Q (‚àö3 + ‚àö7)) : 
  Q 2 = 0 := by
  sorry

end Q_at_2_l101_101722


namespace f_extreme_values_b_range_if_a_greater_than_zero_and_consistent_on_minus2_infty_maximum_abs_diff_of_a_b_if_consistent_on_a_b_l101_101928

variables (a b : ‚Ñù)

def f (x : ‚Ñù) : ‚Ñù := x^3 + a * x
def g (x : ‚Ñù) : ‚Ñù := x^2 + b * x
def f' (x : ‚Ñù) : ‚Ñù := 3 * x^2 + a
def g' (x : ‚Ñù) : ‚Ñù := 2 * x + b

-- 1.
theorem f_extreme_values:
  if a ‚â• 0 then (‚àÄ x, (f' x) ‚â• 0) ‚àß ‚àÄ x, x = -2 * a * sqrt(-3 * a) / 9 ‚àß x = 2 * a * sqrt(-3 * a) / 9 :=
sorry

-- 2.
theorem b_range_if_a_greater_than_zero_and_consistent_on_minus2_infty
  (h_a_pos : a > 0)
  (h_consistent : ‚àÄ x ‚àà Icc (-2 : ‚Ñù) (‚ä§ : ‚Ñù), f' x * g' x ‚â• 0):
  b ‚â• 4 :=
sorry

-- 3.
theorem maximum_abs_diff_of_a_b_if_consistent_on_a_b
  (h_a_neg : a < 0)
  (h_neq : a ‚â† b)
  (h_consistent_on_open : ‚àÄ x ‚àà Ioo a b, f' x * g' x ‚â• 0) :
  abs (a - b) ‚â§ 1 / 3 :=
sorry

end f_extreme_values_b_range_if_a_greater_than_zero_and_consistent_on_minus2_infty_maximum_abs_diff_of_a_b_if_consistent_on_a_b_l101_101928


namespace congruent_triangles_overlap_l101_101769

theorem congruent_triangles_overlap (T1 T2 : Triangle) :
  (‚àÄ T3 : Triangle, (T3 ‚âÖ T1) ‚àß (T3 ‚âÖ T2) ‚Üí (T1 ‚âÖ T2)) :=
by
  have T1_congruent_T2 : T1 ‚âÖ T2 := sorry
  exact T1_congruent_T2

end congruent_triangles_overlap_l101_101769


namespace solve_for_n_l101_101765

theorem solve_for_n (n : ‚Ñö) (h : n + (n + 1) + (n + 2) + (n + 3) = 20) : 
    n = 3.5 :=
  sorry

end solve_for_n_l101_101765


namespace ratio_of_mustang_models_length_l101_101201

theorem ratio_of_mustang_models_length :
  ‚àÄ (full_size_length mid_size_length smallest_model_length : ‚Ñï),
    full_size_length = 240 ‚Üí
    mid_size_length = full_size_length / 10 ‚Üí
    smallest_model_length = 12 ‚Üí
    smallest_model_length / mid_size_length = 1/2 :=
by
  intros full_size_length mid_size_length smallest_model_length h1 h2 h3
  sorry

end ratio_of_mustang_models_length_l101_101201


namespace area_of_quadrilateral_l101_101852

-- Define the vertices of the quadrilateral
def v1 : ‚Ñù √ó ‚Ñù := (2, 1)
def v2 : ‚Ñù √ó ‚Ñù := (0, 7)
def v3 : ‚Ñù √ó ‚Ñù := (5, 5)
def v4 : ‚Ñù √ó ‚Ñù := (6, 9)

-- Prove that the area of the quadrilateral is 9
theorem area_of_quadrilateral :
  let A := (2 * 7 + 0 * 5 + 5 * 9 + 6 * 1 - (1 * 0 + 7 * 5 + 5 * 6 + 9 * 2)) / 2 in
  abs A = 9 :=
by {
  let A := (2 * 7 + 0 * 5 + 5 * 9 + 6 * 1 - (1 * 0 + 7 * 5 + 5 * 6 + 9 * 2)) / 2,
  have : A = (14 + 0 + 45 + 6 - (0 + 35 + 30 + 18)) / 2, 
  { unfold A, simp },
  have : A = 18 / 2,
  { simp [this] },
  have : A = 9,
  { simp [this] },
  rw [this],
  exact abs_of_nonneg (show 9 ‚â• 0, by norm_num),
}

end area_of_quadrilateral_l101_101852


namespace sandy_world_record_length_l101_101203

-- Define the conditions
def sandy_age_current := 12
def sandy_fingernail_length_current := 2.0 -- in inches
def fingernail_growth_rate := 0.1 -- inches per month
def sandy_age_goal := 32

-- Calculate the remaining time until Sandy achieves the record
def years_to_goal := sandy_age_goal - sandy_age_current
def months_to_goal := years_to_goal * 12
def total_growth := months_to_goal * fingernail_growth_rate

-- Define the length of fingernails when the record is achieved
def fingernail_length_goal := sandy_fingernail_length_current + total_growth

-- The theorem stating the goal
theorem sandy_world_record_length : fingernail_length_goal = 26 := by
  sorry

end sandy_world_record_length_l101_101203


namespace number_of_zeros_at_end_of_7_factorial_in_base_9_l101_101239

noncomputable def factorial : ‚Ñï ‚Üí ‚Ñï
| 0     := 1
| (n+1) := (n+1) * factorial n

theorem number_of_zeros_at_end_of_7_factorial_in_base_9 : 
  ‚àÉ k : ‚Ñï, (k = 1) ‚àß (‚àÉ m : ‚Ñï, 7! = m * 9^k) :=
sorry

end number_of_zeros_at_end_of_7_factorial_in_base_9_l101_101239


namespace area_of_triangle_AEB_l101_101612

noncomputable theory

open_locale classical

variables {AB BC DF GC : ‚Ñù}
variables (A B C D E F G : Type*)

-- Define the properties of points
variables [is_rectangular A B C D]
variables [line_through A F E]
variables [line_through B G E]

def AB_length : AB = 8 := by sorry
def BC_length : BC = 4 := by sorry
def DF_length : DF = 2 := by sorry
def GC_length : GC = 3 := by sorry

theorem area_of_triangle_AEB : area (triangle A E B) = 128/5 :=
by
  sorry

end area_of_triangle_AEB_l101_101612


namespace find_rational_r_l101_101870

theorem find_rational_r (r : ‚Ñö) :
  (‚àÄ x : ‚Ñö, polynomial.aeval x[X] (r * X ^ 2 + (r + 2) * X + (r - 1)) = 0 ‚Üí x ‚àà set.univ ‚Üí x ‚àà ‚Ñ§) ‚Üî r = -1/3 ‚à® r = 1 :=
begin
  sorry
end

end find_rational_r_l101_101870


namespace people_who_chose_soda_l101_101984

-- Define the total number of people surveyed and the central angle for "Soda"
def peopleSurveyed : Nat := 500
def sodaAngle : ‚Ñï := 200

-- Define the calculation for the number of people who chose "Soda"
def fractionOfSoda : ‚Ñö := sodaAngle / 360
def numberOfSodaPeople : ‚Ñï := ((peopleSurveyed : ‚Ñö) * fractionOfSoda).round.to_nat

-- The theorem states the number of people who chose "Soda" given the conditions
theorem people_who_chose_soda :
  numberOfSodaPeople = 278 :=
by
  -- Here we would include the actual proof steps, but we're using sorry to skip it.
  sorry

end people_who_chose_soda_l101_101984


namespace sum_of_divisors_37_l101_101316

theorem sum_of_divisors_37 : ‚àë d in (finset.filter (Œª d, 37 % d = 0) (finset.range 38)), d = 38 :=
by {
  sorry
}

end sum_of_divisors_37_l101_101316


namespace water_left_in_cooler_l101_101331

theorem water_left_in_cooler : 
  let gallons_in_cooler := 3 in
  let ounces_per_cup := 6 in
  let rows := 5 in
  let chairs_per_row := 10 in
  let ounces_per_gallon := 128 in
  let initial_ounces := gallons_in_cooler * ounces_per_gallon in
  let total_chairs := rows * chairs_per_row in
  let total_ounces_needed := total_chairs * ounces_per_cup in
  let remaining_ounces := initial_ounces - total_ounces_needed in
  remaining_ounces = 84 :=
by 
  -- introduce variables
  let gallons_in_cooler := 3
  let ounces_per_cup := 6
  let rows := 5
  let chairs_per_row := 10
  let ounces_per_gallon := 128
  let initial_ounces := gallons_in_cooler * ounces_per_gallon
  let total_chairs := rows * chairs_per_row
  let total_ounces_needed := total_chairs * ounces_per_cup
  let remaining_ounces := initial_ounces - total_ounces_needed
  -- prove the theorem
  sorry

end water_left_in_cooler_l101_101331


namespace lattice_points_count_in_region_l101_101367

def isLatticePoint (p : ‚Ñ§ √ó ‚Ñ§) : Prop :=
  ‚àÉ x y : ‚Ñ§, p = (x, y)

def isInsideRegion (p : ‚Ñ§ √ó ‚Ñ§) : Prop :=
  let (x, y) := p
  y ‚â§ abs x ‚àß y ‚â§ -x^2 + 8

theorem lattice_points_count_in_region :
  {p : ‚Ñ§ √ó ‚Ñ§ | isLatticePoint p ‚àß isInsideRegion p}.card = 27 :=
by sorry

end lattice_points_count_in_region_l101_101367


namespace prism_volume_is_nine_l101_101222

noncomputable def equilateral_triangle_area (s : ‚Ñù) : ‚Ñù :=
  (‚àö3 / 4) * s^2

noncomputable def median_of_equilateral_triangle (s : ‚Ñù) : ‚Ñù :=
  (‚àö3 / 2) * s

noncomputable def height_of_prism (slant_height centroid_to_vertex : ‚Ñù) : ‚Ñù :=
  sqrt ((slant_height^2) - (centroid_to_vertex^2))

noncomputable def volume_of_prism (base_area height : ‚Ñù) : ‚Ñù :=
  (1 / 3) * base_area * height

theorem prism_volume_is_nine :
  let s := 6
  let slant_height := sqrt 15
  let base_area := equilateral_triangle_area s
  let median := median_of_equilateral_triangle s
  let centroid_to_vertex := (2 / 3) * median
  let height := height_of_prism slant_height centroid_to_vertex
  volume_of_prism base_area height = 9 :=
by 
  sorry

end prism_volume_is_nine_l101_101222


namespace f_monotonically_decreasing_range_of_a_tangent_intersection_l101_101556

noncomputable def f (x : ‚Ñù) (a : ‚Ñù) : ‚Ñù := x^3 - a * x^2 + 2
noncomputable def f' (x : ‚Ñù) (a : ‚Ñù) : ‚Ñù := 3 * x^2 - 2 * a * x

-- Part (I)
theorem f_monotonically_decreasing (a : ‚Ñù) (x : ‚Ñù) :
  (a > 0 ‚Üí 0 < x ‚àß x < (2 / 3) * a ‚Üí f' x a < 0) ‚àß
  (a = 0 ‚Üí ¬¨‚àÉ x, f' x a < 0) ‚àß
  (a < 0 ‚Üí (2 / 3) * a < x ‚àß x < 0 ‚Üí f' x a < 0) :=
sorry

-- Part (II)
theorem range_of_a (a : ‚Ñù) :
  (‚àÄ x : ‚Ñù, f' x a ‚â• abs x - 3 / 4) ‚Üí (-1 ‚â§ a ‚àß a ‚â§ 1) :=
sorry

-- Part (III)
theorem tangent_intersection (a : ‚Ñù) :
  (a = 0 ‚Üí ‚àÉ (x1 x2 : ‚Ñù), x1 ‚â† x2 ‚àß ‚àÉ t : ‚Ñù, (t - x1^3 - 2 = 3 * x1^2 * (2 - x1)) ‚àß
  (t - x2^3 - 2 = 3 * x2^2 * (2 - x2)) ‚àß 2 ‚â§ t ‚àß t ‚â§ 10 ‚àß
  ‚àÄ t', (t' - x1^3 - 2 = 3 * x1^2 * (2 - x1)) ‚àß
  (t' - x2^3 - 2 = 3 * x2^2 * (2 - x2)) ‚Üí t' ‚â§ 10) :=
sorry

end f_monotonically_decreasing_range_of_a_tangent_intersection_l101_101556


namespace number_of_valid_integers_l101_101502

theorem number_of_valid_integers :
  {n : ‚Ñ§ // n ‚â• 2 ‚àß n < 5}.card = 3 :=
by sorry

end number_of_valid_integers_l101_101502


namespace fixed_point_of_intersection_l101_101161

variable {Œ± : Type}
variable [inner_product_space ‚Ñù Œ±]

theorem fixed_point_of_intersection
  {Œì : set (euclidean_space ‚Ñù (fin 2))}
  (ABC : affine_subspace ‚Ñù (euclidean_space ‚Ñù (fin 2)))
  (P : euclidean_space ‚Ñù (fin 2))
  (hP : P ‚àà Œì ‚àß P ‚â† (ABC.direction.to_affine _ _).affine_span.points)
  (I J : euclidean_space ‚Ñù (fin 2))
  (hI : is_incenter_of_triangle I ABC P)
  (hJ : is_incenter_of_triangle J ABC P)
  (Q : euclidean_space ‚Ñù (fin 2))
  (hQ : Q ‚àà (circumcircle_of_triangle PIJ ‚à© Œì)) :
  ‚àÄ P ‚àà Œì, P ‚â† A ‚àß P ‚â† B ‚Üí Q = fixed_point :=
sorry

end fixed_point_of_intersection_l101_101161


namespace eccentricity_of_hyperbola_l101_101369

noncomputable def hyperbola (a b : ‚Ñù) (x y : ‚Ñù) := (x^2 / a^2) - (y^2 / b^2) = 1

noncomputable def eccentricity (a b : ‚Ñù) := 
  let c := real.sqrt (a^2 + b^2)
  c / a

theorem eccentricity_of_hyperbola (a b e : ‚Ñù) 
  (h_a_pos : 0 < a)
  (h_b_pos : 0 < b)
  (h_hyperbola : hyperbola a b (real.sqrt (a^2 + b^2)) 0) :
  eccentricity a b = (real.sqrt 5 + 1) / 2 :=
sorry

end eccentricity_of_hyperbola_l101_101369


namespace least_number_to_add_l101_101341

theorem least_number_to_add (n d : ‚Ñï) (r : ‚Ñï) (h‚ÇÄ : n % d = r) (h‚ÇÅ : r < d) : ‚àÉ x : ‚Ñï, (n + x) % d = 0 ‚àß x = d - r :=
by
  exists (d - r)
  split
  {
    rw [Nat.add_sub_assoc h‚ÇÅ, Nat.add_mod, h‚ÇÄ, Nat.mod_self, Nat.zero_mod]
    exact zero_le d
  }
  {
    refl
  }

def example_problem : ‚àÉ x : ‚Ñï, (1056 + x) % 25 = 0 ‚àß x = 19 :=
  least_number_to_add 1056 25 6 (by norm_num) (by norm_num)

end least_number_to_add_l101_101341


namespace no_poly_deg3_satisfies_conditions_l101_101967

-- Define the polynomial function of degree 3
def poly_deg3 (a3 a2 a1 a0 : ‚Ñù) (x : ‚Ñù) : ‚Ñù :=
  a3 * x^3 + a2 * x^2 + a1 * x + a0

-- Define the conditions for the polynomial
def condition1 (f : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x : ‚Ñù, f(x^2) = f(f(x)))

def condition2 (f : ‚Ñù ‚Üí ‚Ñù) (f' : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x : ‚Ñù, f'(x^2) = 2 * f(x) * f'(x)

-- Main theorem statement
theorem no_poly_deg3_satisfies_conditions :
  ‚àÄ f : ‚Ñù ‚Üí ‚Ñù, ‚àÄ f' : ‚Ñù ‚Üí ‚Ñù,
    (‚àÉ a3 a2 a1 a0 : ‚Ñù, f = poly_deg3 a3 a2 a1 a0) ‚Üí
    condition1 f ‚Üí
    condition2 f f' ‚Üí
    false :=
begin
  intros f f',
  rintro ‚ü®a3, a2, a1, a0, hf‚ü© h1 h2,
  sorry
end

end no_poly_deg3_satisfies_conditions_l101_101967


namespace hexagon_triangle_area_half_l101_101197

open Set

-- Define the problem conditions and the goal to prove
theorem hexagon_triangle_area_half (O : ‚Ñù) (r : ‚Ñù) (A1 A2 A3 B1 B2 B3 : ‚Ñù) 
  (h1 : dist O A1 = dist O B1 ‚àß dist O A1 = r ‚àß dist O B1 = r)
  (h2 : dist O A2 = dist O B2 ‚àß dist O A2 = r ‚àß dist O B2 = r)
  (h3 : dist O A3 = dist O B3 ‚àß dist O A3 = r ‚àß dist O B3 = r)  
  (h4 : straight_line O A1 B1)
  (h5 : straight_line O A2 B2)
  (h6 : straight_line O A3 B3) :
  area (triangle O A1 A3) + area (triangle O A3 B2) + area (triangle O B2 A1) = (area (hexagon A1 A2 A3 B1 B2 B3)) / 2 := 
sorry -- Proof omitted for brevity

end hexagon_triangle_area_half_l101_101197


namespace find_angle_A_find_area_triangle_find_area_triangle_alt_range_b_l101_101628

-- Assumptions and conditions
variables {a b c A B C : ‚Ñù}
variable (eqn1 : (2 * b - real.sqrt 3 * c) * real.cos A = real.sqrt 3 * a * real.cos C)
variables (cond1 : c = real.sqrt 3 * b) (cond2 : B = 2 * real.pi / 3) (cond3 : a = 2)

-- Part (I)
theorem find_angle_A : A = real.pi / 6 :=
sorry

-- Part (II)
theorem find_area_triangle (case1 : cond1) (case2 : cond3) : 
  let S := (b * c * real.sin A) / 2 in 
  S = real.sqrt 3 :=
sorry

theorem find_area_triangle_alt (case3 : cond2) (case4 : cond3) :
  let S := (2 * 2 * real.sin B / 2) in 
  S = real.sqrt 3 :=
sorry

-- Part (III)
theorem range_b (cond : a = 2) : 2 < b ‚àß b < 4 :=
sorry

end find_angle_A_find_area_triangle_find_area_triangle_alt_range_b_l101_101628


namespace polynomial_coeff_sum_l101_101180

noncomputable def g (a b c d : ‚Ñù) (x : ‚ÑÇ) : ‚ÑÇ := x^4 + a * x^3 + b * x^2 + c * x + d

theorem polynomial_coeff_sum (a b c d : ‚Ñù) 
  (h3i : g a b c d (3 * Complex.i) = 0)
  (h1i : g a b c d (1 + Complex.i) = 0)
  (hre : ‚àÄ x : ‚ÑÇ, g a b c d x = (g a b c d x).conj) :
  a + b + c + d = 9 := 
by 
  sorry

end polynomial_coeff_sum_l101_101180


namespace w_squared_approx_91_44_l101_101107

theorem w_squared_approx_91_44 (w : ‚Ñù) 
  (h : (w + 15)^2 = (4w + 9) * (3w + 6)) : 
  w^2 ‚âà 91.44 := 
by
  sorry

end w_squared_approx_91_44_l101_101107


namespace coins_placement_possible_l101_101415

-- Definition of the board and coins
structure Board :=
  (cells : Fin 16 ‚Üí ‚Ñï)  -- Considering cells indexed from 0 to 15 for simplicity
  (is_silver : Fin 16 ‚Üí Prop)  -- Predicate to indicate which cells have silver coins (the rest will have gold coins)
  (num_gold : ‚Ñï)  -- Number of gold coins on the board
  (num_silver : ‚Ñï)  -- Number of silver coins on the board

-- Predicate for silver greater than gold in a sub-square
def sub_square_condition (b : Board) (indices : List (Fin 16)) : Prop :=
  let gold_count := indices.countp (Œª i, ¬¨ b.is_silver i) in
  let silver_count := indices.countp b.is_silver in
  silver_count > gold_count

-- Main theorem
theorem coins_placement_possible :
  ‚àÉ (b : Board),
    -- Total gold greater than total silver
    b.num_gold > b.num_silver ‚àß
    -- All 3x3 sub-squares have more silver than gold
    (sub_square_condition b [0, 1, 2, 4, 5, 6, 8, 9, 10]) ‚àß
    (sub_square_condition b [1, 2, 3, 5, 6, 7, 9, 10, 11]) ‚àß
    (sub_square_condition b [4, 5, 6, 8, 9, 10, 12, 13, 14]) ‚àß
    (sub_square_condition b [5, 6, 7, 9, 10, 11, 13, 14, 15]) ‚àß
    (sub_square_condition b [0, 1, 2, 4, 5, 6, 3, 7, 11]) ‚àß
    (sub_square_condition b [0, 4, 8, 5, 9, 13, 1, 2, 6]) ‚àß
    (sub_square_condition b [4, 8, 12, 5, 9, 13, 6, 7, 10]) ‚àß
    (sub_square_condition b [8, 12, 13, 9, 14, 15, 4, 5, 9]) ‚àß
    (sub_square_condition b [1, 5, 6, 9, 10, 13, 2, 6, 7]) ‚àß
    -- Center 2x2 check
    (b.is_silver 5 ‚àß b.is_silver 6 ‚àß b.is_silver 9 ‚àß b.is_silver 10) :=
sorry

end coins_placement_possible_l101_101415


namespace unique_poly_degree_4_l101_101739

theorem unique_poly_degree_4 
  (Q : ‚Ñö[X]) 
  (h_deg : Q.degree = 4) 
  (h_lead_coeff : Q.leading_coeff = 1)
  (h_root : Q.eval (sqrt 3 + sqrt 7) = 0) : 
  Q = X^4 - 12 * X^2 + 16 ‚àß Q.eval 2 = 0 :=
by sorry

end unique_poly_degree_4_l101_101739


namespace periodic_sequences_zero_at_two_l101_101919

variable {R : Type*} [AddGroup R]

def seq_a (a b : ‚Ñï ‚Üí R) (n : ‚Ñï) : Prop := a (n + 1) = a n + b n
def seq_b (b c : ‚Ñï ‚Üí R) (n : ‚Ñï) : Prop := b (n + 1) = b n + c n
def seq_c (c d : ‚Ñï ‚Üí R) (n : ‚Ñï) : Prop := c (n + 1) = c n + d n
def seq_d (d a : ‚Ñï ‚Üí R) (n : ‚Ñï) : Prop := d (n + 1) = d n + a n

theorem periodic_sequences_zero_at_two
  (a b c d : ‚Ñï ‚Üí R)
  (k m : ‚Ñï)
  (hk : 1 ‚â§ k)
  (hm : 1 ‚â§ m)
  (ha : ‚àÄ n, seq_a a b n)
  (hb : ‚àÄ n, seq_b b c n)
  (hc : ‚àÄ n, seq_c c d n)
  (hd : ‚àÄ n, seq_d d a n)
  (kra : a (k + m) = a m)
  (krb : b (k + m) = b m)
  (krc : c (k + m) = c m)
  (krd : d (k + m) = d m) :
  a 2 = 0 ‚àß b 2 = 0 ‚àß c 2 = 0 ‚àß d 2 = 0 := sorry

end periodic_sequences_zero_at_two_l101_101919


namespace max_p_q_r_l101_101650

open Matrix

def B (p q r : ‚Ñ§) : Matrix (Fin 2) (Fin 2) ‚Ñö :=
  (1 / 3 : ‚Ñö) ‚Ä¢ ![![2, p], ![q, r]]

def B_squared_equals_2I (p q r : ‚Ñ§) : Prop :=
  B p q r ‚¨ù B p q r = (2 : ‚Ñö) ‚Ä¢ 1

theorem max_p_q_r (p q r : ‚Ñ§)
  (hB : B_squared_equals_2I p q r) :
  p + q + r ‚â§ 13 :=
  sorry

end max_p_q_r_l101_101650


namespace original_five_digit_number_l101_101811

theorem original_five_digit_number :
  ‚àÉ N y x : ‚Ñï, (N = 10 * y + x) ‚àß (N + y = 54321) ‚àß (N = 49383) :=
by
  -- The proof script goes here
  sorry

end original_five_digit_number_l101_101811


namespace find_m_l101_101977

-- Definitions to detail the problem setup
def is_ellipse (a b : ‚Ñù) : Prop := a > 0 ‚àß b > 0

def ellipse_equation (x y a b : ‚Ñù) : Prop :=
  x^2 / a + y^2 / b = 1

def eccentricity (a b e : ‚Ñù) : Prop :=
  e = if a ‚â• b then real.sqrt (1 - b^2 / a^2) else real.sqrt (1 - a^2 / b^2)

-- Main problem statement
theorem find_m (m : ‚Ñù) :
  (‚àÄ (x y : ‚Ñù), is_ellipse 5 (5 + m) ‚Üí
  ellipse_equation x y 5 (5 + m) ‚Üí
  eccentricity 5 (5 + m) (1/2)) ‚Üí
  (m = -5/4 ‚à® m = 5/3) :=
by
  sorry

end find_m_l101_101977


namespace find_original_number_l101_101803

-- Variables and assumptions
variables (N y x : ‚Ñï)

-- Conditions
def crossing_out_condition : Prop := N = 10 * y + x
def sum_condition : Prop := N + y = 54321
def remainder_condition : Prop := x = 54321 % 11
def y_value : Prop := y = 4938

-- The final proof problem statement
theorem find_original_number (h1 : crossing_out_condition N y x) (h2 : sum_condition N y) 
  (h3 : remainder_condition x) (h4 : y_value y) : N = 49383 :=
sorry

end find_original_number_l101_101803


namespace polynomial_coefficient_l101_101767

theorem polynomial_coefficient :
  ‚àÄ d : ‚Ñù, (2 * (2 : ‚Ñù)^4 + 3 * (2 : ‚Ñù)^3 + d * (2 : ‚Ñù)^2 - 4 * (2 : ‚Ñù) + 15 = 0) ‚Üî (d = -15.75) :=
by
  sorry

end polynomial_coefficient_l101_101767


namespace at_least_one_positive_l101_101055

variables {x y z : ‚Ñù}

def a := x^2 - 2 * y + (Real.pi / 2)
def b := y^2 - 2 * z + (Real.pi / 3)
def c := z^2 - 2 * x + (Real.pi / 6)

theorem at_least_one_positive : a > 0 ‚à® b > 0 ‚à® c > 0 :=
sorry

end at_least_one_positive_l101_101055


namespace find_b_l101_101655

def vector (Œ± : Type*) [Add Œ±] [Mul Œ±] := List Œ±

noncomputable def is_collinear {Œ± : Type*} [Field Œ±] (a b c : vector Œ±) : Prop :=
  ‚àÉ t : Œ±, b = a + t ‚Ä¢ (c - a)

noncomputable def is_angle_bisector
  {Œ± : Type*} [Field Œ±] [Fintype Œ±] [EuclideanSpace Œ± (EuclideanInnerSpace Œ±)]
  (a b c : vector Œ±) : Prop :=
  ‚à•a‚à• * (b ‚¨ù c) / (‚à•b‚à• * ‚à•c‚à•) = ‚à•c‚à• * (a ‚¨ù b) / (‚à•b‚à• * ‚à•a‚à•)

def a : vector ‚Ñù := [8, -3, 1]
def c : vector ‚Ñù := [2, 1, -3]
noncomputable def b : vector ‚Ñù := [2, 1, -3]

theorem find_b :
  is_collinear a b c ‚àß is_angle_bisector a b c :=
by
  sorry

end find_b_l101_101655


namespace quadrilateral_not_conclusively_square_l101_101599

/-- The diagonals of a quadrilateral are perpendicular. -/
def perpendicular_diagonals (P Q R S : Point) : Prop :=
  let (D1, D2) := (line_through P R, line_through Q S) in
  D1 ‚ä• D2

/-- A quadrilateral can be inscribed in a circle. -/
def inscribable (P Q R S : Point) : Prop := 
  ‚àÉ (O: Point) (r: ‚Ñù), 
    circle O r P ‚àß circle O r Q ‚àß circle O r R ‚àß circle O r S

/-- A quadrilateral can circumscribe a circle. -/
def circumscribable (P Q R S : Point) : Prop :=
  ‚àÉ (I: Point), tangent_to I P ‚àß tangent_to I Q ‚àß tangent_to I R ‚àß tangent_to I S

/-- A quadrilateral is a square. -/
def is_square (P Q R S : Point) : Prop :=
  dist P Q = dist Q R ‚àß dist Q R = dist R S ‚àß dist R S = dist S P ‚àß
  angle P Q R = œÄ/2 ‚àß angle Q R S = œÄ/2 ‚àß angle R S P = œÄ/2 ‚àß angle S P Q = œÄ/2

/-- It cannot be conclusively stated that the quadrilateral is a square. -/
theorem quadrilateral_not_conclusively_square {P Q R S : Point} :
  perpendicular_diagonals P Q R S ‚Üí inscribable P Q R S ‚Üí circumscribable P Q R S ‚Üí ¬¨ is_square P Q R S := 
sorry

end quadrilateral_not_conclusively_square_l101_101599


namespace average_max_two_selected_balls_l101_101131

theorem average_max_two_selected_balls : 
  let outcomes := {(1, 2), (1, 3), (2, 3)} in
  let max_values := outcomes.map (Œª pair, max pair.fst pair.snd) in
  let probabilities := max_values.map (Œª x, if x = 2 then 1/3 else if x = 3 then 2/3 else 0) in
  let expected_value := (max_values.zip probabilities).sum (Œª (x, p), x * p) in
  expected_value = 8 / 3 :=
by sorry

end average_max_two_selected_balls_l101_101131


namespace min_value_f_on_interval_l101_101951

noncomputable def f (x : ‚Ñù) (a : ‚Ñù) : ‚Ñù := -x^3 + 3 * x^2 + 9 * x + a

theorem min_value_f_on_interval :
  ‚àÉ (a : ‚Ñù), (‚àÄ x ‚àà set.interval (-2 : ‚Ñù) (2 : ‚Ñù), f x a ‚â§ f 2 a) ‚àß
             (‚àÄ x ‚àà set.interval (-2 : ‚Ñù) (2 : ‚Ñù), f x a ‚â• (f -1 a)) :=
begin
  use -2,
  split,
  { intro x,
    intro hx,
    -- place proof here
    sorry },
  { intro x,
    intro hx,
    -- place proof here
    sorry },
end

end min_value_f_on_interval_l101_101951


namespace EF_squared_eq_EP_squared_add_FN_squared_collinear_E_M_G_N_l101_101404

-- Definitions based on problem conditions
variables {A B C D E F G P M N : Type*}

-- Definitions based on geometric configuration
variable [InscribedQuadrilateral (Circle O) A B C D]
variable [Intersects (Line A B) (Line D C) E]
variable [Intersects (Line A D) (Line B C) F]
variable [Intersects (Diagonal A C) (Diagonal B D) G]
variable [Tangent (Line E P) (Circle O) P]
variable [TangentThroughPoint (Circle O) F M N]

-- First proof obligation
theorem EF_squared_eq_EP_squared_add_FN_squared (EF EP FN : ‚Ñù)
  (h1 : squared_dist E F = squared_dist E P + squared_dist F N) : 
  EF^2 = EP^2 + FN^2 :=
by sorry

-- Second proof obligation
theorem collinear_E_M_G_N :
  (Collinear E M G N) :=
by sorry

end EF_squared_eq_EP_squared_add_FN_squared_collinear_E_M_G_N_l101_101404


namespace total_workers_is_22_l101_101218

-- Defining the average salaries and the related conditions
def average_salary_all : ‚Ñù := 850
def average_salary_technicians : ‚Ñù := 1000
def average_salary_rest : ‚Ñù := 780

-- Given number of technicians
def T : ‚Ñï := 7

-- Total number of workers in the workshop
def total_number_of_workers : ‚Ñï :=
  let R := 15 in
  7 + R

-- Total number of workers proof
theorem total_workers_is_22 : total_number_of_workers = 22 :=
by
  -- Calculation to be filled in proof
  sorry

end total_workers_is_22_l101_101218


namespace sum_of_integers_equals_75_l101_101705

theorem sum_of_integers_equals_75 
  (n m : ‚Ñ§) 
  (h1 : n * (n + 1) * (n + 2) = 924) 
  (h2 : m * (m + 1) * (m + 2) * (m + 3) = 924) 
  (sum_seven_integers : ‚Ñ§ := n + (n + 1) + (n + 2) + m + (m + 1) + (m + 2) + (m + 3)) :
  sum_seven_integers = 75 := 
  sorry

end sum_of_integers_equals_75_l101_101705


namespace sum_of_divisors_37_l101_101311

theorem sum_of_divisors_37 : ‚àë d in (Finset.filter (fun d => d > 0 ‚àß 37 % d = 0) (Finset.range (37 + 1))), d = 38 :=
by
  sorry

end sum_of_divisors_37_l101_101311


namespace range_of_f_l101_101497

def g (x : ‚Ñù) : ‚Ñù := -8 - 2 * cos (8 * x) - 4 * cos (4 * x)
def f (x : ‚Ñù) : ‚Ñù := sqrt (36 - g(x) ^ 2)

theorem range_of_f : ‚àÄ x : ‚Ñù, 0 ‚â§ f(x) ‚àß f(x) ‚â§ sqrt 11 := 
by 
  sorry

end range_of_f_l101_101497


namespace simultaneous_messengers_l101_101694

theorem simultaneous_messengers (m n : ‚Ñï) (h : m * n = 2010) : 
  m ‚â† n ‚Üí ((m, n) = (1, 2010) ‚à® (m, n) = (2, 1005) ‚à® (m, n) = (3, 670) ‚à® 
          (m, n) = (5, 402) ‚à® (m, n) = (6, 335) ‚à® (m, n) = (10, 201) ‚à® 
          (m, n) = (15, 134) ‚à® (m, n) = (30, 67)) :=
sorry

end simultaneous_messengers_l101_101694


namespace smallest_N_l101_101830

-- Define the problem parameters and conditions
variable (l m n N : ‚Ñï)

-- Conditions: N 1-cm cubes stacked; 143 cubes hidden when exposing three faces
def hidden_cubes_condition (l m n : ‚Ñï) : Prop := (l-1) * (m-1) * (n-1) = 143

-- The goal to prove the smallest N value
theorem smallest_N (l m n N : ‚Ñï) 
  (hl : l = 2) 
  (hm : m = 12) 
  (hn : n = 14)
  (hc : hidden_cubes_condition l m n) : N = 336 := 
by 
  dsimp [hidden_cubes_condition] at hc
  rw [hl, hm, hn] 
  have h_cube : (2-1) * (12-1) * (14-1) = 143,
  { norm_num },
  exact h_cube ‚ñ∏ rfl

end smallest_N_l101_101830


namespace find_crease_length_l101_101853

-- Define the given conditions:
def rectangle_width : ‚Ñù := 8 -- The width of the rectangle is 8 inches
variable (Œ∏ : ‚Ñù) -- The angle formed at the corner before folding is Œ∏

-- Define the crease length (L) as a function of Œ∏
def crease_length (Œ∏ : ‚Ñù) : ‚Ñù :=
  rectangle_width * Real.cos Œ∏

-- Define the theorem to be proven
theorem find_crease_length : crease_length Œ∏ = 8 * Real.cos Œ∏ :=
by sorry

end find_crease_length_l101_101853


namespace functional_eq_solve_l101_101868

theorem functional_eq_solve (f : ‚Ñù ‚Üí ‚Ñù) (h : ‚àÄ x y : ‚Ñù, f (2*x + f y) = x + y + f x) : 
  ‚àÄ x : ‚Ñù, f x = x := 
sorry

end functional_eq_solve_l101_101868


namespace find_r_given_conditions_l101_101117

theorem find_r_given_conditions (p c r : ‚Ñù) (h1 : p * r = 360) (h2 : 6 * c * r = 15) (h3 : r = 4) : r = 4 :=
by
  sorry

end find_r_given_conditions_l101_101117


namespace sum_of_divisors_37_l101_101308

theorem sum_of_divisors_37 : ‚àë d in (Finset.filter (fun d => d > 0 ‚àß 37 % d = 0) (Finset.range (37 + 1))), d = 38 :=
by
  sorry

end sum_of_divisors_37_l101_101308


namespace storks_more_than_birds_l101_101785

-- Definitions based on given conditions
def initial_birds : ‚Ñï := 3
def added_birds : ‚Ñï := 2
def total_birds : ‚Ñï := initial_birds + added_birds
def storks : ‚Ñï := 6

-- Statement to prove the correct answer
theorem storks_more_than_birds : (storks - total_birds = 1) :=
by
  sorry

end storks_more_than_birds_l101_101785


namespace Q_evaluation_at_2_l101_101733

noncomputable def Q : Polynomial ‚Ñö := 
  (Polynomial.X^2 + Polynomial.C 4)^2

theorem Q_evaluation_at_2 : 
  Q.eval 2 = 64 :=
by 
  -- We'll skip the proof as per the instructions.
  sorry

end Q_evaluation_at_2_l101_101733


namespace sin_div_one_minus_tan_eq_neg_three_fourths_l101_101526

variable (Œ± : ‚Ñù)

theorem sin_div_one_minus_tan_eq_neg_three_fourths
  (h : Real.sin (Œ± - Real.pi / 4) = Real.sqrt 2 / 4) :
  (Real.sin Œ±) / (1 - Real.tan Œ±) = -3 / 4 := sorry

end sin_div_one_minus_tan_eq_neg_three_fourths_l101_101526


namespace necessary_but_not_sufficient_condition_l101_101346

theorem necessary_but_not_sufficient_condition (x : ‚Ñù) :
  (log 2 x < 2 ‚Üí x < 4) ‚àß (‚àÉ x, x < 4 ‚àß ¬¨ (log 2 x < 2)) :=
by
  sorry

end necessary_but_not_sufficient_condition_l101_101346


namespace find_number_l101_101784

noncomputable def number_solution (x : ‚Ñù) : Prop :=
  1.3333 * x = 4.82

theorem find_number : ‚àÉ x : ‚Ñù, number_solution x ‚àß abs (x - 3.615) < 0.001 :=
by
  use 4.82 / 1.3333
  rw [number_solution]
  split
  ¬∑ norm_num
  ¬∑ norm_num
  sorry

end find_number_l101_101784


namespace multiples_of_7_with_unit_digit_7_and_lt_150_l101_101103

/--
Given a positive integer n,
Let \(7n\) be a multiple of 7,
\(7n < 150\),
and \(7n \mod 10 = 7\),
prove there are 11 such multiples of 7.
-/
theorem multiples_of_7_with_unit_digit_7_and_lt_150 :
  ‚àÉ! (n : ‚Ñï), n ‚â§ 11 ‚àß ‚àÄ (m : ‚Ñï), (1 ‚â§ m ‚àß m ‚â§ n) ‚Üí (7 * (2 * m - 1) < 150 ‚àß (7 * (2 * m - 1)) % 10 = 7) := by
sorry

end multiples_of_7_with_unit_digit_7_and_lt_150_l101_101103


namespace average_first_19_natural_numbers_l101_101890

theorem average_first_19_natural_numbers : (Finset.range 20).sum / 19 = 10 :=
by
  -- Given that the sum of the first n natural numbers is n(n + 1)/2
  have : Finset.range 20 = (0..19).to_finset, from rfl,
  rw [Finset.sum_range, this, Finset.sum_eq_sum_range, (0..19).sum_eq, Finset.sum_range_succ_comm],
  -- Prove that (0 + 1 + 2 + 3 + ... + 18 + 19) / 19 = 10
  have : ‚àë i in (Finset.filter (Œª n, n < 20) (0..19).to_finset), i = (19 * (19 + 1)) / 2 :=
    by
      rw [Finset.sum_range_succ_comm, Finset.range_succ_eq_map, Finset.sum_range, Finset.card_range],
      -- Sum of first 19 natural numbers: n(n + 1)/2
      sorry,
  rw [Finset.sum_filter],
  have : (19 * 20) / 2 / 19 = 10,
    by
      rw [Nat.mul_div_cancel_left, Nat.div_div_eq_div_mul],
      -- Simplify the division: (19 * 20) / 2 / 19 = 10
      sorry,
  rw [this],
  exact this

end average_first_19_natural_numbers_l101_101890


namespace smallest_abundant_not_multiple_of_five_l101_101008

def is_proper_divisor (d n : ‚Ñï) : Prop := d < n ‚àß n % d = 0

def sum_proper_divisors (n : ‚Ñï) : ‚Ñï :=
  Finset.sum (Finset.filter (Œª d => is_proper_divisor d n) (Finset.range n)) (Œª d => d)

def is_abundant (n : ‚Ñï) : Prop := sum_proper_divisors n > n

def is_not_multiple_of_five (n : ‚Ñï) : Prop := n % 5 ‚â† 0

theorem smallest_abundant_not_multiple_of_five : ‚àÉ n : ‚Ñï, is_abundant n ‚àß is_not_multiple_of_five n ‚àß n = 12 := by
  sorry

end smallest_abundant_not_multiple_of_five_l101_101008


namespace second_crew_tractors_l101_101884

theorem second_crew_tractors
    (total_acres : ‚Ñï)
    (days : ‚Ñï)
    (first_crew_days : ‚Ñï)
    (first_crew_tractors : ‚Ñï)
    (acres_per_tractor_per_day : ‚Ñï)
    (remaining_days : ‚Ñï)
    (remaining_acres_after_first_crew : ‚Ñï)
    (second_crew_acres_per_tractor : ‚Ñï) :
    total_acres = 1700 ‚Üí days = 5 ‚Üí first_crew_days = 2 ‚Üí first_crew_tractors = 2 ‚Üí 
    acres_per_tractor_per_day = 68 ‚Üí remaining_days = 3 ‚Üí 
    remaining_acres_after_first_crew = total_acres - (first_crew_tractors * acres_per_tractor_per_day * first_crew_days) ‚Üí 
    second_crew_acres_per_tractor = acres_per_tractor_per_day * remaining_days ‚Üí 
    (remaining_acres_after_first_crew / second_crew_acres_per_tractor = 7) := 
by
  sorry

end second_crew_tractors_l101_101884


namespace sum_divisors_of_37_is_38_l101_101319

theorem sum_divisors_of_37_is_38 (h : Nat.Prime 37) : (‚àë d in (Finset.filter (Œª d, 37 % d = 0) (Finset.range (37 + 1))), d) = 38 := by
  sorry

end sum_divisors_of_37_is_38_l101_101319


namespace sqrt_4_times_9_sqrt_49_div_36_cuberoot_a6_sqrt_9_a2_l101_101490

-- Problem (a)
theorem sqrt_4_times_9 : Real.sqrt (4 * 9) = 6 :=
by sorry

-- Problem (b)
theorem sqrt_49_div_36 : Real.sqrt (49 / 36) = 7 / 6 :=
by sorry

-- Problem (c)
theorem cuberoot_a6 (a : Real) : Real.cbrt (a ^ 6) = a ^ 2 :=
by sorry

-- Problem (d)
theorem sqrt_9_a2 (a : Real) : Real.sqrt (9 * a ^ 2) = 3 * a :=
by sorry

end sqrt_4_times_9_sqrt_49_div_36_cuberoot_a6_sqrt_9_a2_l101_101490


namespace range_of_a_l101_101537

noncomputable def f (a x : ‚Ñù) : ‚Ñù := 2 * x^2 - a * x + 5

theorem range_of_a (a : ‚Ñù) :
  (‚àÄ x y : ‚Ñù, 1 ‚â§ x ‚Üí x ‚â§ y ‚Üí f a x ‚â§ f a y) ‚Üí a ‚â§ 4 :=
by
  sorry

end range_of_a_l101_101537


namespace num_true_props_l101_101549

namespace ProofProblem

-- Define the sets M and N
def M (x : ‚Ñù) := 0 < x ‚àß x ‚â§ 3
def N (x : ‚Ñù) := 0 < x ‚àß x ‚â§ 2

-- Proposition definitions
def prop1 := ‚àÄ a, (M a ‚Üí N a) ‚àß ¬¨(N a ‚Üí M a)
def prop2 := ‚àÄ a b, (M a ‚Üí ¬¨M b) ‚Üî (M b ‚Üí ¬¨M a)
def prop3 := ‚àÄ p q : Prop, ¬¨(p ‚àß q) ‚Üí (¬¨p ‚àß ¬¨q)
def prop4 := ¬¨‚àÉ x : ‚Ñù, x^2 - x - 1 > 0 ‚Üî ‚àÄ x : ‚Ñù, x^2 - x - 1 ‚â§ 0

-- Main theorem claiming the number of true propositions
theorem num_true_props : (‚àÉ a, prop1) + (‚àÉ a b, prop2) + (‚àÉ p q : Prop, prop3) + prop4 = 2 := sorry

end ProofProblem

end num_true_props_l101_101549


namespace scientific_notation_l101_101982

theorem scientific_notation : (37_000_000 : ‚Ñù) = 3.7 * 10^7 := 
sorry

end scientific_notation_l101_101982


namespace min_value_expression_l101_101482

theorem min_value_expression 
  (a b c : ‚Ñù)
  (h1 : a + b + c = -1)
  (h2 : a * b * c ‚â§ -3) : 
  (ab + 1) / (a + b) + (bc + 1) / (b + c) + (ca + 1) / (c + a) ‚â• 3 :=
sorry

end min_value_expression_l101_101482


namespace line_segments_equivalent_circles_equivalent_l101_101749

-- Define what it means for two subsets to be equivalent using a bijection
structure EquivalentSets (A B : Set (‚Ñù √ó ‚Ñù)) :=
  (exists_bijection : ‚àÉ f : (‚Ñù √ó ‚Ñù) ‚Üí (‚Ñù √ó ‚Ñù), ‚àÄ a ‚àà A, f a ‚àà B ‚àß bijective f)

-- Problem (i): Any two line segments in the plane are equivalent
theorem line_segments_equivalent (A B C D : ‚Ñù √ó ‚Ñù) (AB_segment : Œª t : ‚Ñù => (1 - t) ‚Ä¢ A + t ‚Ä¢ B)
                            (CD_segment : Œª t : ‚Ñù => (1 - t) ‚Ä¢ C + t ‚Ä¢ D) :
  EquivalentSets {p | ‚àÉ t, t ‚àà Icc (0:‚Ñù) 1 ‚àß p = AB_segment t} {q | ‚àÉ t, t ‚àà Icc (0:‚Ñù) 1 ‚àß q = CD_segment t} :=
begin
  sorry
end

-- Problem (ii): Any two circles in the plane are equivalent
theorem circles_equivalent (x_A y_A r_1 x_B y_B r_2 : ‚Ñù) :
  EquivalentSets {p | ‚àÉ Œ∏, Œ∏ ‚àà Icc (0:‚Ñù) (2 * real.pi) ‚àß p = (x_A + r_1 * real.cos Œ∏, y_A + r_1 * real.sin Œ∏)}
                 {q | ‚àÉ Œ∏, Œ∏ ‚àà Icc (0:‚Ñù) (2 * real.pi) ‚àß q = (x_B + r_2 * real.cos Œ∏, y_B + r_2 * real.sin Œ∏)} :=
begin
  sorry
end

end line_segments_equivalent_circles_equivalent_l101_101749


namespace ratio_of_share_l101_101791

/-- A certain amount of money is divided amongst a, b, and c. 
The share of a is $122, and the total amount of money is $366. 
Prove that the ratio of a's share to the combined share of b and c is 1 / 2. -/
theorem ratio_of_share (a b c : ‚Ñù) (total share_a : ‚Ñù) (h1 : a + b + c = total) 
  (h2 : total = 366) (h3 : share_a = 122) : share_a / (total - share_a) = 1 / 2 := by
  sorry

end ratio_of_share_l101_101791


namespace sum_of_divisors_37_l101_101309

theorem sum_of_divisors_37 : ‚àë d in (Finset.filter (fun d => d > 0 ‚àß 37 % d = 0) (Finset.range (37 + 1))), d = 38 :=
by
  sorry

end sum_of_divisors_37_l101_101309


namespace vince_savings_l101_101297

-- Definitions based on conditions
def earnings_per_customer : ‚Ñï := 18
def monthly_expenses : ‚Ñ§ := 280
def recreation_percentage : ‚Ñö := 0.20
def customers_served : ‚Ñï := 80

-- Intermediate calculations (explained in the solution steps but not used directly here)
def total_earnings : ‚Ñï := customers_served * earnings_per_customer
def recreation_expenses : ‚Ñ§ := (recreation_percentage.toReal * total_earnings).to_nat
def total_monthly_expenses : ‚Ñ§ := monthly_expenses + recreation_expenses
def savings : ‚Ñ§ := total_earnings - total_monthly_expenses

-- The proof statement we need to verify
theorem vince_savings :
  savings = 872 :=
sorry

end vince_savings_l101_101297


namespace non_factorial_tails_lt_2500_l101_101436

-- Define the function f(m)
def f (m: ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625

-- Define what it means to be a factorial tail
def is_factorial_tail (n: ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, f(m) = n

-- Define the statement to be proved
theorem non_factorial_tails_lt_2500 : 
  (finset.range 2500).filter (Œª n, ¬¨ is_factorial_tail n).card = 499 :=
by
  sorry

end non_factorial_tails_lt_2500_l101_101436


namespace actual_value_wrongly_copied_l101_101233

theorem actual_value_wrongly_copied :
  ‚àÄ (n : ‚Ñï) (mean_initial mean_correct : ‚Ñö) (wrong_value correct_value : ‚Ñö),
  n = 20 ‚Üí
  mean_initial = 150 ‚Üí
  mean_correct = 151.25 ‚Üí
  wrong_value = 135 ‚Üí
  (mean_correct * n - mean_initial * n) + wrong_value = correct_value ‚Üí
  correct_value = 160 :=
begin
  intros n mean_initial mean_correct wrong_value correct_value,
  assume h_n h_mean_initial h_mean_correct h_wrong_value h_correct_value,
  sorry
end

end actual_value_wrongly_copied_l101_101233


namespace snack_eaters_left_after_second_newcomers_l101_101366

theorem snack_eaters_left_after_second_newcomers
  (initial_snackers : ‚Ñï)
  (new_outsiders_1 : ‚Ñï)
  (half_left_1 : ‚Ñï)
  (new_outsiders_2 : ‚Ñï)
  (final_snackers : ‚Ñï)
  (H1 : initial_snackers = 100)
  (H2 : new_outsiders_1 = 20)
  (H3 : half_left_1 = (initial_snackers + new_outsiders_1) / 2)
  (H4 : new_outsiders_2 = 10)
  (H5 : final_snackers = 20)
  : (initial_snackers + new_outsiders_1 - half_left_1 + new_outsiders_2 - (initial_snackers + new_outsiders_1 - half_left_1 + new_outsiders_2 - final_snackers * 2)) = 30 :=
by 
  sorry

end snack_eaters_left_after_second_newcomers_l101_101366


namespace range_and_period_range_of_m_l101_101554

noncomputable def f (x : ‚Ñù) : ‚Ñù :=
  2 * Real.cos (x + Real.pi / 3) * (Real.sin (x + Real.pi / 3) - Real.sqrt 3 * Real.cos (x + Real.pi / 3))

theorem range_and_period (x : ‚Ñù) :
  (Set.range f = Set.Icc (-2 - Real.sqrt 3) (2 - Real.sqrt 3)) ‚àß (‚àÄ x, f (x + Real.pi) = f x) := sorry

theorem range_of_m (x m : ‚Ñù) (h1 : 0 ‚â§ x ‚àß x ‚â§ Real.pi / 6) (h2 : m * (f x + Real.sqrt 3) + 2 = 0) :
  m ‚àà Set.Icc (- 2 * Real.sqrt 3 / 3) (-1) := sorry

end range_and_period_range_of_m_l101_101554


namespace triangle_circumscribed_around_coins_l101_101751

noncomputable def circumscribed_triangle_area (r1 r2 r3 : ‚Ñù) : ‚Ñù :=
  r1*r1*real.cot(œÄ/2) + r2*r2*real.cot(œÄ/2) + r3*r3*real.cot(œÄ/2)
  + (r1 + r2) * real.sqrt (r1 * r2)
  + (r2 + r3) * real.sqrt (r2 * r3)
  + (r3 + r1) * real.sqrt (r1 * r3)
  + real.sqrt ((r1 + r2 + r3) * r1 * r2 * r3)

theorem triangle_circumscribed_around_coins :
  circumscribed_triangle_area 21 19 23 = 1467.5 :=
sorry

end triangle_circumscribed_around_coins_l101_101751


namespace problem_statement_l101_101914

open Nat

variable (a : ‚Ñï ‚Üí ‚Ñù) -- The arithmetic sequence {a_n}
variable (S : ‚Ñï ‚Üí ‚Ñù) -- The sum of the first n terms of the sequence {a_n}
variable (n : ‚Ñï)     -- A natural number n

-- Conditions
axiom a2_a5_sum : a 2 + a 5 = 12
axiom S5_value : S 5 = 25

-- Definition of the sum of the first n terms of an arithmetic sequence
def arithmetic_sum (a : ‚Ñï ‚Üí ‚Ñù) (n : ‚Ñï) : ‚Ñù := 
  n * a 1 + (n * (n - 1) * (a 2 - a 1)) / 2

-- To define the general term for the arithmetic sequence
noncomputable def a_n := 2 * n - 1

-- To define the sequence b_n
noncomputable def b_n : ‚Ñï ‚Üí ‚Ñù := Œª n, 1 / (2 * n - 1) - 1 / (2 * n + 1)

-- To define the sum of the first n terms of b_n
noncomputable def T_n (n : ‚Ñï) := 1 - 1 / (2 * n + 1)

-- The Lean statement to prove the equivalent math problem
theorem problem_statement (a : ‚Ñï ‚Üí ‚Ñù) (S : ‚Ñï ‚Üí ‚Ñù) (b_n T_n : ‚Ñï ‚Üí ‚Ñù) :
  (a 2 + a 5 = 12) ‚Üí
  (S 5 = 25) ‚Üí
  (‚àÄ n, a n = 2 * n - 1) ‚Üí
  (‚àÄ n, b_n n = 1 / (2 * n - 1) - 1 / (2 * n + 1)) ‚Üí
  (‚àÄ n, T_n n = 1 - 1 / (2 * n + 1)) :=
sorry

end problem_statement_l101_101914


namespace fibonacci_polynomial_property_l101_101646

noncomputable def fibonacci (n : ‚Ñï) : ‚Ñï :=
if n = 1 ‚à® n = 2 then 1 else fibonacci (n - 1) + fibonacci (n - 2)

theorem fibonacci_polynomial_property
  (P : ‚Ñï ‚Üí ‚Ñï)
  (hP_deg : ‚àÄ x, P x = a_x)
  (hP_values : ‚àÄ k, 992 ‚â§ k ‚àß k ‚â§ 1982 ‚Üí P k = fibonacci k) :
  P 1983 = fibonacci 1983 - 1 :=
sorry

end fibonacci_polynomial_property_l101_101646


namespace math_proof_problem_l101_101053

noncomputable def problem_1 : Prop :=
  let circle_eq := (x + 1)^2 + y^2 = 8
  let ellipse_eq := x^2 / 2 + y^2 = 1
  ‚àÄ (C : ‚Ñù √ó ‚Ñù) (P : ‚Ñù √ó ‚Ñù) (Q : ‚Ñù √ó ‚Ñù) (A : ‚Ñù √ó ‚Ñù) (M : ‚Ñù √ó ‚Ñù),
    C = (-1, 0) ‚àß
    ((P.1 + 1)^2 + P.2^2 = 8) ‚àß
    (‚àÄ t : ‚Ñù, Q = (1 - t) * C + t * P) ‚àß
    A = (1, 0) ‚àß
    (‚àÉ t : ‚Ñù, M = (1 - t) * A + t * P ‚àß 2 * (M - Q) = 0) ‚àß
    ((M - Q) ‚Ä¢ (Q - A) = 0) ‚Üí
    ellipse_eq

noncomputable def problem_2 : Prop :=
  let line := Œª k b x, y = k * x + b
  let circle_tangent_eq := x^2 + y^2 = 1
  let ellipse_eq := x^2 / 2 + y^2 = 1
  ‚àÄ (k : ‚Ñù) (b : ‚Ñù) (F H : ‚Ñù √ó ‚Ñù),
    (line k b F.1 = F.2) ‚àß (line k b H.1 = H.2) ‚àß
    circle_tangent_eq F.1 F.2 ‚àß circle_tangent_eq H.1 H.2 ‚àß
    ellipse_eq F.1 F.2 ‚àß ellipse_eq H.1 H.2 ‚àß
    (3 / 4 ‚â§ (F.1 * H.1 + F.2 * H.2) ‚àß (F.1 * H.1 + F.2 * H.2) ‚â§ 4 / 5) ‚Üí
    (-sqrt(2) / 2 ‚â§ k ‚àß k ‚â§ -sqrt(3) / 3) ‚à® (sqrt(3) / 3 ‚â§ k ‚àß k ‚â§ sqrt(2) / 2)

theorem math_proof_problem : problem_1 ‚àß problem_2 :=
by
  constructor
  ¬∑ sorry
  ¬∑ sorry

end math_proof_problem_l101_101053


namespace combine_monomials_x_plus_y_l101_101565

theorem combine_monomials_x_plus_y : ‚àÄ (x y : ‚Ñ§),
  7 * x = 2 - 4 * y ‚Üí
  y + 7 = 2 * x ‚Üí
  x + y = -1 :=
by
  intros x y h1 h2
  sorry

end combine_monomials_x_plus_y_l101_101565


namespace deck_cost_correct_l101_101284

def rare_cards := 19
def uncommon_cards := 11
def common_cards := 30
def rare_card_cost := 1
def uncommon_card_cost := 0.5
def common_card_cost := 0.25

def total_deck_cost := rare_cards * rare_card_cost + uncommon_cards * uncommon_card_cost + common_cards * common_card_cost

theorem deck_cost_correct : total_deck_cost = 32 :=
  by
  -- The proof would go here.
  sorry

end deck_cost_correct_l101_101284


namespace sum_of_first_9000_terms_of_geometric_sequence_l101_101262

noncomputable def geometric_sum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r^n) / (1 - r)

theorem sum_of_first_9000_terms_of_geometric_sequence 
  (a r : ‚Ñù)
  (h‚ÇÅ : geometric_sum a r 3000 = 500)
  (h‚ÇÇ : geometric_sum a r 6000 = 950)
  : geometric_sum a r 9000 = 1355 :=
sorry

end sum_of_first_9000_terms_of_geometric_sequence_l101_101262


namespace geometric_sequence_sum_l101_101265

noncomputable theory

-- Define the conditions and the problem statement
theorem geometric_sequence_sum (a r : ‚Ñù) (h‚ÇÅ : a * (1 - r^3000) / (1 - r) = 500) 
  (h‚ÇÇ : a * (1 - r^6000) / (1 - r) = 950) : 
  a * (1 - r^9000) / (1 - r) = 1355 := 
sorry

end geometric_sequence_sum_l101_101265


namespace multiples_of_7_with_unit_digit_7_and_lt_150_l101_101100

/--
Given a positive integer n,
Let \(7n\) be a multiple of 7,
\(7n < 150\),
and \(7n \mod 10 = 7\),
prove there are 11 such multiples of 7.
-/
theorem multiples_of_7_with_unit_digit_7_and_lt_150 :
  ‚àÉ! (n : ‚Ñï), n ‚â§ 11 ‚àß ‚àÄ (m : ‚Ñï), (1 ‚â§ m ‚àß m ‚â§ n) ‚Üí (7 * (2 * m - 1) < 150 ‚àß (7 * (2 * m - 1)) % 10 = 7) := by
sorry

end multiples_of_7_with_unit_digit_7_and_lt_150_l101_101100


namespace zoo_total_animals_l101_101394

def num_tiger_enclosures : ‚Ñï := 4
def num_zebra_enclosures_per_tiger : ‚Ñï := 2
def num_giraffe_enclosures_per_zebra : ‚Ñï := 3
def num_tigers_per_enclosure : ‚Ñï := 4
def num_zebras_per_enclosure : ‚Ñï := 10
def num_giraffes_per_enclosure : ‚Ñï := 2

theorem zoo_total_animals :
  let num_zebra_enclosures := num_tiger_enclosures * num_zebra_enclosures_per_tiger,
      num_giraffe_enclosures := num_zebra_enclosures * num_giraffe_enclosures_per_zebra,
      total_tigers := num_tiger_enclosures * num_tigers_per_enclosure,
      total_zebras := num_zebra_enclosures * num_zebras_per_enclosure,
      total_giraffes := num_giraffe_enclosures * num_giraffes_per_enclosure,
      total_animals := total_tigers + total_zebras + total_giraffes
  in total_animals = 144 :=
by
  intros
  let num_zebra_enclosures := num_tiger_enclosures * num_zebra_enclosures_per_tiger
  let num_giraffe_enclosures := num_zebra_enclosures * num_giraffe_enclosures_per_zebra
  let total_tigers := num_tiger_enclosures * num_tigers_per_enclosure
  let total_zebras := num_zebra_enclosures * num_zebras_per_enclosure
  let total_giraffes := num_giraffe_enclosures * num_giraffes_per_enclosure
  let total_animals := total_tigers + total_zebras + total_giraffes
  exact eq.refl 144

end zoo_total_animals_l101_101394


namespace sum_f_inv_and_f_eq_4045_div_2_l101_101500

noncomputable def f (x : ‚Ñù) : ‚Ñù := x / (1 + x)

theorem sum_f_inv_and_f_eq_4045_div_2 :
  (‚àë k in finRange 2023 + 1, f (1 / k) + f k) = 4045 / 2 :=
by
  sorry

end sum_f_inv_and_f_eq_4045_div_2_l101_101500


namespace sum_of_cubes_consecutive_divisible_by_9_l101_101204

theorem sum_of_cubes_consecutive_divisible_by_9 (n : ‚Ñ§) : 9 ‚à£ (n-1)^3 + n^3 + (n+1)^3 :=
  sorry

end sum_of_cubes_consecutive_divisible_by_9_l101_101204


namespace finite_y_for_divisibility_l101_101679

theorem finite_y_for_divisibility :
  ‚àÄ x : ‚Ñï, x > 0 ‚Üí (‚àÉ y : ‚Ñï, y > 0 ‚àß (x^3 + y^3 + 1) % (x + y + 1) = 0) ‚àß 
           (‚àÄ x' : ‚Ñï, x' > 0 ‚Üí ¬¨ (‚àÉ f : ‚Ñï ‚Üí ‚Ñï, injective f ‚àß ‚àÄ n, (f n) > 0 ‚àß (x'^3 + (f n)^3 + 1) % (x' + (f n) + 1) = 0)) := 
begin
  sorry
end

end finite_y_for_divisibility_l101_101679


namespace roots_are_positive_integers_but_not_squares_l101_101532

variable {m n : ‚Ñï}

def roots_eq (x : ‚Ñ§) : Prop :=
  x^2 - (m^2 - m + 1)*(x - n^2 - 1) - (n^2 + 1)^2 = 0

def is_not_square (x : ‚Ñ§) : Prop :=
  ‚àÄ k : ‚Ñ§, x ‚â† k^2

theorem roots_are_positive_integers_but_not_squares
  (hmn_pos : m > n)
  (hmn_even : (m + n) % 2 = 0)
  (hm_pos : m > 0)
  (hn_pos : n > 0) :
  ‚àÉ (x y : ‚Ñ§),
    roots_eq x ‚àß roots_eq y ‚àß
    0 < x ‚àß 0 < y ‚àß x ‚â† y ‚àß
    is_not_square x ‚àß is_not_square y :=
sorry

end roots_are_positive_integers_but_not_squares_l101_101532


namespace max_volume_for_open_top_box_l101_101874

noncomputable def volume (a x : ‚Ñù) : ‚Ñù := x * (a - 2 * x)^2

theorem max_volume_for_open_top_box (a : ‚Ñù) (ha : 0 < a) :
  ‚àÉ x : ‚Ñù, x = a / 6 ‚àß 0 < x ‚àß x < a / 2 ‚àß volume a x = (2 * a^3 / 27) :=
begin
  -- Prove the statement here
  sorry
end

end max_volume_for_open_top_box_l101_101874


namespace find_a15_l101_101147

namespace ArithmeticSequence

variable {a : ‚Ñï ‚Üí ‚Ñù}

def arithmetic_sequence (an : ‚Ñï ‚Üí ‚Ñù) := ‚àÉ (a‚ÇÅ d : ‚Ñù), ‚àÄ n, an n = a‚ÇÅ + (n - 1) * d

theorem find_a15
  (h_seq : arithmetic_sequence a)
  (h_a3 : a 3 = 4)
  (h_a9 : a 9 = 10) :
  a 15 = 16 := 
sorry

end ArithmeticSequence

end find_a15_l101_101147


namespace committee_count_l101_101365

theorem committee_count (students : Finset ‚Ñï) (Alice : ‚Ñï) (hAlice : Alice ‚àà students) (hCard : students.card = 7) :
  ‚àÉ committees : Finset (Finset ‚Ñï), (‚àÄ c ‚àà committees, Alice ‚àà c ‚àß c.card = 4) ‚àß committees.card = 20 :=
sorry

end committee_count_l101_101365


namespace algebraic_expression_value_l101_101971

theorem algebraic_expression_value (m n : ‚Ñ§) (h : n - m = 2):
  (m^2 - n^2) / m * (2 * m / (m + n)) = -4 :=
sorry

end algebraic_expression_value_l101_101971


namespace max_cells_cut_by_line_in_chessboard_l101_101303

theorem max_cells_cut_by_line_in_chessboard :
  ‚àÄ (n : ‚Ñï), n = 8 ‚Üí (‚àÉ L : ‚Ñù ‚Üí ‚Ñù, (‚àÉ max_cells : ‚Ñï, max_cells = 15 ‚àß 
  ‚àÄ Œ∏ : ‚Ñù, max_cells <= (count_cells_intersected_by_line n L Œ∏))) :=
sorry

end max_cells_cut_by_line_in_chessboard_l101_101303


namespace sphere_volume_ratio_l101_101585

theorem sphere_volume_ratio
  (r R : ‚Ñù)
  (h : (4:‚Ñù) * œÄ * r^2 / (4 * œÄ * R^2) = (4:‚Ñù) / 9) : 
  (r^3 / R^3 = (8:‚Ñù) / 27) := by
  sorry

end sphere_volume_ratio_l101_101585


namespace sheets_of_paper_used_l101_101668

theorem sheets_of_paper_used :
  let 
    num_classes := 6,
    num_first_classes := 3,
    num_last_classes := 3,
    students_first_class := 22,
    students_last_class := 18,
    sheets_per_student_first := 6,
    sheets_per_student_last := 4,
    extra_copies := 10,
    handout_sheets_per_student := 2,
    total_first_class_sheets :=
      3 * ((students_first_class * sheets_per_student_first) +
           (extra_copies * sheets_per_student_first) +
           (students_first_class * handout_sheets_per_student)),
    total_last_class_sheets :=
      3 * ((students_last_class * sheets_per_student_last) +
           (extra_copies * sheets_per_student_last) +
           (students_last_class * handout_sheets_per_student)),
    total_sheets := total_first_class_sheets + total_last_class_sheets
  in total_sheets = 1152 := by
  sorry

end sheets_of_paper_used_l101_101668


namespace harry_change_l101_101570

theorem harry_change (a : ‚Ñï) :
  (‚àÉ k : ‚Ñï, a = 50 * k + 2 ‚àß a < 100) ‚àß (‚àÉ m : ‚Ñï, a = 5 * m + 4 ‚àß a < 100) ‚Üí
  a = 52 :=
by sorry

end harry_change_l101_101570


namespace find_f_minus_two_l101_101000

noncomputable def f : ‚Ñù ‚Üí ‚Ñù := sorry

axiom f_add : ‚àÄ x y : ‚Ñù, f (x + y) = f x + f y + 2 * x * y
axiom f_one : f 1 = 2

theorem find_f_minus_two : f (-2) = 2 :=
by sorry

end find_f_minus_two_l101_101000


namespace sum_fractional_parts_l101_101171

def fractional_part (x : ‚Ñö) : ‚Ñö := x - (int.floor x)

theorem sum_fractional_parts (p : ‚Ñï) [fact (nat.prime p)] (hp : p % 4 = 1) :
  (‚àë k in finset.range (p - 1), fractional_part ((k ^ 2 : ‚Ñö) / p)) = (p - 1) / 4 :=
sorry

end sum_fractional_parts_l101_101171


namespace triangle_AEB_area_l101_101610

def Point := ‚Ñù √ó ‚Ñù
def Rectangle (A B C D : Point) : Prop := 
  A.1 = D.1 ‚àß B.1 = C.1 ‚àß A.2 = B.2 ‚àß D.2 = C.2 ‚àß 
  (B.1 - A.1) = 8 ‚àß (C.2 - B.2) = 4

def OnSegment (P D C : Point) : Prop :=
  (min D.1 C.1 ‚â§ P.1 ‚àß P.1 ‚â§ max D.1 C.1) ‚àß 
  (min D.2 C.2 ‚â§ P.2 ‚àß P.2 ‚â§ max D.2 C.2)

def Intersects (AF BG : Set Point) (E : Point) : Prop :=
  E ‚àà AF ‚àß E ‚àà BG

def length (P Q : Point) : ‚Ñù :=
  sqrt ((Q.1 - P.1)^2 + (Q.2 - P.2)^2)

def TriangleArea (A B C : Point) : ‚Ñù :=
  abs (A.1*(B.2 - C.2) + B.1*(C.2 - A.2) + C.1*(A.2 - B.2)) / 2

theorem triangle_AEB_area (A B C D F G E : Point) (hRect : Rectangle A B C D)
  (hPointF : OnSegment F D C) (hPointG : OnSegment G D C)
  (hDF : length D F = 2) (hGC : length G C = 3)
  (hIntersects : Intersects ({ x : Point | ‚àÉ l : ‚Ñù, x = (l * F.1 + (1-l) * A.1, l * F.2 + (1-l) * A.2) } : Set Point) 
  ({ x : Point | ‚àÉ l : ‚Ñù, x = (l * G.1 + (1-l) * B.1, l * G.2 + (1-l) * B.2) } : Set Point) E) :
  TriangleArea A E B = 6 := sorry

end triangle_AEB_area_l101_101610


namespace area_of_section_l101_101991

-- Definitions based on problem conditions
variables (a h : ‚Ñù)
-- Conditions
def is_positive_a (a : ‚Ñù) : Prop := a > 0
def is_positive_h (h : ‚Ñù) : Prop := h > a * real.sqrt (6) / 6

-- Correct answer in the proof
def derived_area (a h : ‚Ñù) : ‚Ñù := (3 * a^2 * h) / (4 * real.sqrt (a^2 + 3 * h^2))

-- Lean statement
theorem area_of_section (a h : ‚Ñù) 
  (ha : is_positive_a a) 
  (hh : is_positive_h h) :
  ‚àÉ (area : ‚Ñù), area = derived_area a h := 
sorry

end area_of_section_l101_101991


namespace not_factorial_tails_count_l101_101457

def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) -- you can extend further if needed

def is_factorial_tail (n : ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, m > 0 ‚àß f(m) = n

theorem not_factorial_tails_count : 
  ‚àÉ c : ‚Ñï, c = 500 ‚àß ‚àÄ k : ‚Ñï, k < 2500 ‚Üí ¬¨is_factorial_tail k ‚Üí k < 2500 - c :=
by
  sorry

end not_factorial_tails_count_l101_101457


namespace zoo_total_animals_l101_101388

theorem zoo_total_animals :
  let tiger_enclosures := 4
  let zebra_enclosures := tiger_enclosures * 2
  let giraffe_enclosures := zebra_enclosures * 3
  let tigers := tiger_enclosures * 4
  let zebras := zebra_enclosures * 10
  let giraffes := giraffe_enclosures * 2
  let total_animals := tigers + zebras + giraffes
  in total_animals = 144 := by
  sorry

end zoo_total_animals_l101_101388


namespace count_undefined_values_l101_101503

-- Define the expression where the denominator causes the undefined values
def expression_denominator (x : ‚Ñù) : ‚Ñù := (x^2 + x - 6) * (x - 4)

-- State the theorem about the number of values that make the expression undefined
theorem count_undefined_values : (finset.univ.filter (Œª x, expression_denominator x = 0)).card = 3 := by
  sorry

end count_undefined_values_l101_101503


namespace acute_angles_of_right_triangle_l101_101825

theorem acute_angles_of_right_triangle 
  (A B C F M1 M2 : Point) 
  (h_right_angle : ‚à† C = 90¬∞)
  (h_median : is_median C F)
  (h_incircle : inscribed_circle (triangle A B C))
  (h_chord_equal_section : chord_of_circle M1 M2 = section_ending_at_C F C) :
  acute_angles_of_triangle A B C = (86¬∞ + 24', 3¬∞ + 36') :=
sorry

end acute_angles_of_right_triangle_l101_101825


namespace line_in_first_second_third_quadrants_l101_101539

theorem line_in_first_second_third_quadrants (k b : ‚Ñù) (h : ‚àÄ x : ‚Ñù, (‚àÉ y : ‚Ñù, y = k * x + b) ‚àß 
            (by have I : ‚àÉ p : ‚Ñù √ó ‚Ñù, p.1 ‚â† 0 ‚àß p.2 ‚â† 0 := sorry; exact I)) :
  k > 0 ‚àß b > 0 := sorry

end line_in_first_second_third_quadrants_l101_101539


namespace positive_difference_l101_101270

-- Define the conditions given in the problem
def conditions (x y : ‚Ñù) : Prop :=
  x + y = 40 ‚àß 3 * y - 4 * x = 20

-- The theorem to prove
theorem positive_difference (x y : ‚Ñù) (h : conditions x y) : abs (y - x) = 11.42 :=
by
  sorry -- proof omitted

end positive_difference_l101_101270


namespace midpoint_BL_on_PQ_l101_101136

open EuclideanGeometry Real

variables {A B C D E L P Q : Point}

-- assuming given conditions
variables 
  (h_acute : AcuteAngledTriangle A B C)
  (h_BL_bisects_ABC : AngleBisector B L (TriangleVertexAngle A B C))
  (h_D_midpoint_arc_AB : Midpoint D (CircumcircleArc A B))
  (h_E_midpoint_arc_BC : Midpoint E (CircumcircleArc B C))
  (h_P_extension_BD : OnLine P (ExtensionOfLineThroughPoints B D))
  (h_Q_extension_BE : OnLine Q (ExtensionOfLineThroughPoints B E))
  (h_angle_APB_90 : ‚à° A P B = 90 )
  (h_angle_CQB_90 : ‚à° C Q B = 90 )

-- prove that the midpoint of BL lies on line PQ
theorem midpoint_BL_on_PQ :
  Midpoint (SegmentMidpoint B L) (LineThroughPoints P Q) :=
sorry

end midpoint_BL_on_PQ_l101_101136


namespace digit_1234_of_concatenated_sequence_eq_4_l101_101657

def sequence_concat (n : ‚Ñï) : ‚Ñï := 
  let digits := (List.join (List.map (Œª i, (i : ‚Ñï).digitCharList) (List.range' 1 (n + 1))) : List Char)
  let digit_as_string := digits.nthD 1233 -- We use index 1233 since Lean lists are 0-indexed
  (digit_as_string.val - '0'.val).toNat

theorem digit_1234_of_concatenated_sequence_eq_4 : sequence_concat 500 = 4 := by
  sorry

end digit_1234_of_concatenated_sequence_eq_4_l101_101657


namespace find_lengths_l101_101613

-- Definitions
variables {A B C D P T S Q R : Type} [MetricSpace X]
variables {AB CD BC AD : X}
variables {PA AQ QP : ‚Ñù}

-- Conditions
def rectangle (ABCD : X) : Prop := -- define what it means for ABCD to be a rectangle
def perpendicular (TS BC : X) : Prop := -- define what it means for TS and BC to be perpendicular
def angle_90 (APD : X) : Prop := -- define what it means for an angle to be 90 degrees
def equal_length (CP PT : X) := -- define what it means for CP and PT to be equal

-- Given Conditions in Lean theorem statement
theorem find_lengths (rectangle ABCD) (angle_90 APD) (perpendicular TS BC) (equal_length CP PT)
  (PA = 18) (AQ = 24) (QP = 15) :
  CP = 2 * real.sqrt 17 ‚àß QT = real.sqrt 157 :=
sorry

end find_lengths_l101_101613


namespace cylinder_volume_transformation_l101_101582

theorem cylinder_volume_transformation (œÄ : ‚Ñù) (r h : ‚Ñù) (V : ‚Ñù) (V_new : ‚Ñù)
  (hV : V = œÄ * r^2 * h) (hV_initial : V = 20) : V_new = œÄ * (3 * r)^2 * (4 * h) :=
by
sorry

end cylinder_volume_transformation_l101_101582


namespace range_of_a_condition_l101_101179

def f (x : ‚Ñù) : ‚Ñù :=
  if x ‚â§ 0 then 2*x + 4 else 2^x

theorem range_of_a_condition (a : ‚Ñù) (h : f (f a) > f (f a + 1)) : a ‚àà Set.Ioo (-5/2) (-2) := 
sorry

end range_of_a_condition_l101_101179


namespace count_irreducible_fractions_l101_101966

theorem count_irreducible_fractions (a b : ‚Ñï) :
  let num := 2015
  let lower_bound := 2015 * 2016
  let upper_bound := 2015 ^ 2 
  (‚àÄ (d : ‚Ñï), lower_bound < d ‚àß d ‚â§ upper_bound ‚àß Int.gcd num d = 1) ‚Üí 
  b = 1440 :=
by
  sorry

end count_irreducible_fractions_l101_101966


namespace scientific_notation_correct_l101_101419

def num : ‚Ñù := 1040000000

theorem scientific_notation_correct : num = 1.04 * 10^9 := by
  sorry

end scientific_notation_correct_l101_101419


namespace triangle_circumcenter_interior_count_l101_101032

theorem triangle_circumcenter_interior_count :
  let types_of_triangles_with_interior_circumcenter := 
    {t : Type} 
      (h : t = "Equilateral" ‚à® t = "Isosceles" ‚à® t = "Scalene" ‚à® t = "Right") in
  (‚àÄ t, t ‚àà types_of_triangles_with_interior_circumcenter ‚Üí 
    (t = "Equilateral" ‚à® t = "Isosceles") ‚Üí
     true) ‚Üí -- stating these 2 have circumcenters inside
  2 := sorry

end triangle_circumcenter_interior_count_l101_101032


namespace non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101444

def g (m : Nat) : Nat :=
  let f k := m / k
  f 5 + f 25 + f 125 + f 625 + f 3125 + f 15625 + f 78125 + f 390625 + f 1953125 + f 9765625 + f 48828125 + f 244140625 + f 1220703125 + f 6103515625 + f 30517578125 -- continue as needed

def is_factorial_tail (n : Nat) : Prop :=
  ‚àÉ m : Nat, g m = n

def count_factorial_tails (N : Nat) : Nat :=
  (List.range N).filter (Œª n, is_factorial_tail n).length

theorem non_factorial_tails_lemma : count_factorial_tails 2500 = 2000 := sorry

theorem count_non_factorial_tails (N : Nat) : Prop :=
  let total := N - 1
  total - count_factorial_tails N = 499

theorem solution : count_non_factorial_tails 2500 := sorry

end non_factorial_tails_lemma_count_non_factorial_tails_solution_l101_101444


namespace original_five_digit_number_l101_101807

theorem original_five_digit_number :
  ‚àÉ N y x : ‚Ñï, (N = 10 * y + x) ‚àß (N + y = 54321) ‚àß (N = 49383) :=
by
  -- The proof script goes here
  sorry

end original_five_digit_number_l101_101807


namespace sum_of_coefficients_l101_101036

noncomputable def polynomial := (1 + x) + (1 + x)^2 + (1 + x)^3 + (1 + x)^4 + (1 + x)^5 + (1 + x)^6 + (1 + x)^7 + (1 + x)^8

theorem sum_of_coefficients :
  let a := 8,
  let sum_of_all_coeff := 510,
  a_1 + a_2 + a_3 + a_4 + a_5 + a_6 + a_7 + a_8 = 502 :=
by
  sorry

end sum_of_coefficients_l101_101036


namespace minimize_expression_in_triangle_l101_101150

theorem minimize_expression_in_triangle
  (A B C : ‚Ñù)
  (a b c : ‚Ñù)
  (h_triangle : a > 0 ‚àß b > 0 ‚àß c > 0)
  (h_opposite_angles : a = sin A ‚àß b = sin B ‚àß c = sin C)
  (h_condition : 3 * (cos (2 * A) - cos (2 * C)) = 1 - cos (2 * B)) :
  ‚àÉ x : ‚Ñù, x = (2 * sqrt 7 / 3) ‚àß
           ( ‚àÄ A B C : ‚Ñù, 3 * (cos (2 * A) - cos (2 * C)) = 1 - cos (2 * B) ‚Üí
             let expression := (sin C / (sin A * sin B)) + (cos C / sin C) in
             expression ‚â• x ‚àß (expression = x) ‚Üî (tan A = sqrt 7 / 2)) :=
by
  sorry

end minimize_expression_in_triangle_l101_101150


namespace sqrt_problem1_sqrt_problem2_l101_101849

theorem sqrt_problem1 : sqrt 80 - sqrt 20 + sqrt 5 = 3 * sqrt 5 :=
by
  sorry

theorem sqrt_problem2 : (4 * sqrt 2 - 3 * sqrt 6) / (2 * sqrt 2) = 2 - (3 / 2) * sqrt 3 :=
by
  sorry

end sqrt_problem1_sqrt_problem2_l101_101849


namespace range_of_x_l101_101947

noncomputable def f (x : ‚Ñù) : ‚Ñù := Real.log x + 2^x

theorem range_of_x (x : ‚Ñù) (h : f (x^2 + 2) < f (3 * x)) : 1 < x ‚àß x < 2 :=
by sorry

end range_of_x_l101_101947


namespace simplify_and_evaluate_l101_101206

theorem simplify_and_evaluate (x : ‚Ñù) (h : x = 3) : ((x - 2) / (x - 1)) / ((x + 1) - (3 / (x - 1))) = 1 / 5 :=
by
  sorry

end simplify_and_evaluate_l101_101206


namespace scientific_notation_correct_l101_101420

def num : ‚Ñù := 1040000000

theorem scientific_notation_correct : num = 1.04 * 10^9 := by
  sorry

end scientific_notation_correct_l101_101420


namespace sin_double_angle_identity_l101_101520

open Real

theorem sin_double_angle_identity {Œ± : ‚Ñù} (h1 : œÄ / 2 < Œ± ‚àß Œ± < œÄ) 
    (h2 : sin (Œ± + œÄ / 6) = 1 / 3) :
  sin (2 * Œ± + œÄ / 3) = -4 * sqrt 2 / 9 := 
by 
  sorry

end sin_double_angle_identity_l101_101520


namespace problem_solution_l101_101698

theorem problem_solution :
  ‚àÉ r s : ‚Ñö ‚Üí ‚Ñö,
    (‚àÉ k : ‚Ñö, r = Œª x, k * (x + 4) * (x - 2) ‚àß s = (Œª x, (x + 4) * (x - 3))) ‚àß
    (tendsto (Œª x, r x / s x) at_top (nhds (-3))) ‚àß
    (r 2 = 0) ‚àß
    (r 0 / s 0 = 2) := 
  sorry

end problem_solution_l101_101698


namespace geometric_sequence_sum_l101_101259

theorem geometric_sequence_sum
  (a r : ‚Ñù)
  (h1 : a * (1 - r ^ 3000) / (1 - r) = 500)
  (h2 : a * (1 - r ^ 6000) / (1 - r) = 950) :
  a * (1 - r ^ 9000) / (1 - r) = 1355 :=
sorry

end geometric_sequence_sum_l101_101259


namespace find_angle_l101_101491

theorem find_angle (A : ‚Ñù) (deg_to_rad : ‚Ñù) :
  (1/2 * Real.sin (A / 2 * deg_to_rad) + Real.cos (A / 2 * deg_to_rad) = 1) ‚Üí
  (A = 360) :=
sorry

end find_angle_l101_101491


namespace standard_deviation_of_applicants_ages_l101_101691

noncomputable def average_age : ‚Ñù := 30
noncomputable def max_different_ages : ‚Ñù := 15

theorem standard_deviation_of_applicants_ages 
  (œÉ : ‚Ñù)
  (h : max_different_ages = 2 * œÉ) 
  : œÉ = 7.5 :=
by
  sorry

end standard_deviation_of_applicants_ages_l101_101691


namespace not_factorial_tails_count_l101_101453

def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) -- you can extend further if needed

def is_factorial_tail (n : ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, m > 0 ‚àß f(m) = n

theorem not_factorial_tails_count : 
  ‚àÉ c : ‚Ñï, c = 500 ‚àß ‚àÄ k : ‚Ñï, k < 2500 ‚Üí ¬¨is_factorial_tail k ‚Üí k < 2500 - c :=
by
  sorry

end not_factorial_tails_count_l101_101453


namespace exists_polynomial_H_flow_l101_101501

structure Multigraph (V E : Type) := 
  (adj : E ‚Üí V √ó V)
  (edges : ‚àÄ e : E, e ‚Üí ‚Ñï)
  (vertices : finset V)

variable (G : Multigraph V E)

def finite_abelian_group (H : Type) [add_comm_group H] [fintype H] := H

theorem exists_polynomial_H_flow (G : Multigraph V E) :
  ‚àÉ P : polynomial ‚Ñ§, 
    ‚àÄ (H : Type) [finite_abelian_group H],
      number_of_H_flows G H = P ((|H| - 1) : ‚Ñ§) :=
sorry

end exists_polynomial_H_flow_l101_101501


namespace increasing_range_l101_101118

theorem increasing_range (a : ‚Ñù) :
  (‚àÄ x y : ‚Ñù, x ‚â§ y ‚Üí (x + a * real.sin x) ‚â§ (y + a * real.sin y)) ‚Üî (a ‚àà set.Icc (-1) 1) :=
by
  sorry

end increasing_range_l101_101118


namespace monotone_f_implies_a_in_range_l101_101580

-- Define the function and the conditions
def f (x a : ‚Ñù) := x - (1 / 3) * Real.sin (2 * x) + a * Real.sin x

-- State the theorem we want to prove
theorem monotone_f_implies_a_in_range (a : ‚Ñù) :
  (‚àÄ x : ‚Ñù, 1 - (2 / 3) * Real.cos (2 * x) + a * Real.cos x ‚â• 0) ‚Üí
  a ‚àà Set.Icc (-1/3 : ‚Ñù) (1/3 : ‚Ñù) :=
by
  intro h
  -- Placeholder for proof, which is not required
  sorry

end monotone_f_implies_a_in_range_l101_101580


namespace pure_alcohol_to_add_l101_101789

-- Variables and known values
variables (x : ‚Ñù) -- amount of pure alcohol added
def initial_volume : ‚Ñù := 6 -- initial solution volume in liters
def initial_concentration : ‚Ñù := 0.35 -- initial alcohol concentration
def target_concentration : ‚Ñù := 0.50 -- target alcohol concentration

-- Conditions
def initial_pure_alcohol : ‚Ñù := initial_volume * initial_concentration

-- Statement of the problem
theorem pure_alcohol_to_add :
  (2.1 + x) / (initial_volume + x) = target_concentration ‚Üî x = 1.8 :=
by
  sorry

end pure_alcohol_to_add_l101_101789


namespace N_gt_M_l101_101169

def number_of_integral_solutions (eq : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§) (bound : ‚Ñ§) : ‚Ñ§ :=
  ‚àë x in finset.Icc 0 bound, 
    ‚àë y in finset.Icc 0 bound, 
      ‚àë z in finset.Icc 0 bound, 
        ‚àë t in finset.Icc 0 bound, 
          if eq x y z t = 0 then 1 else 0

def N : ‚Ñ§ :=
  number_of_integral_solutions (Œª x y z t, x^2 - y^2 - (z^3 - t^3)) 1000000

def M : ‚Ñ§ :=
  number_of_integral_solutions (Œª x y z t, x^2 - y^2 - (z^3 - t^3 + 1)) 1000000

theorem N_gt_M : N > M :=
  sorry

end N_gt_M_l101_101169


namespace math_problem_l101_101353

theorem math_problem :
  3^(5+2) + 4^(1+3) = 39196 ‚àß
  2^(9+2) - 3^(4+1) = 3661 ‚àß
  1^(8+6) + 3^(2+3) = 250 ‚àß
  6^(5+4) - 4^(5+1) = 409977 ‚Üí 
  5^(7+2) - 2^(5+3) = 1952869 :=
by
  sorry

end math_problem_l101_101353


namespace F_neg_a_eq_l101_101538

def is_odd (f : ‚Ñù ‚Üí ‚Ñù) := ‚àÄ x, f (-x) = -f x

variables {f g : ‚Ñù ‚Üí ‚Ñù} {a b : ‚Ñù}

-- given the conditions
axiom h1 : is_odd f
axiom h2 : is_odd g
axiom f_def : ‚àÄ x, F x = f x + 3 * g x + 5
axiom F_a : F a = b

-- proof goal
theorem F_neg_a_eq : F (-a) = 10 - b :=
by sorry

end F_neg_a_eq_l101_101538


namespace zoo_total_animals_l101_101392

theorem zoo_total_animals (tiger_enclosure : ‚Ñï) (zebra_enclosure_per_tiger : ‚Ñï) 
  (giraffe_enclosures_ratio : ‚Ñï) (tigers_per_enclosure : ‚Ñï) 
  (zebras_per_enclosure : ‚Ñï) (giraffes_per_enclosure : ‚Ñï) 
  (Htiger : tiger_enclosure = 4) (Hzebra_per_tiger : zebra_enclosure_per_tiger = 2) 
  (Hgiraffe_ratio : giraffe_enclosures_ratio = 3) (Ht_pe : tigers_per_enclosure = 4) 
  (Hz_pe : zebras_per_enclosure = 10) (Hg_pe : giraffes_per_enclosure = 2) : 
  let zebra_enclosures := tiger_enclosure * zebra_enclosure_per_tiger in
  let giraffe_enclosures := zebra_enclosures * giraffe_enclosures_ratio in
  let total_tigers := tiger_enclosure * tigers_per_enclosure in
  let total_zebras := zebra_enclosures * zebras_per_enclosure in
  let total_giraffes := giraffe_enclosures * giraffes_per_enclosure in
  total_tigers + total_zebras + total_giraffes = 144 :=
by
  sorry

end zoo_total_animals_l101_101392


namespace trigonometric_identity_l101_101772

theorem trigonometric_identity
  (h1 : ‚àÄ x, sin x ^ 2 = (1 - cos (2 * x)) / 2)
  (h2 : ‚àÄ x, cos x ^ 2 = (1 + cos (2 * x)) / 2)
  (h3 : cos (3 * œÄ / 4) = -cos (œÄ / 4))
  (h4 : cos (5 * œÄ / 4) = -cos (œÄ / 4))
  (h5 : cos (7 * œÄ / 4) = cos (œÄ / 4)) :
  sin (œÄ / 8) ^ 4 + cos (3 * œÄ / 8) ^ 4 + sin (5 * œÄ / 8) ^ 4 + cos (7 * œÄ / 8) ^ 4 = 3 / 2 :=
by
  sorry

end trigonometric_identity_l101_101772


namespace abs_value_inequality_l101_101898

theorem abs_value_inequality (x : ‚Ñù) : (2 ‚â§ |x - 3| ‚àß |x - 3| ‚â§ 8) ‚Üî (x ‚àà Icc (-5 : ‚Ñù) 1 ‚à® x ‚àà Icc 5 11) :=
by
  sorry

end abs_value_inequality_l101_101898


namespace solve_fn_l101_101244

open Set

def f0 (x : ‚Ñù) := |x|

def f (n : ‚Ñï) : ‚Ñù ‚Üí ‚Ñù
| 0, x => f0 x
| (n+1), x => |f n x - 2|

noncomputable def solution_set (n : ‚Ñï) : Set ‚Ñù :=
  { x : ‚Ñù | ‚àÉ k : ‚Ñ§, x = ‚Üë(2 * k + 1) ‚àß |(2 * k + 1 : ‚Ñù)| ‚â§ 2 * n + 1 }

theorem solve_fn (n : ‚Ñï) : (n > 0) ‚Üí { x : ‚Ñù | f n x = 1 } = solution_set n := by
  sorry

end solve_fn_l101_101244


namespace sum_first_9000_terms_l101_101247

noncomputable def geometric_sequence_sum (a r : ‚Ñù) (n : ‚Ñï) : ‚Ñù :=
  a * (1 - r^n) / (1 - r)

theorem sum_first_9000_terms (a r : ‚Ñù) :
  geometric_sequence_sum a r 3000 = 500 ‚Üí
  geometric_sequence_sum a r 6000 = 950 ‚Üí
  geometric_sequence_sum a r 9000 = 1355 :=
by
  intros h1 h2
  sorry

end sum_first_9000_terms_l101_101247


namespace math_problem_l101_101998

section

variable {x y k‚ÇÅ k‚ÇÇ Œª : ‚Ñù}
variable {A B M N P : ‚Ñù √ó ‚Ñù}

-- Define the given points
def A : ‚Ñù √ó ‚Ñù := (-2, 0)
def B : ‚Ñù √ó ‚Ñù := (2, 0)

-- Define non-vertical line slopes given the coordinate pairs
def slope (p1 p2 : ‚Ñù √ó ‚Ñù) : ‚Ñù := (p2.2 - p1.2) / (p2.1 - p1.1)

-- Define the condition of product of slopes
def slopes_product_condition (P : ‚Ñù √ó ‚Ñù) : Prop := 
  slope A P * slope B P = -3 / 4

-- Define the trajectory equation
def trajectory_equation (P : ‚Ñù √ó ‚Ñù) : Prop := 
  P.2 ‚â† 0 ‚àß P.1^2 / 4 + P.2^2 / 3 = 1

-- Define the condition kAM * kAN = lambda
def slopes_MN_condition (M N : ‚Ñù √ó ‚Ñù) (k‚ÇÅ : ‚Ñù) : Prop := 
  slope A M * slope A N = Œª

-- Define the condition that MN passes through the midpoint of AB
def passes_midpoint_AB (M N : ‚Ñù √ó ‚Ñù) : Prop := 
  let midpoint := ((A.1 + B.1) / 2, (A.2 + B.2) / 2)
  (midpoint.2 = (slope M N * (midpoint.1 - M.1) + M.2) ‚àß (midpoint.2 = (slope M N * (midpoint.1 - N.1) + N.2)))

-- Main theorem
theorem math_problem (P : ‚Ñù √ó ‚Ñù) (M N : ‚Ñù √ó ‚Ñù) (k‚ÇÅ : ‚Ñù):
  slopes_product_condition P ‚Üí
  trajectory_equation P ‚Üí
  slopes_MN_condition M N k‚ÇÅ ‚Üí
  Œª = -3 / 4 ‚Üí
  passes_midpoint_AB M N :=
sorry

end

end math_problem_l101_101998


namespace geometric_sequence_sum_l101_101268

noncomputable theory

-- Define the conditions and the problem statement
theorem geometric_sequence_sum (a r : ‚Ñù) (h‚ÇÅ : a * (1 - r^3000) / (1 - r) = 500) 
  (h‚ÇÇ : a * (1 - r^6000) / (1 - r) = 950) : 
  a * (1 - r^9000) / (1 - r) = 1355 := 
sorry

end geometric_sequence_sum_l101_101268


namespace square_ac_lt_2_fg_l101_101654

variables {A B C D E F G : Point}
variable [square ABCD]

-- Definitions & assumptions
def is_internal_point_on_side (E : Point) (AD : Line) : Prop :=
  -- Assume E is an internal point on the line AD
  -- (How we define this mathematically might depend on a broader geometry context)

def is_foot_of_perpendicular (F : Point) (line1 : Line) (line2 : Line) : Prop :=
  -- Assume F is the foot of the perpendicular from a point on line1 to line2
  -- (How we define this mathematically might depend on a broader geometry context)

def collinear (P Q R : Point) : Prop := 
  -- Assume a basic collinearity definition
  P ‚àà line Q R

-- Theorem & statement
theorem square_ac_lt_2_fg (hE : is_internal_point_on_side E AD)
                           (hF : is_foot_of_perpendicular F (line_through B C) (line_through C E))
                           (hG : collinear G B F ‚àß BG = FG ‚àß collinear G (midpoint E F) (parallel_line BC)) :
  dist A C < 2 * dist F G :=
by
  sorry

end square_ac_lt_2_fg_l101_101654


namespace min_value_of_m_l101_101158

noncomputable def m : (‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù) ‚Üí ‚Ñù :=
Œª f, Inf (set_of (Œª s: ‚Ñù, s ‚â• 1) : set ‚Ñù) (Œª s, (f (s + 1) (s + 1)) - (f (s + 1) s) - (f s (s + 1)) + (f s s))

theorem min_value_of_m (f : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù) 
  (h1 : ‚àÄ x y, x ‚â• 1 ‚Üí y ‚â• 1 ‚Üí  x * (fderiv! ‚Ñù (Œª p : ‚Ñù √ó ‚Ñù, f p.1 p.2) (x, y)).fst + y * (fderiv! ‚Ñù (Œª p : ‚Ñù √ó ‚Ñù, f p.1 p.2) (x, y)).snd = x * y * log (x * y))
  (h2 : ‚àÄ x y, x ‚â• 1 ‚Üí y ‚â• 1 ‚Üí  x^2 *  (fderiv! ‚Ñù (Œª p : ‚Ñù √ó ‚Ñù, (fderiv! ‚Ñù (Œª p : ‚Ñù √ó ‚Ñù, f p.1 p.2) p).fst) (x, y)).fst + y^2 * (fderiv! ‚Ñù (Œª p : ‚Ñù √ó ‚Ñù, (fderiv! ‚Ñù (Œª p : ‚Ñù √ó ‚Ñù, f p.1 p.2) p).snd) (x, y)).snd = x * y) :
  m f = (1 / 2 : ‚Ñù) + log 4 :=
sorry

end min_value_of_m_l101_101158


namespace geometric_seq_sum_l101_101066

theorem geometric_seq_sum (a : ‚Ñù) (q : ‚Ñù) (ha : a ‚â† 0) (hq : q ‚â† 1) 
    (hS4 : a * (1 - q^4) / (1 - q) = 1) 
    (hS12 : a * (1 - q^12) / (1 - q) = 13) 
    : a * q^12 * (1 + q + q^2 + q^3) = 27 := 
by
  sorry

end geometric_seq_sum_l101_101066


namespace plane_speed_in_still_air_l101_101821

theorem plane_speed_in_still_air (P W : ‚Ñù) 
  (h1 : (P + W) * 3 = 900) 
  (h2 : (P - W) * 4 = 900) 
  : P = 262.5 :=
by
  sorry

end plane_speed_in_still_air_l101_101821


namespace relationship_between_a_b_c_l101_101111

noncomputable def a := 33
noncomputable def b := 5 * 6^1 + 2 * 6^0
noncomputable def c := 1 * 2^4 + 1 * 2^3 + 1 * 2^2 + 1 * 2^1 + 1 * 2^0

theorem relationship_between_a_b_c : a > b ‚àß b > c := by
  sorry

end relationship_between_a_b_c_l101_101111


namespace opposite_face_is_D_l101_101424

-- Define the six faces
inductive Face
| A | B | C | D | E | F

open Face

-- Define the adjacency relation
def is_adjacent (x y : Face) : Prop :=
(y = B ‚àß x = A) ‚à® (y = F ‚àß x = A) ‚à® (y = C ‚àß x = A) ‚à® (y = E ‚àß x = A)

-- Define the problem statement in Lean
theorem opposite_face_is_D : 
  (‚àÄ (x : Face), is_adjacent A x ‚Üî x = B ‚à® x = F ‚à® x = C ‚à® x = E) ‚Üí
  (¬¨ (is_adjacent A D)) ‚Üí
  True :=
by
  intro adj_relation non_adj_relation
  sorry

end opposite_face_is_D_l101_101424


namespace average_selling_price_is_86_l101_101819

def selling_prices := [82, 86, 90, 85, 87, 85, 86, 82, 90, 87, 85, 86, 82, 86, 87, 90]

def average (prices : List Nat) : Nat :=
  (prices.sum) / prices.length

theorem average_selling_price_is_86 :
  average selling_prices = 86 :=
by
  sorry

end average_selling_price_is_86_l101_101819


namespace perpendicular_line_equation_l101_101493

theorem perpendicular_line_equation :
‚àÉ (m b : ‚Ñù), (‚àÄ x y : ‚Ñù, y = x^3 - 1 ‚Üí y = m * x + b) ‚àß
    m = -1/3 ‚àß b = 1/3 :=
begin
  existsi (-1/3 : ‚Ñù),
  existsi (1/3 : ‚Ñù),
  split,
  { intros x y h,
    have h_deriv : deriv (Œª x, x^3 - 1) = Œª x, 3 * x^2,
    { sorry, },
    have tangent_slope : deriv (Œª x, x^3 - 1) 1 = 3,
    { sorry, },
    have perpendicular_slope : -1 / 3,
    { sorry, },
    rw [perpendicular_slope],
    exact (Œª x, x * (-1 / 3) + 1 / 3) },
  split; refl
end

end perpendicular_line_equation_l101_101493


namespace num_not_factorial_tails_lt_2500_l101_101472

-- Definition of the function f(m)
def f (m : ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625 + m / 78125 + m / 390625 + m / 1953125

-- The theorem stating the main result
theorem num_not_factorial_tails_lt_2500 : 
  let count_non_tails := ‚àë k in finset.range 2500, if ‚àÄ m, f m ‚â† k then 1 else 0
  in count_non_tails = 500 :=
by
  sorry

end num_not_factorial_tails_lt_2500_l101_101472


namespace not_factorial_tails_count_l101_101455

def f (m : ‚Ñï) : ‚Ñï :=
  (m / 5) + (m / 25) + (m / 125) + (m / 625) + (m / 3125) + (m / 15625) -- you can extend further if needed

def is_factorial_tail (n : ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, m > 0 ‚àß f(m) = n

theorem not_factorial_tails_count : 
  ‚àÉ c : ‚Ñï, c = 500 ‚àß ‚àÄ k : ‚Ñï, k < 2500 ‚Üí ¬¨is_factorial_tail k ‚Üí k < 2500 - c :=
by
  sorry

end not_factorial_tails_count_l101_101455


namespace inhabitants_count_smallest_largest_square_average_area_l101_101590

-- Definitions based on the conditions
def is_squareland_square (s : ‚Ñï) : Prop :=
  s % 2 = 0

def has_friends (s : ‚Ñï) : Prop :=
  ‚àÉ f1 f2, is_squareland_square s ‚àß is_squareland_square f1 ‚àß is_squareland_square f2 ‚àß 4 * f1 = 4 * s - 8 ‚àß 4 * f2 = 4 * s + 8

def avg_side_length (a : ‚Ñï) (t : ‚Ñï) : Prop :=
  2 * a + 2 * t = 30

def unique_dimensions (squares : list ‚Ñï) : Prop :=
  ‚àÄ x ‚àà squares, ‚àÄ y ‚àà squares, x ‚â† y ‚Üí x ‚â† y

def smallest_largest_relation (a : ‚Ñï) (t : ‚Ñï) : Prop :=
  4 * a = a + 2 * t

-- Questions translated to be proven given the conditions
theorem inhabitants_count : ‚àÄ squares : list ‚Ñï,
  unique_dimensions squares ‚Üí
  (‚àÄ s ‚àà squares, has_friends s) ‚Üí
  avg_side_length 6 9 ‚Üí
  smallest_largest_relation 6 9 ‚Üí
  squares.length = 10 :=
sorry

theorem smallest_largest_square : 
  unique_dimensions [6, 8, 10, 12, 14, 16, 18, 20, 22, 24] ‚Üí
  (‚àÄ s ‚àà [6, 8, 10, 12, 14, 16, 18, 20, 22, 24], has_friends s) ‚Üí
  avg_side_length 6 9 ‚Üí
  smallest_largest_relation 6 9 ‚Üí
  ([6, 24]) =
    [6, 24] :=
sorry

theorem average_area :
  (‚àë x in [6, 8, 10, 12, 14, 16, 18, 20, 22, 24], x * x) / 10 = 258 :=
sorry

end inhabitants_count_smallest_largest_square_average_area_l101_101590


namespace range_of_a_for_cos_equation_l101_101873

theorem range_of_a_for_cos_equation : 
  (‚àÉ x : ‚Ñù, cos x ^ 2 - 2 * cos x - a = 0) ‚Üî -1 ‚â§ a ‚àß a ‚â§ 3 :=
sorry

end range_of_a_for_cos_equation_l101_101873


namespace reciprocal_of_neg_5_4_l101_101306

theorem reciprocal_of_neg_5_4 : (‚Åª¬π : ‚Ñö ‚Üí ‚Ñö) (-5 / 4) = -4 / 5 :=
by
  sorry

end reciprocal_of_neg_5_4_l101_101306


namespace num_not_factorial_tails_lt_2500_l101_101468

-- Definition of the function f(m)
def f (m : ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625 + m / 78125 + m / 390625 + m / 1953125

-- The theorem stating the main result
theorem num_not_factorial_tails_lt_2500 : 
  let count_non_tails := ‚àë k in finset.range 2500, if ‚àÄ m, f m ‚â† k then 1 else 0
  in count_non_tails = 500 :=
by
  sorry

end num_not_factorial_tails_lt_2500_l101_101468


namespace scientific_notation_of_1040000000_l101_101422

theorem scientific_notation_of_1040000000 : (1.04 * 10^9 = 1040000000) :=
by
  -- Math proof steps can be added here
  sorry

end scientific_notation_of_1040000000_l101_101422


namespace investment_final_amount_l101_101401

-- Define the given constants:
def P : ‚Ñù := 10000
def r : ‚Ñù := 0.045
def n : ‚Ñù := 12
def t : ‚Ñù := 3

-- Define the compound interest formula
def compoundInterest (P r n t : ‚Ñù) : ‚Ñù :=
  P * (1 + r / n) ^ (n * t)

-- State the theorem
theorem investment_final_amount : compoundInterest P r n t = 11446 := by
  sorry

end investment_final_amount_l101_101401


namespace percentage_decrease_is_24_l101_101711

-- Define the given constants Rs. 820 and Rs. 1078.95
def current_price : ‚Ñù := 820
def original_price : ‚Ñù := 1078.95

-- Define the percentage decrease P
def percentage_decrease (P : ‚Ñù) : Prop :=
  original_price - (P / 100) * original_price = current_price

-- Prove that percentage decrease P is approximately 24
theorem percentage_decrease_is_24 : percentage_decrease 24 :=
by
  unfold percentage_decrease
  sorry

end percentage_decrease_is_24_l101_101711


namespace correct_calculation_l101_101130

theorem correct_calculation :
  (- (4 + 2 / 3) - (1 + 5 / 6) - (- (18 + 1 / 2)) + (- (13 + 3 / 4))) = - (7 / 4) :=
by 
  sorry

end correct_calculation_l101_101130


namespace inversely_varied_x3_sqrtx_l101_101213

theorem inversely_varied_x3_sqrtx (k : ‚Ñù) (h : ‚àÄ x : ‚Ñù, (x^3) * (Real.sqrt x) = k) :
  (h 4) = 128 ‚Üí (h 64) = 128 ‚Üí y = (1 : ‚Ñù) / 16384 :=
by
  sorry

end inversely_varied_x3_sqrtx_l101_101213


namespace chess_tournament_l101_101993

theorem chess_tournament (n g : ‚Ñï) 
  (hn : n = 50) 
  (hg : g = 61) 
  (h2or3 : ‚àÄ k, k < 50 ‚Üí (players_game k = 2 ‚à® players_game k = 3)) :
  ¬¨ (‚àÉ (x : ‚Ñï), (x ‚â§ 50) ‚àß (3 * x + 2 * (50 - x) = 2 * g) ‚àß
      (‚àÄ i j, ((i < 50 ‚àß j < 50 ‚àß players_game i = 3 ‚àß players_game j = 3) ‚Üí (i ‚â† j ‚Üí ¬¨ (played_each_other i j))))) :=
begin
  sorry
end

end chess_tournament_l101_101993


namespace non_factorial_tails_lt_2500_l101_101435

-- Define the function f(m)
def f (m: ‚Ñï) : ‚Ñï :=
  m / 5 + m / 25 + m / 125 + m / 625 + m / 3125 + m / 15625

-- Define what it means to be a factorial tail
def is_factorial_tail (n: ‚Ñï) : Prop :=
  ‚àÉ m : ‚Ñï, f(m) = n

-- Define the statement to be proved
theorem non_factorial_tails_lt_2500 : 
  (finset.range 2500).filter (Œª n, ¬¨ is_factorial_tail n).card = 499 :=
by
  sorry

end non_factorial_tails_lt_2500_l101_101435


namespace sum_of_interior_angles_6_find_n_from_300_degrees_l101_101049

-- Definitions and statement for part 1:
def sum_of_interior_angles (n : ‚Ñï) : ‚Ñï :=
  (n - 2) * 180

theorem sum_of_interior_angles_6 :
  sum_of_interior_angles 6 = 720 := 
by
  sorry

-- Definitions and statement for part 2:
def find_n_from_angles (angle : ‚Ñï) : ‚Ñï := 
  (angle / 180) + 2

theorem find_n_from_300_degrees :
  find_n_from_angles 900 = 7 :=
by
  sorry

end sum_of_interior_angles_6_find_n_from_300_degrees_l101_101049


namespace bottle_caps_remaining_l101_101675

-- Define the problem using the conditions and the desired proof.
theorem bottle_caps_remaining (original_count removed_count remaining_count : ‚Ñï) 
    (h_original : original_count = 87) 
    (h_removed : removed_count = 47)
    (h_remaining : remaining_count = original_count - removed_count) :
    remaining_count = 40 :=
by 
  rw [h_original, h_removed] at h_remaining 
  exact h_remaining

end bottle_caps_remaining_l101_101675


namespace distance_swim_downstream_correct_l101_101373

def speed_man_still_water : ‚Ñù := 7
def time_taken : ‚Ñù := 5
def distance_upstream : ‚Ñù := 25

lemma distance_swim_downstream (V_m : ‚Ñù) (t : ‚Ñù) (d_up : ‚Ñù) : 
  t * ((V_m + (V_m - d_up / t)) / 2) = 45 :=
by
  have h_speed_upstream : (V_m - (d_up / t)) = d_up / t := by sorry
  have h_speed_stream : (d_up / t) = (V_m - (d_up / t)) := by sorry
  have h_distance_downstream : t * ((V_m + (V_m - (d_up / t)) / 2)) = t * (V_m + (V_m - (V_m - d_up / t))) := by sorry
  sorry

noncomputable def distance_swim_downstream_value : ‚Ñù :=
  9 * 5

theorem distance_swim_downstream_correct :
  distance_swim_downstream_value = 45 :=
by
  sorry

end distance_swim_downstream_correct_l101_101373


namespace area_of_triangle_AEB_l101_101611

noncomputable theory

open_locale classical

variables {AB BC DF GC : ‚Ñù}
variables (A B C D E F G : Type*)

-- Define the properties of points
variables [is_rectangular A B C D]
variables [line_through A F E]
variables [line_through B G E]

def AB_length : AB = 8 := by sorry
def BC_length : BC = 4 := by sorry
def DF_length : DF = 2 := by sorry
def GC_length : GC = 3 := by sorry

theorem area_of_triangle_AEB : area (triangle A E B) = 128/5 :=
by
  sorry

end area_of_triangle_AEB_l101_101611


namespace triathlon_bike_speed_l101_101185

theorem triathlon_bike_speed :
  let t_swim := (1 / 8 : ‚Ñù) / 1,
      t_run := (2 : ‚Ñù) / 8,
      t_total := t_swim + t_run,
      t_goal := 1.5,
      t_bike := t_goal - t_total,
      d_bike := 8,
      v_bike := d_bike / t_bike
  in v_bike = (64 / 9 : ‚Ñù) :=
by sorry

end triathlon_bike_speed_l101_101185


namespace solve_for_n_l101_101682

theorem solve_for_n (n : ‚Ñù) (h : (n - 5)^3 = (1 / 9)^(-1)) : n = 5 + 3^(2 / 3) :=
by 
  sorry

end solve_for_n_l101_101682


namespace sum_of_sequence_equals_l101_101474

noncomputable def y : ‚Ñï ‚Üí ‚Ñï
| 0     := 0
| 1     := 217
| (n+2) := y (n+1) * y (n+1) - y (n+1)

noncomputable def sum_sequence (n : ‚Ñï) : ‚Ñù :=
‚àë i in Finset.range n, (1 / (y (i + 1) - 1 : ‚Ñù))

theorem sum_of_sequence_equals :
  (‚àë' n : ‚Ñï, 1 / (y (n + 1) - 1 : ‚Ñù)) = 1 / 216 :=
by sorry

end sum_of_sequence_equals_l101_101474


namespace tony_exercise_time_l101_101292

noncomputable def time_walking (distance walk_speed : ‚Ñù) : ‚Ñù := distance / walk_speed
noncomputable def time_running (distance run_speed : ‚Ñù) : ‚Ñù := distance / run_speed
noncomputable def time_swimming (distance swim_speed : ‚Ñù) : ‚Ñù := distance / swim_speed
noncomputable def total_time_per_day (walk_time run_time swim_time : ‚Ñù) : ‚Ñù := walk_time + run_time + swim_time
noncomputable def total_time_per_week (daily_time : ‚Ñù) := daily_time * 7

theorem tony_exercise_time :
  let walk_distance := 5
  let walk_speed := 2.5
  let run_distance := 15
  let run_speed := 4.5
  let swim_distance := 1.5
  let swim_speed := 1
  let day_time := total_time_per_day 
                   (time_walking walk_distance walk_speed)
                   (time_running run_distance run_speed)
                   (time_swimming swim_distance swim_speed)
  in total_time_per_week day_time = 47.8333 :=
by
  sorry

end tony_exercise_time_l101_101292


namespace greatest_divisor_6215_7373_l101_101338

theorem greatest_divisor_6215_7373 : 
  Nat.gcd (6215 - 23) (7373 - 29) = 144 := by
  sorry

end greatest_divisor_6215_7373_l101_101338


namespace functional_equation_solution_l101_101867

theorem functional_equation_solution :
  ‚àÄ f : ‚Ñù ‚Üí ‚Ñù, (‚àÄ x y : ‚Ñù, f(2 * x + f(y)) = x + y + f(x)) ‚Üí (‚àÄ x : ‚Ñù, f(x) = x) :=
by
  intros f H
  sorry

end functional_equation_solution_l101_101867


namespace original_five_digit_number_l101_101809

theorem original_five_digit_number :
  ‚àÉ N y x : ‚Ñï, (N = 10 * y + x) ‚àß (N + y = 54321) ‚àß (N = 49383) :=
by
  -- The proof script goes here
  sorry

end original_five_digit_number_l101_101809


namespace range_of_y_l101_101060

theorem range_of_y (m n k y : ‚Ñù)
  (h‚ÇÅ : 0 ‚â§ m)
  (h‚ÇÇ : 0 ‚â§ n)
  (h‚ÇÉ : 0 ‚â§ k)
  (h‚ÇÑ : m - k + 1 = 1)
  (h‚ÇÖ : 2 * k + n = 1)
  (h‚ÇÜ : y = 2 * k^2 - 8 * k + 6)
  : 5 / 2 ‚â§ y ‚àß y ‚â§ 6 :=
by
  sorry

end range_of_y_l101_101060


namespace problem1_l101_101349

theorem problem1 : 
  (5 + 1/16)^0.5 - 2 * (2 + 10/27)^(-2/3) - 2 * (Real.sqrt(2 + Real.pi))^0 / (3 / 4)^(-2) = 0 :=
by
  sorry

end problem1_l101_101349


namespace arithmetic_sequence_sum_Tn_l101_101997

-- Definitions and Conditions
def point_on_parabola (n : ‚Ñï) : Prop := ‚àÄ (P : ‚Ñï ‚Üí ‚Ñù √ó ‚Ñù), 
  (‚àÉ x : ‚Ñù, x ‚â• 0 ‚àß P n = (x, x^2)) 

def circle_tangent_xaxis (P : ‚Ñù √ó ‚Ñù) : Prop := 
  P.2 = (P.1)^2

def circles_tangent (P Q : ‚Ñù √ó ‚Ñù) : Prop :=
  ‚àÉ R Q', (circle_tangent_xaxis P) ‚àß (circle_tangent_xaxis Q) ‚àß 
          (R = P.2) ‚àß (Q'.2 = Q.2) ‚àß 
          ((P.1 - Q.1)^2 + (P.2 - Q.2)^2 = (R + Q'.2)^2)

def decreasing_sequence (P : ‚Ñï ‚Üí ‚Ñù √ó ‚Ñù) : Prop :=
  ‚àÄ n, (P (n+1)).1 < (P n).1

-- Convert conditions into functions
def conditions (n : ‚Ñï) : Prop :=
  (‚àÉ P : ‚Ñï ‚Üí ‚Ñù √ó ‚Ñù, point_on_parabola n ‚àß 
     decreasing_sequence P ‚àß circles_tangent (P n) (P (n+1)) ‚àß 
     ((P 1).1 = 1)) 

-- Statement 1 : Arithmetic Sequence
theorem arithmetic_sequence (n : ‚Ñï) (P : ‚Ñï ‚Üí ‚Ñù √ó ‚Ñù) 
  (h_conditions : conditions n) :
  ‚àÉ d : ‚Ñù, ‚àÄ m, P m.1 ‚â† 0 ‚Üí (1 / (P (m+1)).1 - 1 / (P m).1) = d :=
by sorry

-- Statement 2 : T_n < 3 * sqrt(pi) / 2
noncomputable def Sn (P : ‚Ñï ‚Üí ‚Ñù √ó ‚Ñù) (n : ‚Ñï) := 
  œÄ * ((P n).1)^4

noncomputable def Tn (P : ‚Ñï ‚Üí ‚Ñù √ó ‚Ñù) (n : ‚Ñï) := 
  ‚àë k in (range (n+1)), real.sqrt (Sn P k)

theorem sum_Tn (n : ‚Ñï) (P : ‚Ñï ‚Üí ‚Ñù √ó ‚Ñù) 
  (h_conditions : conditions n) :
  Tn P n < 3 * real.sqrt œÄ / 2 :=
by sorry

end arithmetic_sequence_sum_Tn_l101_101997


namespace a_even_is_square_l101_101820

noncomputable def a : ‚Ñï ‚Üí ‚Ñï
| 1     := 1
| 2     := 1
| 3     := 2
| 4     := 4
| (n+1) := if n ‚â• 4 then a n + a (n - 2) + a (n - 3) else a n -- Simplified condition

theorem a_even_is_square (n : ‚Ñï) (h : n ‚â• 1) : ‚àÉ k : ‚Ñï, a (2 * n) = k * k :=
sorry -- Proof goes here

end a_even_is_square_l101_101820


namespace train_pass_time_l101_101831

/-
Given a train of length 110 meters, a train speed of 30 km/h, and a man running at 3 km/h in the opposite direction,
prove that the train will pass the man in approximately 12 seconds.
-/
theorem train_pass_time (l v_train v_man : ‚Ñï) (h_l : l = 110) (h_vtrain : v_train = 30) (h_vman : v_man = 3) : 
  (110 / (33 * 1000 / 3600 : ‚Ñù) ‚âà 12) :=
by {
  sorry
}

end train_pass_time_l101_101831


namespace find_m_l101_101999

noncomputable def parametric_x (t m : ‚Ñù) := (‚àö3/2) * t + m
noncomputable def parametric_y (t : ‚Ñù) := (1/2) * t

noncomputable def circle_eq (x y : ‚Ñù) := (x - 2)^2 + y^2 = 4

noncomputable def line_eq (x y m : ‚Ñù) := x - ‚àö3 * y - m = 0

def is_tangent (m : ‚Ñù) : Prop :=
  let dist := abs ((2 - m) / (Real.sqrt ((‚àö3/2)^2 + (1/2)^2))) in
  dist = 2

theorem find_m (m: ‚Ñù) (t : ‚Ñù):
  (‚àÄ t, line_eq (parametric_x t m) (parametric_y t) m) ‚Üí
  (circle_eq (parametric_x t m) (parametric_y t)) ‚Üí
  is_tangent m :=
sorry

end find_m_l101_101999
