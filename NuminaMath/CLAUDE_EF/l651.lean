import Mathlib

namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_g_is_even_l651_65192

noncomputable def g (x : ‚Ñù) : ‚Ñù := 4 / (3 * x^8 - 7)

theorem g_is_even : ‚àÄ x : ‚Ñù, g (-x) = g x := by
  intro x
  unfold g
  -- The proof steps would go here, but we'll use sorry for now
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_g_is_even_l651_65192


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_smallest_angle_grey_triangle_l651_65153

/-- Represents a rectangle with length and width -/
structure Rectangle where
  length : ‚Ñù
  width : ‚Ñù

/-- Represents a triangle with three sides -/
structure Triangle where
  side1 : ‚Ñù
  side2 : ‚Ñù
  side3 : ‚Ñù

/-- Checks if a triangle is right-angled -/
def Triangle.is_right_triangle (t : Triangle) : Prop :=
  t.side1^2 + t.side2^2 = t.side3^2 ‚à® t.side1^2 + t.side3^2 = t.side2^2 ‚à® t.side2^2 + t.side3^2 = t.side1^2

/-- Checks if a triangle is isosceles -/
def Triangle.is_isosceles (t : Triangle) : Prop :=
  t.side1 = t.side2 ‚à® t.side1 = t.side3 ‚à® t.side2 = t.side3

/-- Calculates the smallest angle of a triangle in radians -/
noncomputable def Triangle.smallest_angle (t : Triangle) : ‚Ñù :=
  Real.arccos ((t.side2^2 + t.side3^2 - t.side1^2) / (2 * t.side2 * t.side3))

theorem smallest_angle_grey_triangle : 
  ‚àÄ (square : Rectangle) (white_triangle : Triangle) (grey_triangle : Triangle),
    -- The square has side length 2
    square.length = 2 ‚àß square.width = 2 ‚Üí
    -- The white triangle is isosceles and right-angled with leg length 1
    white_triangle.is_right_triangle ‚àß 
    white_triangle.is_isosceles ‚àß
    white_triangle.side1 = 1 ‚Üí
    -- The grey triangle is formed between two adjacent white triangles
    grey_triangle.is_right_triangle ‚àß
    grey_triangle.side3 = 2 ‚àß
    grey_triangle.side1 = 1 ‚Üí
    -- The smallest angle in the grey triangle is 15 degrees
    grey_triangle.smallest_angle = 15 * œÄ / 180 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_smallest_angle_grey_triangle_l651_65153


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_cosine_alpha_when_OP_minimized_l651_65102

noncomputable def P (t : ‚Ñù) : ‚Ñù √ó ‚Ñù := (t/2 + 2/t, 1)

theorem cosine_alpha_when_OP_minimized :
  ‚àÄ t : ‚Ñù, t < 0 ‚Üí
  let p := P t
  let magnitude := Real.sqrt ((p.1)^2 + (p.2)^2)
  (‚àÄ s : ‚Ñù, s < 0 ‚Üí Real.sqrt ((P s).1^2 + (P s).2^2) ‚â• magnitude) ‚Üí
  magnitude = Real.sqrt 5 ‚àß p.1 / magnitude = -2 / Real.sqrt 5 := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_cosine_alpha_when_OP_minimized_l651_65102


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_overlap_area_ratio_l651_65134

/-- A regular hexagon -/
structure RegularHexagon where
  side_length : ‚Ñù
  side_length_pos : 0 < side_length

/-- The overlap region between two triangles in a regular hexagon -/
def overlap (h : RegularHexagon) : Set (Fin 2 ‚Üí ‚Ñù) :=
  sorry

/-- The area of a regular hexagon -/
noncomputable def area_hexagon (h : RegularHexagon) : ‚Ñù :=
  3 * Real.sqrt 3 / 2 * h.side_length ^ 2

/-- The area of the overlap region -/
noncomputable def area_overlap (h : RegularHexagon) : ‚Ñù :=
  sorry

/-- Theorem: The ratio of the overlap area to the hexagon area is 1/3 -/
theorem overlap_area_ratio (h : RegularHexagon) :
  area_overlap h / area_hexagon h = 1 / 3 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_overlap_area_ratio_l651_65134


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_triangle_abc_properties_l651_65144

/-- Given a triangle ABC with the following properties:
  AC = 6, cos B = 4/5, C = œÄ/4
  Prove the length of AB and the value of cos(A - œÄ/6) -/
theorem triangle_abc_properties (A B C : ‚Ñù) (AC AB : ‚Ñù) :
  AC = 6 ‚Üí
  Real.cos B = 4/5 ‚Üí
  C = œÄ/4 ‚Üí
  (0 < A) ‚àß (A < œÄ) ‚Üí
  (0 < B) ‚àß (B < œÄ) ‚Üí
  A + B + C = œÄ ‚Üí
  AB = 5 * Real.sqrt 2 ‚àß
  Real.cos (A - œÄ/6) = (7 * Real.sqrt 2 - 3 * Real.sqrt 6) / 20 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_triangle_abc_properties_l651_65144


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_hyperbola_ellipse_right_triangle_l651_65150

/-- Given a hyperbola and an ellipse with eccentricities whose product is 1,
    prove that the triangle formed by their parameters is a right triangle. -/
theorem hyperbola_ellipse_right_triangle
  (a b m : ‚Ñù)
  (hm : m > b)
  (hb : b > 0)
  (hyperbola : ‚àÄ (x y : ‚Ñù), x^2 / a^2 - y^2 / b^2 = 1)
  (ellipse : ‚àÄ (x y : ‚Ñù), x^2 / m^2 + y^2 / b^2 = 1)
  (eccentricity_product : (Real.sqrt (a^2 + b^2) / a) * (Real.sqrt (m^2 - b^2) / m) = 1) :
  a^2 + b^2 = m^2 :=
by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_hyperbola_ellipse_right_triangle_l651_65150


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_square_root_of_sqrt_36_l651_65136

theorem square_root_of_sqrt_36 : ‚àÄ x : ‚Ñù, x^2 = 36 ‚Üí x = 6 ‚à® x = -6 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_square_root_of_sqrt_36_l651_65136


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_curve_and_area_properties_l651_65149

/-- A curve C in the plane -/
structure Curve where
  -- The predicate that defines the curve
  contains : ‚Ñù √ó ‚Ñù ‚Üí Prop

/-- The distance between two points in the plane -/
noncomputable def distance (p q : ‚Ñù √ó ‚Ñù) : ‚Ñù :=
  Real.sqrt ((p.1 - q.1)^2 + (p.2 - q.2)^2)

/-- The distance from a point to a vertical line -/
def distanceToVerticalLine (p : ‚Ñù √ó ‚Ñù) (x : ‚Ñù) : ‚Ñù :=
  |p.1 - x|

/-- The curve C defined by the problem conditions -/
def curveC : Curve where
  contains := fun p => distance p (2, 0) + 2 = distanceToVerticalLine p (-4)

/-- The theorem stating the properties of the curve and the minimum area -/
theorem curve_and_area_properties (a : ‚Ñù) (h : a > 0) :
  -- The equation of curve C is y^2 = 8x
  (‚àÄ p, curveC.contains p ‚Üî p.2^2 = 8 * p.1) ‚àß
  -- The minimum area of triangle AOB is 2a‚àö(2a)
  (‚àÉ minArea : ‚Ñù, minArea = 2 * a * Real.sqrt (2 * a) ‚àß
    ‚àÄ A B : ‚Ñù √ó ‚Ñù, curveC.contains A ‚Üí curveC.contains B ‚Üí
      (‚àÉ m : ‚Ñù, A.1 = m * A.2 + a ‚àß B.1 = m * B.2 + a) ‚Üí
      minArea ‚â§ (1/2) * a * |A.2 - B.2|) :=
by sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_curve_and_area_properties_l651_65149


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_combined_transform_correct_l651_65190

def scale_matrix (sx sy : ‚Ñù) : Matrix (Fin 2) (Fin 2) ‚Ñù := 
  !![sx, 0; 0, sy]

noncomputable def rotation_matrix (Œ∏ : ‚Ñù) : Matrix (Fin 2) (Fin 2) ‚Ñù := 
  !![Real.cos Œ∏, -Real.sin Œ∏; Real.sin Œ∏, Real.cos Œ∏]

noncomputable def combined_transform (sx sy Œ∏ : ‚Ñù) : Matrix (Fin 2) (Fin 2) ‚Ñù :=
  (rotation_matrix Œ∏) * (scale_matrix sx sy)

theorem combined_transform_correct : 
  combined_transform (-3) 2 (œÄ/4) = !![(-3/Real.sqrt 2), (-2/Real.sqrt 2); (3/Real.sqrt 2), (2/Real.sqrt 2)] := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_combined_transform_correct_l651_65190


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_min_area_triangle_in_dodecagon_l651_65108

noncomputable section

-- Definitions for the theorem
def ConvexHull (ùïú : Type*) [NormedAddCommGroup ùïú] [NormedSpace ‚Ñù ùïú] (S : Set ùïú) : Set ùïú := sorry

def ConsecutiveVertices (P : Set ‚ÑÇ) (A B C : ‚ÑÇ) : Prop := sorry

def AreaTriangle (A B C : ‚ÑÇ) : ‚Ñù := sorry

theorem min_area_triangle_in_dodecagon : ‚àÉ (z : ‚ÑÇ), 
  (z - 5) ^ 12 = 144 ‚Üí
  let vertices := {w : ‚ÑÇ | (w - 5) ^ 12 = 144}
  let dodecagon := ConvexHull ‚ÑÇ vertices
  ‚àÉ (D E F : ‚ÑÇ), D ‚àà vertices ‚àß E ‚àà vertices ‚àß F ‚àà vertices ‚àß
    ConsecutiveVertices dodecagon D E F ‚àß
    AreaTriangle D E F = 
      (12 * Real.sin (Real.pi / 12) ^ 2 * Real.sin (Real.pi / 6)) / 2 ‚àß
    ‚àÄ (A B C : ‚ÑÇ), A ‚àà vertices ‚Üí B ‚àà vertices ‚Üí C ‚àà vertices ‚Üí
      ConsecutiveVertices dodecagon A B C ‚Üí
      AreaTriangle A B C ‚â• 
        (12 * Real.sin (Real.pi / 12) ^ 2 * Real.sin (Real.pi / 6)) / 2 :=
by sorry

end

end NUMINAMATH_CALUDE_ERRORFEEDBACK_min_area_triangle_in_dodecagon_l651_65108


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_main_theorem_l651_65188

-- Define points A, B, C in R^2
def A : Fin 2 ‚Üí ‚Ñù := ![1, 0]
def B : Fin 2 ‚Üí ‚Ñù := ![3, 0]
def C : Fin 2 ‚Üí ‚Ñù := ![-1, 4]

-- Define the condition for point P
def P_condition (P : Fin 2 ‚Üí ‚Ñù) : Prop :=
  (P 0 - A 0)^2 + (P 1 - A 1)^2 + (P 0 - B 0)^2 + (P 1 - B 1)^2 = 10

-- Define the locus of P
def P_locus (x y : ‚Ñù) : Prop :=
  (x - 2)^2 + y^2 = 4

-- Define the area of triangle PAB
noncomputable def area_PAB (P : Fin 2 ‚Üí ‚Ñù) : ‚Ñù :=
  abs ((P 0 - A 0) * (P 1 - B 1) - (P 1 - A 1) * (P 0 - B 0)) / 2

-- Define the distance between C and P
noncomputable def dist_CP (P : Fin 2 ‚Üí ‚Ñù) : ‚Ñù :=
  Real.sqrt ((P 0 - C 0)^2 + (P 1 - C 1)^2)

-- Main theorem
theorem main_theorem :
  (‚àÄ P, P_condition P ‚Üí P_locus (P 0) (P 1)) ‚àß
  (‚àÉ P, P_condition P ‚àß area_PAB P = 2 ‚àß ‚àÄ Q, P_condition Q ‚Üí area_PAB Q ‚â§ 2) ‚àß
  (‚àÉ P, P_condition P ‚àß dist_CP P = 3 ‚àß ‚àÄ Q, P_condition Q ‚Üí dist_CP Q ‚â• 3) ‚àß
  (‚àÄ m n : ‚Ñù, m > 0 ‚Üí n > 0 ‚Üí m + n = 3 ‚Üí 3/m + 1/n ‚â• (4 + 2 * Real.sqrt 3) / 3) := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_main_theorem_l651_65188


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_absolute_value_nested_expression_l651_65189

theorem absolute_value_nested_expression : 
  abs (abs (-(abs (-2 + 3))) - 2 + 2) = 5 := by sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_absolute_value_nested_expression_l651_65189


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_symmetric_function_proof_l651_65196

noncomputable def g (x : ‚Ñù) : ‚Ñù := Real.log (2 * x)

theorem symmetric_function_proof (f : ‚Ñù ‚Üí ‚Ñù) :
  (‚àÄ x y, f y = x ‚Üî g x = y) ‚Üí
  (‚àÄ x, f x = (1/2) * Real.exp x) :=
by sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_symmetric_function_proof_l651_65196


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_binomial_expansion_properties_l651_65169

noncomputable def binomial_expansion (x : ‚Ñù) := (x^(1/2) - 2/x^2)^8

noncomputable def max_binomial_coeff_term (x : ‚Ñù) := 1120/x^6

noncomputable def max_coeff_term (x : ‚Ñù) := 1792/x^11

noncomputable def min_coeff_term (x : ‚Ñù) := -1792/x^(17/2)

theorem binomial_expansion_properties (x : ‚Ñù) (hx : x > 0) :
  (‚àÉ (term : ‚Ñù ‚Üí ‚Ñù), term = max_binomial_coeff_term ‚àß 
    ‚àÄ (other_term : ‚Ñù ‚Üí ‚Ñù), other_term ‚â† term ‚Üí 
      ‚àÉ (k : ‚Ñï), binomial_expansion x = term x + other_term x + k) ‚àß
  (max_coeff_term x + min_coeff_term x = 
    1792/x^11 - 1792/x^(17/2)) :=
by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_binomial_expansion_properties_l651_65169


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_cosine_function_properties_l651_65167

noncomputable def f (œÜ : ‚Ñù) (x : ‚Ñù) := Real.cos (x + œÜ)

noncomputable def g (œÜ : ‚Ñù) (x : ‚Ñù) := f œÜ x + (deriv (f œÜ)) x

def is_even (h : ‚Ñù ‚Üí ‚Ñù) := ‚àÄ x, h x = h (-x)

theorem cosine_function_properties 
  (œÜ : ‚Ñù) 
  (h1 : -Real.pi < œÜ) 
  (h2 : œÜ < 0) 
  (h3 : is_even (g œÜ)) :
  œÜ = -Real.pi / 4 ‚àß 
  ‚àÉ (M : ‚Ñù), M = (Real.sqrt 2 + 1) / 2 ‚àß 
  (‚àÄ x ‚àà Set.Icc 0 (Real.pi / 4), (f œÜ x) * (g œÜ x) ‚â§ M) ‚àß
  ‚àÉ x ‚àà Set.Icc 0 (Real.pi / 4), (f œÜ x) * (g œÜ x) = M :=
by sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_cosine_function_properties_l651_65167


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_volume_removal_percentage_l651_65128

/-- Represents the dimensions of a rectangular box -/
structure BoxDimensions where
  length : ‚Ñù
  width : ‚Ñù
  height : ‚Ñù

/-- Represents the dimensions of a cube -/
structure CubeDimensions where
  side : ‚Ñù

/-- Calculates the volume of a rectangular box -/
noncomputable def boxVolume (b : BoxDimensions) : ‚Ñù :=
  b.length * b.width * b.height

/-- Calculates the volume of a cube -/
noncomputable def cubeVolume (c : CubeDimensions) : ‚Ñù :=
  c.side ^ 3

/-- Calculates the percentage of volume removed -/
noncomputable def percentageVolumeRemoved (box : BoxDimensions) (cube : CubeDimensions) (numCubesRemoved : ‚Ñï) : ‚Ñù :=
  (numCubesRemoved * cubeVolume cube / boxVolume box) * 100

theorem volume_removal_percentage :
  let box : BoxDimensions := ‚ü®24, 16, 12‚ü©
  let cube : CubeDimensions := ‚ü®2‚ü©
  let numCubesRemoved : ‚Ñï := 8
  ‚àÉ (Œµ : ‚Ñù), Œµ > 0 ‚àß abs (percentageVolumeRemoved box cube numCubesRemoved - 1.3889) < Œµ := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_volume_removal_percentage_l651_65128


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_train_speed_proof_l651_65160

/-- Calculates the speed of a train in km/hr given its length, the bridge length, and the time to cross the bridge. -/
noncomputable def train_speed (train_length bridge_length : ‚Ñù) (time_to_cross : ‚Ñù) : ‚Ñù :=
  let total_distance := train_length + bridge_length
  let speed_ms := total_distance / time_to_cross
  speed_ms * 3.6

/-- Theorem stating that a train of length 250 meters crossing a bridge of length 350 meters in 30 seconds has a speed of 72 km/hr. -/
theorem train_speed_proof :
  train_speed 250 350 30 = 72 := by
  -- Unfold the definition of train_speed
  unfold train_speed
  -- Simplify the expression
  simp
  -- The proof is completed with sorry for now
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_train_speed_proof_l651_65160


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_ellipse_triangle_perimeter_l651_65183

-- Define the ellipse
def ellipse (x y : ‚Ñù) : Prop := x^2/3 + y^2/2 = 1

-- Define the foci
def foci (F‚ÇÅ F‚ÇÇ : ‚Ñù √ó ‚Ñù) : Prop :=
  ‚àÉ c : ‚Ñù, c^2 = 1 ‚àß 
  ((F‚ÇÅ.1 = c ‚àß F‚ÇÅ.2 = 0) ‚à® (F‚ÇÅ.1 = -c ‚àß F‚ÇÅ.2 = 0)) ‚àß
  ((F‚ÇÇ.1 = c ‚àß F‚ÇÇ.2 = 0) ‚à® (F‚ÇÇ.1 = -c ‚àß F‚ÇÇ.2 = 0)) ‚àß
  F‚ÇÅ ‚â† F‚ÇÇ

-- Define collinearity
def collinear (A B C : ‚Ñù √ó ‚Ñù) : Prop :=
  (B.2 - A.2) * (C.1 - A.1) = (C.2 - A.2) * (B.1 - A.1)

-- Define the perimeter of a triangle
noncomputable def triangle_perimeter (A B C : ‚Ñù √ó ‚Ñù) : ‚Ñù :=
  Real.sqrt ((A.1 - B.1)^2 + (A.2 - B.2)^2) +
  Real.sqrt ((B.1 - C.1)^2 + (B.2 - C.2)^2) +
  Real.sqrt ((C.1 - A.1)^2 + (C.2 - A.2)^2)

-- Theorem statement
theorem ellipse_triangle_perimeter 
  (F‚ÇÅ F‚ÇÇ P Q : ‚Ñù √ó ‚Ñù) :
  foci F‚ÇÅ F‚ÇÇ ‚Üí
  ellipse P.1 P.2 ‚Üí
  ellipse Q.1 Q.2 ‚Üí
  collinear P Q F‚ÇÅ ‚Üí
  triangle_perimeter P Q F‚ÇÇ = 4 * Real.sqrt 3 := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_ellipse_triangle_perimeter_l651_65183


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_cone_radius_calculation_l651_65103

-- Define constants
noncomputable def curved_surface_area : ‚Ñù := 989.6016858807849
def slant_height : ‚Ñù := 15

-- Define the theorem
theorem cone_radius_calculation (Œµ : ‚Ñù) (h_Œµ : Œµ > 0) :
  ‚àÉ (r : ‚Ñù), abs (r - curved_surface_area / (Real.pi * slant_height)) < Œµ ‚àß abs (r - 21) < Œµ :=
by
  -- The proof is omitted for now
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_cone_radius_calculation_l651_65103


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_perpendicular_lines_l651_65119

-- Define the lines L‚ÇÅ and L‚ÇÇ
def L‚ÇÅ (a : ‚Ñù) : ‚Ñù ‚Üí ‚Ñù ‚Üí Prop := Œª x y ‚Ü¶ a * x + (1 - a) * y = 3
def L‚ÇÇ (a : ‚Ñù) : ‚Ñù ‚Üí ‚Ñù ‚Üí Prop := Œª x y ‚Ü¶ (a - 1) * x + (2 * a + 3) * y = 2

-- Define perpendicularity of two lines
def perpendicular (f g : ‚Ñù ‚Üí ‚Ñù ‚Üí Prop) : Prop :=
  ‚àÄ x‚ÇÅ y‚ÇÅ x‚ÇÇ y‚ÇÇ x‚ÇÉ y‚ÇÉ x‚ÇÑ y‚ÇÑ, 
    f x‚ÇÅ y‚ÇÅ ‚àß f x‚ÇÇ y‚ÇÇ ‚àß g x‚ÇÉ y‚ÇÉ ‚àß g x‚ÇÑ y‚ÇÑ ‚àß 
    x‚ÇÅ ‚â† x‚ÇÇ ‚àß x‚ÇÉ ‚â† x‚ÇÑ ‚Üí 
    (y‚ÇÇ - y‚ÇÅ) * (y‚ÇÑ - y‚ÇÉ) = -(x‚ÇÇ - x‚ÇÅ) * (x‚ÇÑ - x‚ÇÉ)

-- The main theorem
theorem perpendicular_lines (a : ‚Ñù) : 
  perpendicular (L‚ÇÅ a) (L‚ÇÇ a) ‚Üî a = 1 ‚à® a = -3 := by
  sorry

#check perpendicular_lines

end NUMINAMATH_CALUDE_ERRORFEEDBACK_perpendicular_lines_l651_65119


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_wife_account_percentage_l651_65159

def income : ‚Ñù := 1200000
def children_share : ‚Ñù := 0.2
def num_children : ‚Ñï := 3
def orphan_donation_rate : ‚Ñù := 0.05
def final_amount : ‚Ñù := 60000

theorem wife_account_percentage : 
  let remaining_after_children := income * (1 - children_share * num_children)
  let remaining_after_donation := remaining_after_children * (1 - orphan_donation_rate)
  let wife_deposit := remaining_after_donation - final_amount
  (wife_deposit / income) * 100 = 33 := by
  -- Proof steps would go here
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_wife_account_percentage_l651_65159


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_angle_relations_l651_65127

theorem angle_relations (Œ± Œ≤ : ‚Ñù) (h_acute_Œ± : 0 < Œ± ‚àß Œ± < Real.pi / 2) (h_acute_Œ≤ : 0 < Œ≤ ‚àß Œ≤ < Real.pi / 2)
  (h_cos_Œ± : Real.cos Œ± = 2 * Real.sqrt 5 / 5) (h_cos_Œ≤ : Real.cos Œ≤ = 3 * Real.sqrt 10 / 10) :
  Real.tan (Œ± - Œ≤) = 1 / 7 ‚àß Œ± + Œ≤ = Real.pi / 4 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_angle_relations_l651_65127


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_kids_premium_ticket_price_approx_total_cost_matches_l651_65111

/-- Represents the price of tickets and associated calculations for a group circus outing. -/
structure CircusTickets where
  adult_price : ‚Ñù
  num_adults : ‚Ñï := 4
  num_kids : ‚Ñï := 6
  family_discount : ‚Ñù := 0.1
  tax_rate : ‚Ñù := 0.05
  premium_charge : ‚Ñù := 2
  total_cost : ‚Ñù := 100

/-- Calculates the price of a kid's premium ticket based on the given conditions. -/
noncomputable def kids_premium_ticket_price (tickets : CircusTickets) : ‚Ñù :=
  let kid_price := tickets.adult_price / 2
  let adult_total := tickets.num_adults * tickets.adult_price * (1 - tickets.family_discount)
  let kid_total := tickets.num_kids * kid_price
  let subtotal := adult_total + kid_total
  let with_tax := subtotal * (1 + tickets.tax_rate)
  let total_with_premium := with_tax + (tickets.num_adults + tickets.num_kids) * tickets.premium_charge
  kid_price + tickets.premium_charge

/-- Theorem stating that the kid's premium ticket price is approximately $7.77. -/
theorem kids_premium_ticket_price_approx (tickets : CircusTickets) :
  ‚àÉ (Œµ : ‚Ñù), Œµ > 0 ‚àß Œµ < 0.01 ‚àß |kids_premium_ticket_price tickets - 7.77| < Œµ := by
  sorry

/-- Theorem stating that the calculated total cost matches the given total cost. -/
theorem total_cost_matches (tickets : CircusTickets) :
  let kid_price := tickets.adult_price / 2
  let adult_total := tickets.num_adults * tickets.adult_price * (1 - tickets.family_discount)
  let kid_total := tickets.num_kids * kid_price
  let subtotal := adult_total + kid_total
  let with_tax := subtotal * (1 + tickets.tax_rate)
  let total_with_premium := with_tax + (tickets.num_adults + tickets.num_kids) * tickets.premium_charge
  total_with_premium = tickets.total_cost := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_kids_premium_ticket_price_approx_total_cost_matches_l651_65111


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_initial_dimes_calculation_l651_65100

/-- The number of dimes Sam had initially -/
def initial_dimes : ‚Ñï := sorry

/-- The number of dimes Sam's dad gave him -/
def dimes_from_dad : ‚Ñï := 7

/-- The total number of dimes Sam has now -/
def total_dimes : ‚Ñï := 16

/-- Theorem stating that the initial number of dimes equals the total minus those from dad -/
theorem initial_dimes_calculation : initial_dimes = total_dimes - dimes_from_dad := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_initial_dimes_calculation_l651_65100


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_problem_solution_l651_65166

noncomputable def f (x : ‚Ñù) : ‚Ñù :=
  if x ‚â• 1 then Real.log x / Real.log 2 else -(Real.log x / Real.log 2)

theorem problem_solution (a b : ‚Ñù) (h1 : 0 < a) (h2 : a < b) (h3 : f a = f b) :
  (‚àÉ (min : ‚Ñù), ‚àÄ (x y : ‚Ñù), 0 < x ‚àß x < y ‚àß f x = f y ‚Üí 1/x + 4/y ‚â• min) ‚àß
  (‚àÉ (min : ‚Ñù), ‚àÄ (x y : ‚Ñù), 0 < x ‚àß x < y ‚àß f x = f y ‚Üí 1/x + 4/y ‚â• min ‚àß (1/a + 4/b = min)) ‚àß
  f (a + b) = 1 - 2 * (Real.log 2 / Real.log 2) :=
by sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_problem_solution_l651_65166


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_unique_solution_l651_65151

-- Define the equation
def equation (x : ‚Ñù) : Prop :=
  (((63 - 3*x) ^ (1/4 : ‚Ñù)) + ((27 + 3*x) ^ (1/4 : ‚Ñù))) = 5

-- State the theorem
theorem unique_solution :
  ‚àÉ! x : ‚Ñù, equation x ‚àß x = 5 :=
sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_unique_solution_l651_65151


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_cone_volume_from_surface_area_and_angle_l651_65158

noncomputable section

open Real

/-- The volume of a cone given its surface area and central angle of the lateral surface --/
theorem cone_volume_from_surface_area_and_angle 
  (S : ‚Ñù) (Œ∏ : ‚Ñù) (h_S : S = 15 * œÄ) (h_Œ∏ : Œ∏ = œÄ / 3) :
  ‚àÉ V : ‚Ñù, V = (25 * Real.sqrt 3) / 7 * œÄ := by
  -- Let r be the radius of the base and l be the slant height
  let r : ‚Ñù := Real.sqrt (15 / 7)
  let l : ‚Ñù := 6 * r

  have h1 : 2 * œÄ * r = Œ∏ * l := by sorry
  have h2 : S = œÄ * r^2 + œÄ * r * l := by sorry
  have h3 : l^2 = r^2 + (Real.sqrt 35 * r)^2 := by sorry

  -- Calculate the height h
  let h : ‚Ñù := Real.sqrt 35 * r

  -- Calculate the volume V
  let V : ‚Ñù := (1/3) * œÄ * r^2 * h

  -- Show that V equals the expected value
  have h_V : V = (25 * Real.sqrt 3) / 7 * œÄ := by sorry

  exact ‚ü®V, h_V‚ü©

end

end NUMINAMATH_CALUDE_ERRORFEEDBACK_cone_volume_from_surface_area_and_angle_l651_65158


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_exists_person_with_many_acquaintances_l651_65156

/-- Represents a person in the population -/
structure Person where
  id : Nat
  believes_in_santa : Bool
  acquaintances : Finset Nat

/-- The population of the country -/
def Population : Finset Nat := Finset.range 1000000

/-- Axiom: The total population is 1,000,000 -/
axiom total_population : Population.card = 1000000

/-- Axiom: Everyone knows at least one other person -/
axiom everyone_knows_someone (p : Nat) (h : p ‚àà Population) : 
  ‚àÉ q : Nat, q ‚àà Population ‚àß q ‚â† p ‚àß q ‚àà (Person.mk p false ‚àÖ).acquaintances

/-- Axiom: 90% of the population believes in Santa Claus -/
axiom believers_percentage : 
  (Population.filter (Œª p => (Person.mk p true ‚àÖ).believes_in_santa)).card = 900000

/-- Axiom: For each person, 10% of their acquaintances believe in Santa Claus -/
axiom acquaintance_believers_percentage (p : Nat) (h : p ‚àà Population) :
  let person := Person.mk p false ‚àÖ
  (person.acquaintances.filter (Œª a => (Person.mk a true ‚àÖ).believes_in_santa)).card = 
    (person.acquaintances.card / 10)

/-- Theorem: There exists a person who knows at least 810 people -/
theorem exists_person_with_many_acquaintances :
  ‚àÉ p : Nat, p ‚àà Population ‚àß (Person.mk p false ‚àÖ).acquaintances.card ‚â• 810 := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_exists_person_with_many_acquaintances_l651_65156


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_det_projection_matrix_zero_det_projection_matrix_3_5_zero_l651_65121

noncomputable def projection_matrix (v : ‚Ñù √ó ‚Ñù) : Matrix (Fin 2) (Fin 2) ‚Ñù :=
  let norm_v := Real.sqrt (v.1^2 + v.2^2)
  let a := v.1 / norm_v
  let b := v.2 / norm_v
  ![![a^2, a*b],
    ![a*b, b^2]]

theorem det_projection_matrix_zero (v : ‚Ñù √ó ‚Ñù) :
  Matrix.det (projection_matrix v) = 0 := by
  sorry

theorem det_projection_matrix_3_5_zero :
  Matrix.det (projection_matrix (3, 5)) = 0 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_det_projection_matrix_zero_det_projection_matrix_3_5_zero_l651_65121


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_weekly_allowance_proof_l651_65197

/-- The student's weekly allowance in dollars -/
def weekly_allowance : ‚Ñù := 3.75

theorem weekly_allowance_proof :
  ‚àÉ (a : ‚Ñù),
    a > 0 ‚àß
    let arcade_spent := (3/5) * a;
    let remaining_after_arcade := a - arcade_spent;
    let toy_store_spent := (1/3) * remaining_after_arcade;
    let remaining_after_toy_store := remaining_after_arcade - toy_store_spent;
    remaining_after_toy_store = 1 ‚àß
    a = weekly_allowance := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_weekly_allowance_proof_l651_65197


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_f_maximum_f_zero_points_l651_65157

-- Define the function f(x)
noncomputable def f (k : ‚Ñù) (x : ‚Ñù) : ‚Ñù := 3 * x^2 + 2 * (k - 1) * x + k + 5

-- Define the maximum value function
noncomputable def f_max (k : ‚Ñù) : ‚Ñù := if k < -7/2 then k + 5 else 7 * k + 26

-- Theorem for the maximum value of f(x) on [0, 3]
theorem f_maximum (k : ‚Ñù) : 
  ‚àÄ x ‚àà Set.Icc 0 3, f k x ‚â§ f_max k := by
  sorry

-- Theorem for the range of k when f(x) has zero points on [0, 3]
theorem f_zero_points (k : ‚Ñù) : 
  (‚àÉ x ‚àà Set.Icc 0 3, f k x = 0) ‚Üî k ‚àà Set.Icc (-5) (-2) := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_f_maximum_f_zero_points_l651_65157


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_friend_walking_distance_l651_65140

theorem friend_walking_distance (trail_length : ‚Ñù) (speed_ratio : ‚Ñù) 
  (h1 : trail_length = 33)
  (h2 : speed_ratio = 1.2) : 
  trail_length * speed_ratio / (1 + speed_ratio) = 18 :=
by
  -- Replace this with the actual proof steps
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_friend_walking_distance_l651_65140


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_f_composition_negative_two_equals_five_l651_65112

-- Define the function f
noncomputable def f (x : ‚Ñù) : ‚Ñù :=
  if x < 0 then (1/2)^x else x + 1

-- Theorem statement
theorem f_composition_negative_two_equals_five :
  f (f (-2)) = 5 := by
  -- Evaluate f(-2)
  have h1 : f (-2) = 4 := by
    rw [f]
    simp [Real.rpow_neg]
    norm_num
  
  -- Evaluate f(4)
  have h2 : f 4 = 5 := by
    rw [f]
    simp
    norm_num
  
  -- Combine the steps
  rw [h1, h2]


end NUMINAMATH_CALUDE_ERRORFEEDBACK_f_composition_negative_two_equals_five_l651_65112


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_race_minimum_distance_l651_65198

/-- A race with a wall and a river obstacle -/
theorem race_minimum_distance 
  (wall_length : ‚Ñù) 
  (a_to_b_vertical : ‚Ñù) 
  (a_to_river : ‚Ñù) 
  (river_width : ‚Ñù) 
  (h1 : wall_length = 1300)
  (h2 : a_to_b_vertical = 800)
  (h3 : a_to_river = 100)
  (h4 : river_width = 50) :
  ‚àÉ (min_distance : ‚Ñù), 
    abs (min_distance - 1570) < 1 ‚àß 
    (‚àÄ (path : ‚Ñù), 
      (path ‚â• a_to_river + river_width) ‚Üí 
      (path ‚â• min_distance)) :=
by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_race_minimum_distance_l651_65198


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_multiple_algorithms_exist_l651_65120

/-- Represents an algorithm --/
structure Algorithm where
  steps : List String
  is_finite : steps.length < œâ
  is_clear : ‚àÄ s ‚àà steps, s ‚â† ""  -- Simplified representation of clarity
  has_clear_output : String  -- Simplified representation of output

/-- Represents a problem that can be solved by algorithms --/
structure Problem where
  description : String

/-- Predicate to check if an algorithm solves a given problem --/
def SolvesProblem (a : Algorithm) (p : Problem) : Prop := sorry

/-- Theorem stating that multiple algorithms can exist for a single problem --/
theorem multiple_algorithms_exist (p : Problem) : 
  ‚àÉ a‚ÇÅ a‚ÇÇ : Algorithm, a‚ÇÅ ‚â† a‚ÇÇ ‚àß SolvesProblem a‚ÇÅ p ‚àß SolvesProblem a‚ÇÇ p := by
  sorry

#check multiple_algorithms_exist

end NUMINAMATH_CALUDE_ERRORFEEDBACK_multiple_algorithms_exist_l651_65120


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_y_value_proof_l651_65164

theorem y_value_proof (b y : ‚Ñù) (hb : b > 2) (hy : y > 0) 
  (heq : (3 * y) ^ (Real.log 3 / Real.log b) - (5 * y) ^ (Real.log 5 / Real.log b) = 0) : 
  y = 1 / 5 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_y_value_proof_l651_65164


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_pressure_volume_relation_helium_pressure_change_l651_65143

/-- Given a gas at constant temperature, prove that p‚ÇÅ * v‚ÇÅ = p‚ÇÇ * v‚ÇÇ -/
theorem pressure_volume_relation
  (p‚ÇÅ : ‚Ñù) (v‚ÇÅ : ‚Ñù) (p‚ÇÇ : ‚Ñù) (v‚ÇÇ : ‚Ñù)
  (h‚ÇÅ : p‚ÇÅ > 0) (h‚ÇÇ : v‚ÇÅ > 0) (h‚ÇÉ : v‚ÇÇ > 0)
  (h‚ÇÑ : p‚ÇÇ = p‚ÇÅ * v‚ÇÅ / v‚ÇÇ) :
  p‚ÇÅ * v‚ÇÅ = p‚ÇÇ * v‚ÇÇ :=
by sorry

/-- Given initial pressure and volume, and a new volume, calculate the new pressure -/
noncomputable def calculate_new_pressure (p‚ÇÅ v‚ÇÅ v‚ÇÇ : ‚Ñù) : ‚Ñù :=
  p‚ÇÅ * v‚ÇÅ / v‚ÇÇ

/-- Prove that for the given initial conditions and new volume, the new pressure is 4 kPa -/
theorem helium_pressure_change
  (p‚ÇÅ : ‚Ñù) (v‚ÇÅ : ‚Ñù) (v‚ÇÇ : ‚Ñù)
  (h‚ÇÅ : p‚ÇÅ = 8) (h‚ÇÇ : v‚ÇÅ = 3.5) (h‚ÇÉ : v‚ÇÇ = 7) :
  calculate_new_pressure p‚ÇÅ v‚ÇÅ v‚ÇÇ = 4 :=
by sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_pressure_volume_relation_helium_pressure_change_l651_65143


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_focus_asymptote_distance_is_2sqrt2_l651_65141

/-- Represents a hyperbola with equation (y^2 / 8) - (x^2 / b^2) = 1 -/
structure Hyperbola where
  b : ‚Ñù
  h_b_pos : b > 0

/-- The eccentricity of the hyperbola -/
noncomputable def eccentricity (h : Hyperbola) : ‚Ñù := Real.sqrt 2

/-- The distance from the focus to the asymptote of the hyperbola -/
noncomputable def focus_to_asymptote_distance (h : Hyperbola) : ‚Ñù := 2 * Real.sqrt 2

/-- Theorem stating that the distance from the focus to the asymptote is 2‚àö2 -/
theorem focus_asymptote_distance_is_2sqrt2 (h : Hyperbola) :
  focus_to_asymptote_distance h = 2 * Real.sqrt 2 := by
  -- Unfold the definition of focus_to_asymptote_distance
  unfold focus_to_asymptote_distance
  -- The equality is now trivial
  rfl


end NUMINAMATH_CALUDE_ERRORFEEDBACK_focus_asymptote_distance_is_2sqrt2_l651_65141


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_ellipse_and_line_properties_l651_65116

/-- An ellipse with given properties and a line intersecting it. -/
structure EllipseAndLine where
  /-- Semi-major axis of the ellipse -/
  a : ‚Ñù
  /-- Semi-minor axis of the ellipse -/
  b : ‚Ñù
  /-- Slope of the intersecting line -/
  m : ‚Ñù
  /-- a > b > 0 -/
  h‚ÇÅ : a > b ‚àß b > 0
  /-- Eccentricity of the ellipse is ‚àö3/2 -/
  h‚ÇÇ : Real.sqrt (a^2 - b^2) / a = Real.sqrt 3 / 2
  /-- The ellipse passes through point (1, -‚àö3/2) -/
  h‚ÇÉ : 1 / a^2 + 3 / (4 * b^2) = 1
  /-- The line intersects the ellipse at two distinct points -/
  h‚ÇÑ : -Real.sqrt 5 < m ‚àß m < Real.sqrt 5
  /-- The area of the triangle formed by the intersection points and origin is 1 -/
  h‚ÇÖ : 2 * abs m * Real.sqrt (5 - m^2) = 5

/-- The main theorem about the ellipse and intersecting line. -/
theorem ellipse_and_line_properties (el : EllipseAndLine) :
  (el.a = 2 ‚àß el.b = 1) ‚àß (el.m = Real.sqrt 10 / 2 ‚à® el.m = -Real.sqrt 10 / 2) := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_ellipse_and_line_properties_l651_65116


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_monotonic_intervals_imply_a_range_l651_65135

-- Define the function f as noncomputable
noncomputable def f (x : ‚Ñù) : ‚Ñù := Real.sqrt 3 * Real.sin (2 * x) - Real.cos (2 * x)

-- State the theorem
theorem monotonic_intervals_imply_a_range :
  ‚àÄ a : ‚Ñù, 
    a > 0 ‚Üí
    (‚àÄ x y : ‚Ñù, 0 ‚â§ x ‚àß x < y ‚àß y ‚â§ a / 3 ‚Üí f x < f y) ‚Üí
    (‚àÄ x y : ‚Ñù, 2 * a ‚â§ x ‚àß x < y ‚àß y ‚â§ 4 * Real.pi / 3 ‚Üí f x < f y) ‚Üí
    5 * Real.pi / 12 ‚â§ a ‚àß a ‚â§ Real.pi :=
by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_monotonic_intervals_imply_a_range_l651_65135


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_f_value_at_25pi_div_6_f_range_l651_65172

noncomputable def a (x : ‚Ñù) : ‚Ñù √ó ‚Ñù := (Real.sqrt 3 * Real.cos x - Real.sqrt 3, Real.sin x)
noncomputable def b (x : ‚Ñù) : ‚Ñù √ó ‚Ñù := (1 + Real.cos x, Real.cos x)

noncomputable def f (x : ‚Ñù) : ‚Ñù := (a x).1 * (b x).1 + (a x).2 * (b x).2

theorem f_value_at_25pi_div_6 : f (25 * œÄ / 6) = 0 := by sorry

theorem f_range (x : ‚Ñù) (h : x ‚àà Set.Icc (-œÄ / 3) (œÄ / 6)) :
  f x ‚àà Set.Icc (-Real.sqrt 3) (1 - Real.sqrt 3 / 2) := by sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_f_value_at_25pi_div_6_f_range_l651_65172


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_no_four_cycle_edge_bound_l651_65193

/-- A simple graph with no self-loops or multiple edges -/
structure MySimpleGraph (V : Type*) where
  adj : V ‚Üí V ‚Üí Prop
  symm : ‚àÄ {u v}, adj u v ‚Üí adj v u
  loopless : ‚àÄ v, ¬¨adj v v

/-- The number of vertices in a graph -/
def numVertices {V : Type*} (g : MySimpleGraph V) : ‚Ñï := sorry

/-- The number of edges in a graph -/
def numEdges {V : Type*} (g : MySimpleGraph V) : ‚Ñï := sorry

/-- A 4-cycle in a graph -/
def hasFourCycle {V : Type*} (g : MySimpleGraph V) : Prop := sorry

theorem no_four_cycle_edge_bound {V : Type*} (g : MySimpleGraph V) 
  (n : ‚Ñï) (m : ‚Ñï) 
  (hn : numVertices g = n) 
  (hm : numEdges g = m) 
  (h_no_four_cycle : ¬¨hasFourCycle g) : 
  (m : ‚Ñù) ‚â§ (n / 4 : ‚Ñù) * (1 + Real.sqrt (4 * n - 3)) := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_no_four_cycle_edge_bound_l651_65193


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_twelve_factorial_base_nine_zeroes_l651_65178

/-- The number of trailing zeroes in n! when written in base b -/
def trailingZeroes (n : ‚Ñï) (b : ‚Ñï) : ‚Ñï := sorry

/-- 12 factorial -/
def factorial12 : ‚Ñï := Nat.factorial 12

theorem twelve_factorial_base_nine_zeroes :
  trailingZeroes factorial12 9 = 2 := by sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_twelve_factorial_base_nine_zeroes_l651_65178


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_train_crossing_time_l651_65115

/-- Calculates the time taken for a train to cross a man walking in the same direction. -/
noncomputable def time_to_cross (train_length : ‚Ñù) (train_speed : ‚Ñù) (man_speed : ‚Ñù) : ‚Ñù :=
  train_length / ((train_speed - man_speed) * 1000 / 3600)

/-- Theorem stating that a 1500m train moving at 95 km/hr takes 60 seconds to cross a man walking at 5 km/hr in the same direction. -/
theorem train_crossing_time :
  time_to_cross 1500 95 5 = 60 := by
  -- Unfold the definition of time_to_cross
  unfold time_to_cross
  -- Perform the calculation
  norm_num
  -- The proof is complete
  done

-- We can't use #eval with noncomputable functions, so we'll use #check instead
#check train_crossing_time

end NUMINAMATH_CALUDE_ERRORFEEDBACK_train_crossing_time_l651_65115


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_least_sum_of_exponents_for_1562_l651_65137

def sumOfDistinctPowersOf2 (n : ‚Ñï) : ‚Ñï := 
  let rec go (m : ‚Ñï) (sum : ‚Ñï) (fuel : ‚Ñï) : ‚Ñï :=
    if fuel = 0 then sum
    else if m = 0 then sum
    else
      let k := Nat.log2 m
      go (m - 2^k) (sum + k) (fuel - 1)
  go n 0 (Nat.log2 n + 1)

theorem least_sum_of_exponents_for_1562 :
  sumOfDistinctPowersOf2 1562 = 27 := by
  rfl

#eval sumOfDistinctPowersOf2 1562

end NUMINAMATH_CALUDE_ERRORFEEDBACK_least_sum_of_exponents_for_1562_l651_65137


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_angle_between_special_vectors_l651_65110

variable {V : Type*} [NormedAddCommGroup V] [InnerProductSpace ‚Ñù V]

noncomputable def angle_between (a b : V) : ‚Ñù := Real.arccos ((inner a b) / (norm a * norm b))

theorem angle_between_special_vectors (a b : V) 
  (ha : norm a = 2)
  (hb : norm b = 1)
  (hab : norm (a - (2 : ‚Ñù) ‚Ä¢ b) = 2 * Real.sqrt 3) :
  angle_between a b = 2 * Real.pi / 3 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_angle_between_special_vectors_l651_65110


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_not_all_odd_l651_65165

theorem not_all_odd (a‚ÇÅ a‚ÇÇ a‚ÇÉ a‚ÇÑ a‚ÇÖ b : ‚Ñ§) 
  (h : a‚ÇÅ^2 + a‚ÇÇ^2 + a‚ÇÉ^2 + a‚ÇÑ^2 + a‚ÇÖ^2 = b^2) : 
  ¬¨(Odd a‚ÇÅ ‚àß Odd a‚ÇÇ ‚àß Odd a‚ÇÉ ‚àß Odd a‚ÇÑ ‚àß Odd a‚ÇÖ ‚àß Odd b) :=
by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_not_all_odd_l651_65165


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_cos_double_angle_l651_65162

theorem cos_double_angle (Œ∏ : ‚Ñù) (h : Real.cos Œ∏ = 3/5) : Real.cos (2*Œ∏) = -7/25 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_cos_double_angle_l651_65162


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_decimal_to_binary_89_l651_65125

theorem decimal_to_binary_89 : 
  Nat.digits 2 89 = [1, 0, 1, 1, 0, 0, 1] :=
by
  -- The proof goes here
  sorry

#eval Nat.digits 2 89

end NUMINAMATH_CALUDE_ERRORFEEDBACK_decimal_to_binary_89_l651_65125


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_volume_increases_with_radius_l651_65179

-- Define the volume of a sphere as a function of its radius
noncomputable def sphereVolume (R : ‚Ñù) : ‚Ñù := (4 / 3) * Real.pi * R^3

-- Theorem statement
theorem volume_increases_with_radius (R1 R2 : ‚Ñù) (h1 : R1 > 1) (h2 : R2 > R1) :
  sphereVolume R1 < sphereVolume R2 := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_volume_increases_with_radius_l651_65179


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_exactly_two_quadratic_l651_65185

-- Define the concept of a quadratic function
def is_quadratic (f : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÉ a b c : ‚Ñù, a ‚â† 0 ‚àß ‚àÄ x, f x = a * x^2 + b * x + c

-- Define the given functions
noncomputable def f1 (x : ‚Ñù) : ‚Ñù := 3 * (x - 1)^2 + 1
noncomputable def f2 (x : ‚Ñù) : ‚Ñù := x + 1/x
noncomputable def f3 (x : ‚Ñù) : ‚Ñù := 8 * x^2 + 1
noncomputable def f4 (x : ‚Ñù) : ‚Ñù := 3 * x^3 + 2 * x^2

-- Theorem statement
theorem exactly_two_quadratic : 
  (is_quadratic f1 ‚àß is_quadratic f3) ‚àß 
  (¬¨is_quadratic f2 ‚àß ¬¨is_quadratic f4) := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_exactly_two_quadratic_l651_65185


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_characterization_of_S_l651_65155

def satisfies_conditions (S : Set ‚Ñù) : Prop :=
  (1 ‚àà S) ‚àß
  (‚àÄ x y, x ‚àà S ‚Üí y ‚àà S ‚Üí x > y ‚Üí Real.sqrt (x^2 - y^2) ‚àà S) ‚àß
  (‚àÄ z, z ‚àà S ‚Üí z ‚â• 1)

def sqrt_set : Set ‚Ñù :=
  {x | ‚àÉ n : ‚Ñï, x = Real.sqrt n}

def bounded_sqrt_set (n : ‚Ñï) : Set ‚Ñù :=
  {x | ‚àÉ k : ‚Ñï, k ‚â§ n ‚àß x = Real.sqrt k}

theorem characterization_of_S :
  ‚àÄ S : Set ‚Ñù, satisfies_conditions S ‚Üî
    (S = sqrt_set ‚à® ‚àÉ n : ‚Ñï, S = bounded_sqrt_set n) :=
by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_characterization_of_S_l651_65155


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_unique_a_for_tangent_l651_65195

/-- The circle C with equation x^2 + y^2 + ax + 2ay + 2a^2 - a - 1 = 0 -/
def circleC (a : ‚Ñù) (x y : ‚Ñù) : Prop :=
  x^2 + y^2 + a*x + 2*a*y + 2*a^2 - a - 1 = 0

/-- The point P -/
def P : ‚Ñù √ó ‚Ñù := (-1, -2)

/-- The condition that there is exactly one tangent line from P to the circle C -/
def unique_tangent (a : ‚Ñù) : Prop :=
  ‚àÉ! l : Set (‚Ñù √ó ‚Ñù), (P ‚àà l) ‚àß (‚àÄ p, p ‚àà l ‚Üí circleC a p.1 p.2 ‚Üí ‚àÉ! q, q ‚àà l ‚àß circleC a q.1 q.2)

/-- There exists a unique value of a for which there is a unique tangent line -/
theorem unique_a_for_tangent : ‚àÉ! a : ‚Ñù, unique_tangent a :=
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_unique_a_for_tangent_l651_65195


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_smallest_mean_weight_Y_Z_l651_65133

/-- Represents a pile of bricks -/
structure BrickPile where
  weight : ‚Ñù  -- Total weight of the pile
  count : ‚Ñù   -- Number of bricks in the pile (using ‚Ñù for simplicity)

/-- Calculate the mean weight of a pile of bricks -/
noncomputable def meanWeight (pile : BrickPile) : ‚Ñù :=
  pile.weight / pile.count

/-- Calculate the mean weight of two combined piles of bricks -/
noncomputable def combinedMeanWeight (pile1 pile2 : BrickPile) : ‚Ñù :=
  (pile1.weight + pile2.weight) / (pile1.count + pile2.count)

theorem smallest_mean_weight_Y_Z (X Y Z : BrickPile)
  (hX : meanWeight X = 60)
  (hY : meanWeight Y = 70)
  (hXY : combinedMeanWeight X Y = 65)
  (hXZ : combinedMeanWeight X Z = 67) :
  combinedMeanWeight Y Z ‚â• 71 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_smallest_mean_weight_Y_Z_l651_65133


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_area_of_triangle_PQR_l651_65105

/-- The area of a triangle given its three vertices -/
noncomputable def triangle_area (P Q R : ‚Ñù √ó ‚Ñù) : ‚Ñù :=
  let (x1, y1) := P
  let (x2, y2) := Q
  let (x3, y3) := R
  (1/2) * abs ((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1))

/-- The theorem stating that the area of triangle PQR is 20 square units -/
theorem area_of_triangle_PQR :
  let P : ‚Ñù √ó ‚Ñù := (-2, 3)
  let Q : ‚Ñù √ó ‚Ñù := (6, 3)
  let R : ‚Ñù √ó ‚Ñù := (4, -2)
  triangle_area P Q R = 20 := by sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_area_of_triangle_PQR_l651_65105


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_f_equals_f_inv_at_five_unique_solution_l651_65173

-- Define the function f
noncomputable def f (x : ‚Ñù) : ‚Ñù := 2 * x - 5

-- Define the inverse function f‚Åª¬π
noncomputable def f_inv (x : ‚Ñù) : ‚Ñù := (x + 5) / 2

-- Theorem stating that f(x) = f‚Åª¬π(x) when x = 5
theorem f_equals_f_inv_at_five :
  f 5 = f_inv 5 := by
  -- Expand the definitions of f and f_inv
  simp [f, f_inv]
  -- Perform the arithmetic
  norm_num

-- Theorem stating that 5 is the only solution
theorem unique_solution (x : ‚Ñù) :
  f x = f_inv x ‚Üî x = 5 := by
  -- Split into two directions
  constructor
  -- Forward direction
  ¬∑ intro h
    -- Expand definitions and simplify
    simp [f, f_inv] at h
    -- Solve the resulting equation
    linarith
  -- Backward direction
  ¬∑ intro h
    -- Substitute x = 5
    subst h
    -- Use the previous theorem
    exact f_equals_f_inv_at_five


end NUMINAMATH_CALUDE_ERRORFEEDBACK_f_equals_f_inv_at_five_unique_solution_l651_65173


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_rohan_food_expense_l651_65163

/-- Represents Rohan's monthly financial breakdown -/
structure RohanFinances where
  salary : ‚Ñö
  savings : ‚Ñö
  house_rent_percent : ‚Ñö
  entertainment_percent : ‚Ñö
  conveyance_percent : ‚Ñö

/-- Calculates the percentage of salary spent on food -/
def food_expense_percent (r : RohanFinances) : ‚Ñö :=
  100 - (r.house_rent_percent + r.entertainment_percent + r.conveyance_percent + r.savings / r.salary * 100)

/-- Theorem stating that Rohan spends 40% of his salary on food -/
theorem rohan_food_expense (r : RohanFinances) 
  (h1 : r.salary = 12500)
  (h2 : r.savings = 2500)
  (h3 : r.house_rent_percent = 20)
  (h4 : r.entertainment_percent = 10)
  (h5 : r.conveyance_percent = 10) :
  food_expense_percent r = 40 := by
  sorry

#eval food_expense_percent { 
  salary := 12500, 
  savings := 2500, 
  house_rent_percent := 20, 
  entertainment_percent := 10, 
  conveyance_percent := 10 
}

end NUMINAMATH_CALUDE_ERRORFEEDBACK_rohan_food_expense_l651_65163


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_parabola_intersection_max_distance_l651_65117

/-- Represents a point in 2D space -/
structure Point where
  x : ‚Ñù
  y : ‚Ñù

/-- Represents a line in 2D space -/
structure Line where
  slope : ‚Ñù
  intercept : ‚Ñù

/-- Represents a parabola in 2D space -/
structure Parabola where
  a : ‚Ñù
  h : ‚Ñù
  k : ‚Ñù

/-- Calculate the distance between two points -/
noncomputable def distance (p1 p2 : Point) : ‚Ñù :=
  Real.sqrt ((p1.x - p2.x)^2 + (p1.y - p2.y)^2)

/-- The main theorem -/
theorem parabola_intersection_max_distance 
  (E : Parabola) 
  (F : Point)
  (l‚ÇÅ : Line)
  (P Q : Point)
  (h1 : E.a = 1/4 ‚àß E.h = 0 ‚àß E.k = 0)  -- Equation of E: x¬≤ = 4y
  (h2 : F.x = 0 ‚àß F.y = 1)              -- Focus at (0,1)
  (h3 : l‚ÇÅ.slope = 0 ‚àß l‚ÇÅ.intercept = -1) -- Directrix: y = -1
  (h4 : P.x^2 = 4 * P.y ‚àß Q.x^2 = 4 * Q.y) -- P and Q are on E
  (h5 : (P.y + Q.y) / 2 = 2)            -- Midpoint of PQ has y-coordinate 2
  : distance P Q ‚â§ 6 := by
  sorry

#check parabola_intersection_max_distance

end NUMINAMATH_CALUDE_ERRORFEEDBACK_parabola_intersection_max_distance_l651_65117


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_min_value_of_f_l651_65118

noncomputable def f (x : ‚Ñù) := (1/3) * x^3 + x^2 - 3*x - 4

theorem min_value_of_f :
  ‚àÉ (x : ‚Ñù), x ‚àà Set.Icc (-4 : ‚Ñù) 2 ‚àß
  (‚àÄ (y : ‚Ñù), y ‚àà Set.Icc (-4 : ‚Ñù) 2 ‚Üí f x ‚â§ f y) ‚àß
  f x = -17/3 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_min_value_of_f_l651_65118


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_sequence_property_l651_65122

noncomputable def sequence_a (n : ‚Ñï) : ‚Ñù := 3^n

noncomputable def sequence_b (n : ‚Ñï) : ‚Ñù := 2 * sequence_a n - 3 * n

noncomputable def sum_S (n : ‚Ñï) : ‚Ñù := (sequence_a n - 1) / 2

noncomputable def sum_T (n : ‚Ñï) : ‚Ñù := 3^(n+1) - (3*n^2)/2 - (3*n)/2 - 3

theorem sequence_property (n : ‚Ñï) :
  2 * (sum_S n) = 3 * (sequence_a n) - 3 ‚àß
  sequence_a n = 3^n ‚àß
  sum_T n = 3^(n+1) - (3*n^2)/2 - (3*n)/2 - 3 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_sequence_property_l651_65122


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_flagpole_height_l651_65114

/-- Given the heights and shadow lengths of two objects measured at the same time and place,
    prove that the height of the second object is 20m. -/
theorem flagpole_height
  (h_xiao_ming : ‚Ñù)
  (s_xiao_ming : ‚Ñù)
  (s_flagpole : ‚Ñù)
  (h_flagpole : ‚Ñù)
  (h_xiao_ming_pos : h_xiao_ming > 0)
  (s_xiao_ming_pos : s_xiao_ming > 0)
  (s_flagpole_pos : s_flagpole > 0)
  (h_xiao_ming_val : h_xiao_ming = 1.6)
  (s_xiao_ming_val : s_xiao_ming = 0.4)
  (s_flagpole_val : s_flagpole = 5)
  (ratio_eq : h_xiao_ming / s_xiao_ming = h_flagpole / s_flagpole) :
  h_flagpole = 20 := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_flagpole_height_l651_65114


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_sequence_not_all_distinct_l651_65174

theorem sequence_not_all_distinct (a : ‚Ñï ‚Üí ‚Ñö) 
  (h : ‚àÄ m n : ‚Ñï, a m + a n = a (m * n))
  (nonneg : ‚àÄ n : ‚Ñï, 0 ‚â§ a n) : 
  ‚àÉ i j : ‚Ñï, i ‚â† j ‚àß a i = a j :=
sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_sequence_not_all_distinct_l651_65174


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_harry_hours_worked_l651_65152

noncomputable def harry_pay (x : ‚Ñù) (h : ‚Ñù) : ‚Ñù :=
  if h ‚â§ 24 then x * h
  else if h ‚â§ 35 then x * 24 + 1.5 * x * (h - 24)
  else x * 24 + 1.5 * x * 11 + 2 * x * (h - 35)

noncomputable def james_pay (x : ‚Ñù) (h : ‚Ñù) : ‚Ñù :=
  if h ‚â§ 40 then x * h
  else if h ‚â§ 50 then x * 40 + 2 * x * (h - 40)
  else x * 40 + 2 * x * 10 + 2.5 * x * (h - 50)

-- Theorem statement
theorem harry_hours_worked (x : ‚Ñù) (h_pos : x > 0) :
  harry_pay x 41 = james_pay x 47 ‚àß
  ‚àÄ h : ‚Ñù, h ‚â• 0 ‚àß h ‚â† 41 ‚Üí harry_pay x h ‚â† james_pay x 47 :=
by sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_harry_hours_worked_l651_65152


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_f_range_l651_65154

-- Define the function f
noncomputable def f (x : ‚Ñù) : ‚Ñù :=
  if x < 0 then 3  -- Add this case to handle x < 0
  else if x < 1 then 2 * x^2
  else if x < 2 then 2
  else 3

-- Define the range of f
def range_f : Set ‚Ñù := Set.range f

-- Theorem statement
theorem f_range : range_f = Set.union (Set.Icc 0 2) {3} := by sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_f_range_l651_65154


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_solve_quadratic_equation_1_solve_quadratic_equation_2_l651_65130

-- First equation
theorem solve_quadratic_equation_1 : 
  ‚àÉ x‚ÇÅ x‚ÇÇ : ‚Ñù, x‚ÇÅ = 1 + Real.sqrt 2 / 2 ‚àß x‚ÇÇ = 1 - Real.sqrt 2 / 2 ‚àß
  ‚àÄ x : ‚Ñù, 2 * x^2 - 4 * x + 1 = 0 ‚Üî x = x‚ÇÅ ‚à® x = x‚ÇÇ := by sorry

-- Second equation
theorem solve_quadratic_equation_2 : 
  ‚àÉ x‚ÇÅ x‚ÇÇ : ‚Ñù, x‚ÇÅ = -3/2 ‚àß x‚ÇÇ = -1/2 ‚àß
  ‚àÄ x : ‚Ñù, (2*x + 3)^2 - 4*x - 6 = 0 ‚Üî x = x‚ÇÅ ‚à® x = x‚ÇÇ := by sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_solve_quadratic_equation_1_solve_quadratic_equation_2_l651_65130


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_matrix_equality_from_condition_l651_65187

open Matrix Complex

theorem matrix_equality_from_condition (n : ‚Ñï) (A : Matrix (Fin n) (Fin n) ‚ÑÇ) :
  A + A·¥¥ = A ^ 2 * A·¥¥ ‚Üí A = A·¥¥ := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_matrix_equality_from_condition_l651_65187


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_desired_line_equation_l651_65146

-- Define the given line
noncomputable def given_line (x y : ‚Ñù) : Prop := Real.sqrt 3 * x - y + 1 = 0

-- Define the angle between two lines
noncomputable def angle_between_lines (m1 m2 : ‚Ñù) : ‚Ñù := Real.arctan ((m2 - m1) / (1 + m1 * m2))

-- Define the condition for the desired line
noncomputable def desired_line_condition (x y : ‚Ñù) : Prop :=
  (x = -1 ‚àß y = Real.sqrt 3) ‚àß
  (‚àÉ m : ‚Ñù, angle_between_lines (Real.sqrt 3) m = Real.pi / 6 ‚à®
                angle_between_lines (Real.sqrt 3) m = -Real.pi / 6)

-- Theorem statement
theorem desired_line_equation (x y : ‚Ñù) :
  desired_line_condition x y ‚Üí
  (x + 1 = 0 ‚à® x - Real.sqrt 3 * y + 4 = 0) :=
by sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_desired_line_equation_l651_65146


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_colored_points_line_segments_l651_65113

/-- A point in a plane with a color --/
structure ColoredPoint where
  x : ‚Ñù
  y : ‚Ñù
  color : Fin 4

/-- A line segment connecting two points --/
structure LineSegment where
  p1 : ColoredPoint
  p2 : ColoredPoint

/-- Predicate to check if two line segments intersect --/
def intersect (l1 l2 : LineSegment) : Prop :=
  sorry

/-- Theorem: Given 20 points in a plane colored with 4 different colors,
    where each color is assigned to exactly 5 points, it is always possible
    to select 4 non-intersecting line segments such that each segment connects
    two points of the same color, and the endpoints of different segments
    have different colors. --/
theorem colored_points_line_segments
  (points : Finset ColoredPoint)
  (h1 : points.card = 20)
  (h2 : ‚àÄ c : Fin 4, (points.filter (Œª p => p.color = c)).card = 5) :
  ‚àÉ (segments : Finset LineSegment),
    segments.card = 4 ‚àß
    (‚àÄ l, l ‚àà segments ‚Üí l.p1.color = l.p2.color) ‚àß
    (‚àÄ l1 l2, l1 ‚àà segments ‚Üí l2 ‚àà segments ‚Üí l1 ‚â† l2 ‚Üí ¬¨(intersect l1 l2)) ‚àß
    (‚àÄ l1 l2, l1 ‚àà segments ‚Üí l2 ‚àà segments ‚Üí l1 ‚â† l2 ‚Üí l1.p1.color ‚â† l2.p1.color) :=
by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_colored_points_line_segments_l651_65113


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_exam_students_count_l651_65109

theorem exam_students_count (N : ‚Ñï) (avg_all avg_excluded avg_remaining : ‚Ñù) : ‚Ñï :=
  let excluded : ‚Ñï := 5
  have avg_all_eq : avg_all = 72 := by sorry
  have excluded_eq : excluded = 5 := by rfl
  have avg_excluded_eq : avg_excluded = 40 := by sorry
  have avg_remaining_eq : avg_remaining = 92 := by sorry
  have h : (N * avg_all - excluded * avg_excluded) / (N - excluded) = avg_remaining := by sorry
  have : N = 13 := by
    sorry
  13

#check exam_students_count

end NUMINAMATH_CALUDE_ERRORFEEDBACK_exam_students_count_l651_65109


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_carpet_breadth_increase_l651_65138

/-- Proves that the percentage increase in breadth for the second carpet is 25% -/
theorem carpet_breadth_increase (breadth_1 : ‚Ñù) (length_1 : ‚Ñù) (length_2 : ‚Ñù) 
  (cost_2 : ‚Ñù) (rate : ‚Ñù) : 
  breadth_1 = 6 ‚Üí
  length_1 = 1.44 * breadth_1 ‚Üí
  length_2 = length_1 * 1.4 ‚Üí
  cost_2 = 4082.4 ‚Üí
  rate = 45 ‚Üí
  (cost_2 / rate / length_2 - breadth_1) / breadth_1 * 100 = 25 := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_carpet_breadth_increase_l651_65138


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_monotonic_decreasing_g_omega_range_l651_65132

noncomputable def g (œâ : ‚Ñù) (x : ‚Ñù) : ‚Ñù := Real.cos (œâ * x + Real.pi / 6)

theorem monotonic_decreasing_g_omega_range :
  ‚àÄ œâ : ‚Ñù, 
    (œâ > 0 ‚àß 
     (‚àÄ x‚ÇÅ x‚ÇÇ : ‚Ñù, 0 ‚â§ x‚ÇÅ ‚àß x‚ÇÅ < x‚ÇÇ ‚àß x‚ÇÇ ‚â§ Real.pi / 2 ‚Üí g œâ x‚ÇÅ > g œâ x‚ÇÇ)) 
    ‚Üî 
    (0 < œâ ‚àß œâ ‚â§ 5 / 3) := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_monotonic_decreasing_g_omega_range_l651_65132


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_largest_inscribed_square_side_eq_l651_65148

/-- The side length of the largest square that can be inscribed in the space inside a square 
    with side length 15, but outside of two congruent equilateral triangles drawn as described. -/
noncomputable def largest_inscribed_square_side : ‚Ñù :=
  (30 - 15 * Real.sqrt 3) / 2

/-- The outer square has a side length of 15. -/
def outer_square_side : ‚Ñù := 15

/-- The side length of the equilateral triangles. -/
def triangle_side : ‚Ñù := outer_square_side

/-- The height of the equilateral triangles. -/
noncomputable def triangle_height : ‚Ñù := (Real.sqrt 3 / 2) * triangle_side

theorem largest_inscribed_square_side_eq :
  largest_inscribed_square_side = outer_square_side - triangle_height :=
by sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_largest_inscribed_square_side_eq_l651_65148


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_flour_already_added_marys_flour_problem_l651_65171

/-- Given a recipe that requires a certain number of cups of flour and the number of cups still needed to be added, calculate the number of cups already put in. -/
theorem flour_already_added (total_required : ‚Ñï) (cups_to_add : ‚Ñï) 
  (h : total_required ‚â• cups_to_add) : 
  total_required - cups_to_add = total_required - cups_to_add := by
  rfl

/-- Solve Mary's baking problem -/
theorem marys_flour_problem : 
  let total_required : ‚Ñï := 12
  let cups_to_add : ‚Ñï := 1
  total_required - cups_to_add = 11 := by
  norm_num

#eval 12 - 1  -- This will output 11, confirming our calculation

end NUMINAMATH_CALUDE_ERRORFEEDBACK_flour_already_added_marys_flour_problem_l651_65171


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_exchange_rate_change_is_24_l651_65142

/-- The exchange rate of the dollar on January 1, 2014, in rubles -/
def initial_rate : ‚Ñù := 32.6587

/-- The exchange rate of the dollar on December 31, 2014, in rubles -/
def final_rate : ‚Ñù := 56.2584

/-- Rounds a real number to the nearest integer -/
noncomputable def round_to_nearest (x : ‚Ñù) : ‚Ñ§ :=
  Int.floor (x + 0.5)

/-- The change in dollar exchange rate from January 1, 2014, to December 31, 2014, rounded to the nearest whole number -/
noncomputable def exchange_rate_change : ‚Ñ§ :=
  round_to_nearest (final_rate - initial_rate)

theorem exchange_rate_change_is_24 :
  exchange_rate_change = 24 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_exchange_rate_change_is_24_l651_65142


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_actual_distance_is_36km_l651_65181

/-- Represents the walking scenario with two speeds and a distance difference -/
structure WalkingScenario where
  slow_speed : ‚Ñù
  fast_speed : ‚Ñù
  distance_difference : ‚Ñù

/-- Calculates the actual distance traveled given a WalkingScenario -/
noncomputable def actual_distance (scenario : WalkingScenario) : ‚Ñù :=
  let time := scenario.distance_difference / (scenario.fast_speed - scenario.slow_speed)
  scenario.slow_speed * time

/-- Theorem stating that for the given scenario, the actual distance is 36 km -/
theorem actual_distance_is_36km : 
  let scenario := WalkingScenario.mk 12 20 24
  actual_distance scenario = 36 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_actual_distance_is_36km_l651_65181


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_cylinder_cross_section_eccentricity_30_degrees_l651_65107

noncomputable def cylinder_cross_section_eccentricity (R : ‚Ñù) (Œ∏ : ‚Ñù) : ‚Ñù :=
  Real.sqrt (1 - (Real.cos Œ∏) ^ 2)

theorem cylinder_cross_section_eccentricity_30_degrees (R : ‚Ñù) :
  cylinder_cross_section_eccentricity R (œÄ / 6) = 1 / 2 :=
by
  unfold cylinder_cross_section_eccentricity
  -- The proof steps would go here, but for now we'll use sorry
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_cylinder_cross_section_eccentricity_30_degrees_l651_65107


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_h_composition_equality_l651_65199

-- Define the function h
noncomputable def h (x : ‚Ñù) : ‚Ñù :=
  if x ‚â§ 0 then -x else 3*x - 30

-- State the theorem
theorem h_composition_equality {a : ‚Ñù} (ha : a < 0) :
  h (h (h 6)) = h (h (h a)) ‚Üí a = -14 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_h_composition_equality_l651_65199


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_road_length_is_fifteen_l651_65124

/-- Represents the road construction project -/
structure RoadProject where
  totalDays : ‚Ñï
  initialWorkers : ‚Ñï
  daysElapsed : ‚Ñï
  completedLength : ‚Ñù
  extraWorkers : ‚Ñï

/-- Calculates the total length of the road given the project parameters -/
noncomputable def calculateRoadLength (project : RoadProject) : ‚Ñù :=
  let totalWorkers := (project.initialWorkers + project.extraWorkers : ‚Ñù)
  let remainingDays := (project.totalDays - project.daysElapsed : ‚Ñù)
  let dailyRate := project.completedLength / project.daysElapsed
  project.completedLength + (totalWorkers / project.initialWorkers) * dailyRate * remainingDays

/-- Theorem stating that the calculated road length for the given project is 15 km -/
theorem road_length_is_fifteen (project : RoadProject) 
    (h1 : project.totalDays = 300)
    (h2 : project.initialWorkers = 30)
    (h3 : project.daysElapsed = 100)
    (h4 : project.completedLength = 2.5)
    (h5 : project.extraWorkers = 45) : 
  calculateRoadLength project = 15 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_road_length_is_fifteen_l651_65124


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_distance_range_C‚ÇÅ_C‚ÇÇ_l651_65101

-- Define curve C‚ÇÅ
noncomputable def C‚ÇÅ (œÜ : ‚Ñù) : ‚Ñù √ó ‚Ñù := (2 * Real.cos œÜ, Real.sin œÜ)

-- Define curve C‚ÇÇ (center and radius in Cartesian coordinates)
def C‚ÇÇ_center : ‚Ñù √ó ‚Ñù := (0, 3)
def C‚ÇÇ_radius : ‚Ñù := 1

-- Define the distance between two points
noncomputable def distance (p q : ‚Ñù √ó ‚Ñù) : ‚Ñù :=
  Real.sqrt ((p.1 - q.1)^2 + (p.2 - q.2)^2)

-- Theorem statement
theorem distance_range_C‚ÇÅ_C‚ÇÇ :
  ‚àÄ (œÜ : ‚Ñù) (N : ‚Ñù √ó ‚Ñù),
  (distance C‚ÇÇ_center N = C‚ÇÇ_radius) ‚Üí
  1 ‚â§ distance (C‚ÇÅ œÜ) N ‚àß distance (C‚ÇÅ œÜ) N ‚â§ 5 :=
by sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_distance_range_C‚ÇÅ_C‚ÇÇ_l651_65101


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_root_difference_quadratic_l651_65184

theorem root_difference_quadratic (a b c : ‚Ñù) (h : a ‚â† 0) :
  let r‚ÇÅ := (-b + Real.sqrt (b^2 - 4*a*c)) / (2*a)
  let r‚ÇÇ := (-b - Real.sqrt (b^2 - 4*a*c)) / (2*a)
  |r‚ÇÅ - r‚ÇÇ| = 6 ‚Üî a = 1 ‚àß b = 42 ‚àß c = 408 := by
  sorry

#check root_difference_quadratic

end NUMINAMATH_CALUDE_ERRORFEEDBACK_root_difference_quadratic_l651_65184


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_polynomial_value_exclusion_l651_65104

-- Define the polynomial P(x)
def P (a : ‚Ñï ‚Üí ‚Ñ§) (k : ‚Ñï) (x : ‚Ñ§) : ‚Ñ§ := 
  (Finset.range (k + 1)).sum (Œª i ‚Ü¶ a i * x^i)

-- State the theorem
theorem polynomial_value_exclusion 
  (a : ‚Ñï ‚Üí ‚Ñ§) (k : ‚Ñï) 
  (x‚ÇÅ x‚ÇÇ x‚ÇÉ x‚ÇÑ : ‚Ñ§) 
  (h_distinct : x‚ÇÅ ‚â† x‚ÇÇ ‚àß x‚ÇÅ ‚â† x‚ÇÉ ‚àß x‚ÇÅ ‚â† x‚ÇÑ ‚àß x‚ÇÇ ‚â† x‚ÇÉ ‚àß x‚ÇÇ ‚â† x‚ÇÑ ‚àß x‚ÇÉ ‚â† x‚ÇÑ)
  (h_roots : P a k x‚ÇÅ = 2 ‚àß P a k x‚ÇÇ = 2 ‚àß P a k x‚ÇÉ = 2 ‚àß P a k x‚ÇÑ = 2) :
  ‚àÄ (x : ‚Ñ§), ‚àÄ (m : Fin 5), P a k x ‚â† 2 * (m : ‚Ñ§) + 1 := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_polynomial_value_exclusion_l651_65104


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_symmetry_axis_of_f_l651_65194

open Real

-- Define the function f
noncomputable def f (x : ‚Ñù) : ‚Ñù := sin (2 * x - œÄ / 4)

-- Theorem statement
theorem symmetry_axis_of_f :
  ‚àÄ x : ‚Ñù, f (-œÄ / 8 + x) = f (-œÄ / 8 - x) :=
by
  intro x
  -- Expand the definition of f
  simp [f]
  -- The rest of the proof would go here
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_symmetry_axis_of_f_l651_65194


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_soccer_tournament_probability_l651_65170

/-- Represents a soccer tournament with the given conditions -/
structure SoccerTournament where
  num_teams : Nat
  matches_per_team : Nat
  win_probability : ‚Ñö
  points_for_win : Nat

/-- The probability that one team finishes with more points than another,
    given they've already won their direct match -/
def probability_of_more_points (t : SoccerTournament) : ‚Ñö :=
  3172 / 4096

/-- The main theorem to prove -/
theorem soccer_tournament_probability 
  (t : SoccerTournament) 
  (h1 : t.num_teams = 8)
  (h2 : t.matches_per_team = 7)
  (h3 : t.win_probability = 1/2)
  (h4 : t.points_for_win = 1) :
  probability_of_more_points t = 3172 / 4096 := by
  sorry

#eval probability_of_more_points { num_teams := 8, matches_per_team := 7, win_probability := 1/2, points_for_win := 1 }

end NUMINAMATH_CALUDE_ERRORFEEDBACK_soccer_tournament_probability_l651_65170


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_rabbit_can_escape_l651_65177

structure Garden where
  side_length : ‚Ñù
  rabbit_speed : ‚Ñù
  wolf_speed : ‚Ñù
  wolf_speed_ratio : wolf_speed = 1.4 * rabbit_speed

theorem rabbit_can_escape (g : Garden) (h : g.wolf_speed < Real.sqrt 2 * g.rabbit_speed) :
  ‚àÉ (escape_path : ‚Ñù ‚Üí ‚Ñù √ó ‚Ñù), 
    (escape_path 0 = (0, 0)) ‚àß 
    (‚àÉ (t : ‚Ñù), t > 0 ‚àß (|((escape_path t).1)| = g.side_length / 2 ‚à® |((escape_path t).2)| = g.side_length / 2)) :=
by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_rabbit_can_escape_l651_65177


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_min_difference_when_sum_maximized_l651_65176

theorem min_difference_when_sum_maximized (x : Fin 9 ‚Üí ‚Ñï) 
  (h_order : ‚àÄ i j, i < j ‚Üí x i < x j)
  (h_sum : (Finset.sum Finset.univ (Œª i => x i)) = 220)
  (h_max_sum : ‚àÄ y : Fin 9 ‚Üí ‚Ñï, 
    (‚àÄ i j, i < j ‚Üí y i < y j) ‚Üí 
    ((Finset.sum Finset.univ (Œª i => y i)) = 220) ‚Üí 
    (Finset.sum (Finset.range 5) (Œª i => y i) ‚â§ Finset.sum (Finset.range 5) (Œª i => x i))) :
  x 8 - x 0 = 9 :=
by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_min_difference_when_sum_maximized_l651_65176


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_semifinalists_count_l651_65175

theorem semifinalists_count (n : ‚Ñï) (h : Nat.choose (n - 2) 3 = 56) : n = 10 := by
  -- Define the number of finalists
  let finalists := n - 2

  -- Define the number of medals awarded
  let medals := 3

  -- Define the number of possible groups of medal winners
  let medal_groups := 56

  -- The combination of finalists choosing medals equals the number of medal groups
  have : Nat.choose finalists medals = medal_groups := h

  -- Prove that n = 10
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_semifinalists_count_l651_65175


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_polar_to_rectangular_l651_65186

-- Define the polar coordinates
noncomputable def rho : ‚Ñù := 2
noncomputable def theta : ‚Ñù := (4 * Real.pi) / 3

-- Define the rectangular coordinates
noncomputable def x : ‚Ñù := -1
noncomputable def y : ‚Ñù := -Real.sqrt 3

-- Theorem statement
theorem polar_to_rectangular :
  (x * x + y * y = rho * rho) ‚àß
  (Real.tan theta = y / x) ‚àß
  (x < 0) ‚àß (y < 0) := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_polar_to_rectangular_l651_65186


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_place_value_ratio_example_l651_65147

/-- The ratio of place values for digits in a decimal number -/
def placeValueRatio (n : ‚Ñö) (d1 d2 : ‚Ñï) : ‚Ñö :=
  let s := toString n
  let digits := s.toList
  let d1_index := digits.indexOf (toString d1).front
  let d2_index := digits.indexOf (toString d2).front
  (10 : ‚Ñö) ^ (digits.length - d1_index - 2 - (digits.length - d2_index - 2))

theorem place_value_ratio_example :
  placeValueRatio 52674.1892 6 8 = 10000 := by
  sorry

#eval placeValueRatio 52674.1892 6 8

end NUMINAMATH_CALUDE_ERRORFEEDBACK_place_value_ratio_example_l651_65147


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_transformed_area_l651_65168

-- Define the function g on a domain of three points
noncomputable def g : Fin 3 ‚Üí ‚Ñù := sorry

-- Define the area of the triangle formed by the graph of g
noncomputable def area_g : ‚Ñù := sorry

-- Define the area of the triangle formed by the graph of 4g(3x)
noncomputable def area_transformed : ‚Ñù := sorry

-- Theorem statement
theorem transformed_area (h : area_g = 45) : area_transformed = 60 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_transformed_area_l651_65168


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_sequence_a_2018_l651_65131

def sequence_a : ‚Ñï ‚Üí ‚Ñö
  | 0 => 2  -- Define for 0 to cover all natural numbers
  | 1 => 2
  | (n + 2) => (1 + sequence_a (n + 1)) / (1 - sequence_a (n + 1))

theorem sequence_a_2018 : sequence_a 2018 = -3 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_sequence_a_2018_l651_65131


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_cargo_truck_min_cost_l651_65145

/-- The total cost function for the cargo truck trip -/
noncomputable def total_cost (x : ‚Ñù) : ‚Ñù := 2340 / x + 13 * x / 18

/-- The theorem stating the minimum cost and optimal speed -/
theorem cargo_truck_min_cost :
  ‚àÉ (x : ‚Ñù), 50 ‚â§ x ‚àß x ‚â§ 100 ‚àß
  (‚àÄ y : ‚Ñù, 50 ‚â§ y ‚àß y ‚â§ 100 ‚Üí total_cost x ‚â§ total_cost y) ‚àß
  x = 18 * Real.sqrt 10 ‚àß
  total_cost x = 26 * Real.sqrt 10 := by
  sorry

#check cargo_truck_min_cost

end NUMINAMATH_CALUDE_ERRORFEEDBACK_cargo_truck_min_cost_l651_65145


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_triangle_theorem_l651_65180

noncomputable def triangle_proof (a b c : ‚Ñù) (A B C : ‚Ñù) : Prop :=
  let triangle_area := (1/2) * a * b * Real.sin C
  0 < A ‚àß A < Real.pi ‚àß
  0 < B ‚àß B < Real.pi ‚àß
  0 < C ‚àß C < Real.pi ‚àß
  c = 2 ‚àß
  Real.sqrt 3 * a = 2 * c * Real.sin A ‚àß
  triangle_area = Real.sqrt 3 ‚Üí
  C = Real.pi/3 ‚àß a = 2 ‚àß b = 2

theorem triangle_theorem :
  ‚àÄ (a b c : ‚Ñù) (A B C : ‚Ñù),
  triangle_proof a b c A B C :=
by sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_triangle_theorem_l651_65180


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_solution_set_part1_range_of_a_part2_l651_65182

-- Define the function f
def f (a x : ‚Ñù) : ‚Ñù := |x - a| + |x + 3|

-- Part 1
theorem solution_set_part1 :
  {x : ‚Ñù | f 1 x ‚â• 6} = Set.Iic (-4) ‚à™ Set.Ici 2 := by sorry

-- Part 2
theorem range_of_a_part2 :
  {a : ‚Ñù | ‚àÄ x, f a x > -a} = Set.Ioi (-3/2) := by sorry

-- Define the set of real numbers satisfying f(x) ‚â• 6 when a = 1
def solution_set : Set ‚Ñù := {x : ‚Ñù | f 1 x ‚â• 6}

-- Define the set of real numbers a for which f(x) > -a for all x
def a_range : Set ‚Ñù := {a : ‚Ñù | ‚àÄ x, f a x > -a}

end NUMINAMATH_CALUDE_ERRORFEEDBACK_solution_set_part1_range_of_a_part2_l651_65182


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_congruence_solutions_l651_65161

def is_valid_solution (x y z : ‚Ñï) : Prop :=
  (x * y) % z = 2 ‚àß
  (y * z) % x = 2 ‚àß
  (z * x) % y = 2

theorem congruence_solutions :
  ‚àÄ x y z : ‚Ñï,
    x > 0 ‚Üí y > 0 ‚Üí z > 0 ‚Üí
    is_valid_solution x y z ‚Üî
      ((x, y, z) = (3, 8, 22) ‚à®
       (x, y, z) = (3, 10, 14) ‚à®
       (x, y, z) = (4, 5, 18) ‚à®
       (x, y, z) = (4, 6, 11) ‚à®
       (x, y, z) = (6, 14, 82) ‚à®
       (x, y, z) = (6, 22, 26)) :=
by sorry

#check congruence_solutions

end NUMINAMATH_CALUDE_ERRORFEEDBACK_congruence_solutions_l651_65161


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_quadratic_function_uniqueness_l651_65106

/-- A quadratic function with specific properties -/
structure QuadraticFunction (f : ‚Ñù ‚Üí ‚Ñù) : Prop where
  exists_abc : ‚àÉ a b c : ‚Ñù, ‚àÄ x, f x = a * x^2 + b * x + c
  symmetry : ‚àÄ x, f (3 + x) = f (3 - x)
  min_value : f 3 = -2
  passes_through : f 0 = 1

/-- The specific quadratic function we want to prove -/
noncomputable def TargetFunction (x : ‚Ñù) : ‚Ñù :=
  (1/3) * x^2 - 2 * x + 1

/-- Theorem stating that the quadratic function with given properties is unique -/
theorem quadratic_function_uniqueness :
  ‚àÄ f : ‚Ñù ‚Üí ‚Ñù, QuadraticFunction f ‚Üí f = TargetFunction := by
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_quadratic_function_uniqueness_l651_65106


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_min_fuel_consumption_l651_65123

/-- Fuel consumption function (liters per hour) --/
noncomputable def fuel_consumption (x : ‚Ñù) : ‚Ñù := (1 / 128000) * x^3 - (3 / 80) * x + 8

/-- Total fuel consumed for a 100 km journey at speed x --/
noncomputable def total_fuel (x : ‚Ñù) : ‚Ñù := fuel_consumption x * (100 / x)

/-- The minimum fuel consumption occurs at 80 km/h and is 11.25 liters --/
theorem min_fuel_consumption :
  ‚àÉ (x : ‚Ñù), x > 0 ‚àß x ‚â§ 120 ‚àß
  (‚àÄ (y : ‚Ñù), y > 0 ‚Üí y ‚â§ 120 ‚Üí total_fuel x ‚â§ total_fuel y) ‚àß
  x = 80 ‚àß total_fuel x = 11.25 := by
  sorry

#check min_fuel_consumption

end NUMINAMATH_CALUDE_ERRORFEEDBACK_min_fuel_consumption_l651_65123


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_max_product_sum_l651_65129

def is_valid_permutation (a b c d : ‚Ñï) : Prop :=
  Multiset.ofList [a, b, c, d] = Multiset.ofList [2, 3, 4, 5]

def product_sum (a b c d : ‚Ñï) : ‚Ñï :=
  a * b + a * c + b * d + c * d

theorem max_product_sum :
  ‚àÄ a b c d : ‚Ñï, is_valid_permutation a b c d ‚Üí
  product_sum a b c d ‚â§ 49 ‚àß
  ‚àÉ a' b' c' d' : ‚Ñï, is_valid_permutation a' b' c' d' ‚àß product_sum a' b' c' d' = 49 :=
by
  sorry

#eval product_sum 2 3 4 5

end NUMINAMATH_CALUDE_ERRORFEEDBACK_max_product_sum_l651_65129


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_division_distance_for_given_trapezoid_l651_65191

/-- Represents a rectangular trapezoid ABCD -/
structure RectangularTrapezoid where
  ab : ‚Ñù
  ad : ‚Ñù
  dc : ‚Ñù

/-- Calculates the area of the rectangular trapezoid -/
noncomputable def area (t : RectangularTrapezoid) : ‚Ñù :=
  t.ab * t.ad + (t.dc - t.ab) * t.ad / 2

/-- Calculates the distance from D to divide the trapezoid into two equal areas -/
noncomputable def divisionDistance (t : RectangularTrapezoid) : ‚Ñù :=
  area t / (2 * t.ad)

theorem division_distance_for_given_trapezoid :
  let t : RectangularTrapezoid := { ab := 30, ad := 20, dc := 45 }
  divisionDistance t = 18.75 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_division_distance_for_given_trapezoid_l651_65191


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_missouri_to_newyork_distance_l651_65139

/-- The distance from Missouri to New York by car -/
noncomputable def distance_missouri_to_newyork (flying_distance : ‚Ñù) (driving_increase : ‚Ñù) : ‚Ñù :=
  (flying_distance * (1 + driving_increase)) / 2

/-- Theorem: The distance from Missouri to New York by car is 1400 miles -/
theorem missouri_to_newyork_distance :
  distance_missouri_to_newyork 2000 0.4 = 1400 := by
  -- Unfold the definition of distance_missouri_to_newyork
  unfold distance_missouri_to_newyork
  -- Simplify the expression
  simp
  -- The proof is completed with sorry for now
  sorry


end NUMINAMATH_CALUDE_ERRORFEEDBACK_missouri_to_newyork_distance_l651_65139


namespace NUMINAMATH_CALUDE_ERRORFEEDBACK_constant_term_expansion_l651_65126

theorem constant_term_expansion (a : ‚Ñù) : 
  (‚àÉ c : ‚Ñù ‚Üí ‚Ñù, c 0 = 14 ‚àß 
   ‚àÄ x : ‚Ñù, x > 0 ‚Üí c x = (x^(1/6) - a/x^(1/2))^8) ‚Üí 
  a = Real.sqrt 2 / 2 ‚à® a = -Real.sqrt 2 / 2 := by
  sorry

end NUMINAMATH_CALUDE_ERRORFEEDBACK_constant_term_expansion_l651_65126
