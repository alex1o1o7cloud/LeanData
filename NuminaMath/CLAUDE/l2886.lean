import Mathlib

namespace NUMINAMATH_CALUDE_fruit_seller_apples_l2886_288657

/-- Proves that if a fruit seller sells 60% of their apples and has 300 apples left, 
    then they originally had 750 apples. -/
theorem fruit_seller_apples (original : ℕ) (sold_percent : ℚ) (remaining : ℕ) 
    (h1 : sold_percent = 60 / 100)
    (h2 : remaining = 300)
    (h3 : (1 - sold_percent) * original = remaining) : 
  original = 750 := by
  sorry

end NUMINAMATH_CALUDE_fruit_seller_apples_l2886_288657


namespace NUMINAMATH_CALUDE_jaden_final_car_count_l2886_288647

/-- The number of toy cars Jaden has after all transactions -/
def final_car_count (initial : ℕ) (bought : ℕ) (birthday : ℕ) (to_sister : ℕ) (to_friend : ℕ) : ℕ :=
  initial + bought + birthday - to_sister - to_friend

/-- Theorem stating that Jaden's final car count is 43 -/
theorem jaden_final_car_count :
  final_car_count 14 28 12 8 3 = 43 := by
  sorry

end NUMINAMATH_CALUDE_jaden_final_car_count_l2886_288647


namespace NUMINAMATH_CALUDE_point_transformation_l2886_288601

/-- Rotation of 90 degrees around the z-axis -/
def rotateZ90 (p : ℝ × ℝ × ℝ) : ℝ × ℝ × ℝ :=
  let (x, y, z) := p
  (-y, x, z)

/-- Reflection through the xy-plane -/
def reflectXY (p : ℝ × ℝ × ℝ) : ℝ × ℝ × ℝ :=
  let (x, y, z) := p
  (x, y, -z)

/-- Reflection through the yz-plane -/
def reflectYZ (p : ℝ × ℝ × ℝ) : ℝ × ℝ × ℝ :=
  let (x, y, z) := p
  (-x, y, z)

/-- The sequence of transformations applied to the point -/
def transformPoint (p : ℝ × ℝ × ℝ) : ℝ × ℝ × ℝ :=
  p |> rotateZ90 |> reflectXY |> reflectYZ |> rotateZ90 |> reflectYZ

theorem point_transformation :
  transformPoint (2, 3, 4) = (2, 3, -4) := by
  sorry

end NUMINAMATH_CALUDE_point_transformation_l2886_288601


namespace NUMINAMATH_CALUDE_arithmetic_mean_set_not_full_segment_l2886_288648

open Set

/-- The set of points generated by repeatedly inserting 9 arithmetic means
    between consecutive points on the segment [a, a+1] -/
def arithmeticMeanSet (a : ℕ) : Set ℝ :=
  { x | ∃ (n : ℕ) (m : ℕ), x = a + m / (10 ^ n) ∧ m < 10 ^ n }

/-- The theorem stating that the set of points generated by repeatedly inserting
    9 arithmetic means is not equal to the entire segment [a, a+1] -/
theorem arithmetic_mean_set_not_full_segment (a : ℕ) :
  ∃ x, x ∈ Icc (a : ℝ) (a + 1) ∧ x ∉ arithmeticMeanSet a :=
by
  sorry

end NUMINAMATH_CALUDE_arithmetic_mean_set_not_full_segment_l2886_288648


namespace NUMINAMATH_CALUDE_jose_join_time_l2886_288682

theorem jose_join_time (tom_investment : ℕ) (jose_investment : ℕ) (total_profit : ℕ) (jose_profit : ℕ) :
  tom_investment = 30000 →
  jose_investment = 45000 →
  total_profit = 54000 →
  jose_profit = 30000 →
  ∃ x : ℕ,
    x ≤ 12 ∧
    (tom_investment * 12) / (tom_investment * 12 + jose_investment * (12 - x)) =
    (total_profit - jose_profit) / total_profit ∧
    x = 2 :=
by sorry

end NUMINAMATH_CALUDE_jose_join_time_l2886_288682


namespace NUMINAMATH_CALUDE_trigonometric_equality_iff_sum_pi_half_l2886_288644

open Real

theorem trigonometric_equality_iff_sum_pi_half 
  (α β : ℝ) (k : ℕ) 
  (h1 : 0 < α ∧ α < π/2) 
  (h2 : 0 < β ∧ β < π/2) 
  (h3 : k > 0) :
  (sin α)^(k+2) / (cos β)^k + (cos α)^(k+2) / (sin β)^k = 1 ↔ α + β = π/2 :=
by sorry

end NUMINAMATH_CALUDE_trigonometric_equality_iff_sum_pi_half_l2886_288644


namespace NUMINAMATH_CALUDE_fourth_term_expansion_l2886_288619

/-- The fourth term in the binomial expansion of (1/x + x)^n, where n is determined by the condition that the binomial coefficients of the third and seventh terms are equal. -/
def fourth_term (x : ℝ) : ℝ := 56 * x^2

/-- The condition that the binomial coefficients of the third and seventh terms are equal. -/
def binomial_coefficient_condition (n : ℕ) : Prop :=
  Nat.choose n 2 = Nat.choose n 6

theorem fourth_term_expansion (x : ℝ) :
  binomial_coefficient_condition 8 →
  fourth_term x = Nat.choose 8 3 * (1/x)^3 * x^5 :=
sorry

end NUMINAMATH_CALUDE_fourth_term_expansion_l2886_288619


namespace NUMINAMATH_CALUDE_salary_distribution_l2886_288695

theorem salary_distribution (total : ℝ) :
  ∃ (a b c d : ℝ),
    a + b + c + d = total ∧
    2 * b = 3 * a ∧
    4 * b = 6 * a ∧
    3 * c = 4 * b ∧
    d = c + 700 ∧
    b = 1050 := by
  sorry

end NUMINAMATH_CALUDE_salary_distribution_l2886_288695


namespace NUMINAMATH_CALUDE_binomial_expansion_sum_zero_l2886_288654

theorem binomial_expansion_sum_zero (n k : ℕ) (b : ℝ) 
  (h1 : n ≥ 2)
  (h2 : b ≠ 0)
  (h3 : k > 0)
  (h4 : n.choose 1 * b^(n-1) * (k+1) + n.choose 2 * b^(n-2) * (k+1)^2 = 0) :
  n = 2*k + 2 := by
sorry

end NUMINAMATH_CALUDE_binomial_expansion_sum_zero_l2886_288654


namespace NUMINAMATH_CALUDE_boat_speed_l2886_288688

/-- The average speed of a boat in still water, given its travel times with and against a current. -/
theorem boat_speed (time_with_current time_against_current current_speed : ℝ) 
  (h1 : time_with_current = 2)
  (h2 : time_against_current = 2.5)
  (h3 : current_speed = 3)
  (h4 : time_with_current * (x + current_speed) = time_against_current * (x - current_speed)) : 
  x = 27 :=
by
  sorry

#check boat_speed

end NUMINAMATH_CALUDE_boat_speed_l2886_288688


namespace NUMINAMATH_CALUDE_park_visitors_l2886_288646

theorem park_visitors (total : ℕ) (men_fraction : ℚ) (women_student_fraction : ℚ) 
  (h1 : total = 1260)
  (h2 : men_fraction = 7 / 18)
  (h3 : women_student_fraction = 6 / 11) :
  (total : ℚ) * (1 - men_fraction) * women_student_fraction = 420 := by
  sorry

end NUMINAMATH_CALUDE_park_visitors_l2886_288646


namespace NUMINAMATH_CALUDE_number_of_girls_l2886_288674

/-- Given a group of children with specific characteristics, prove the number of girls. -/
theorem number_of_girls (total_children happy_children sad_children neutral_children boys happy_boys sad_girls neutral_boys : ℕ) 
  (h1 : total_children = 60)
  (h2 : happy_children = 30)
  (h3 : sad_children = 10)
  (h4 : neutral_children = 20)
  (h5 : boys = 19)
  (h6 : happy_boys = 6)
  (h7 : sad_girls = 4)
  (h8 : neutral_boys = 7)
  (h9 : happy_children + sad_children + neutral_children = total_children) :
  total_children - boys = 41 := by
  sorry

end NUMINAMATH_CALUDE_number_of_girls_l2886_288674


namespace NUMINAMATH_CALUDE_union_A_complement_B_eq_closed_interval_l2886_288609

def U : Set ℝ := Set.univ

def A : Set ℝ := {x | x^2 - 4*x + 3 ≤ 0}

def B : Set ℝ := {x | |x - 3| > 1}

theorem union_A_complement_B_eq_closed_interval :
  A ∪ (U \ B) = {x : ℝ | 1 ≤ x ∧ x ≤ 4} :=
by sorry

end NUMINAMATH_CALUDE_union_A_complement_B_eq_closed_interval_l2886_288609


namespace NUMINAMATH_CALUDE_odd_decreasing_sum_negative_l2886_288663

/-- A function f is odd if f(-x) = -f(x) for all x -/
def OddFunction (f : ℝ → ℝ) : Prop :=
  ∀ x, f (-x) = -f x

/-- A function f is decreasing on [0, ∞) if f(x) ≥ f(y) whenever 0 ≤ x < y -/
def DecreasingOnNonnegative (f : ℝ → ℝ) : Prop :=
  ∀ x y, 0 ≤ x → x < y → f x ≥ f y

theorem odd_decreasing_sum_negative
  (f : ℝ → ℝ)
  (hodd : OddFunction f)
  (hdec : DecreasingOnNonnegative f)
  (a b : ℝ)
  (hsum : a + b > 0) :
  f a + f b < 0 :=
sorry

end NUMINAMATH_CALUDE_odd_decreasing_sum_negative_l2886_288663


namespace NUMINAMATH_CALUDE_specific_league_games_l2886_288693

/-- Represents a sports league with the given conditions -/
structure SportsLeague where
  total_teams : Nat
  divisions : Nat
  teams_per_division : Nat
  intra_division_games : Nat
  inter_division_games : Nat

/-- Calculate the total number of games in a complete season -/
def total_games (league : SportsLeague) : Nat :=
  -- We'll implement the calculation here
  sorry

/-- Theorem stating the total number of games in the specific league configuration -/
theorem specific_league_games :
  let league : SportsLeague := {
    total_teams := 20,
    divisions := 4,
    teams_per_division := 5,
    intra_division_games := 3,
    inter_division_games := 1
  }
  total_games league = 270 := by
  sorry

end NUMINAMATH_CALUDE_specific_league_games_l2886_288693


namespace NUMINAMATH_CALUDE_set_equality_implies_a_value_l2886_288659

theorem set_equality_implies_a_value (A B : Set ℤ) (a : ℤ) : 
  A = {2, 3} → B = {2, 2*a - 1} → A = B → a = 2 := by sorry

end NUMINAMATH_CALUDE_set_equality_implies_a_value_l2886_288659


namespace NUMINAMATH_CALUDE_remainder_3_800_mod_17_l2886_288650

theorem remainder_3_800_mod_17 : 3^800 % 17 = 1 := by
  sorry

end NUMINAMATH_CALUDE_remainder_3_800_mod_17_l2886_288650


namespace NUMINAMATH_CALUDE_removed_terms_product_l2886_288675

theorem removed_terms_product (s : Finset ℚ) : 
  s ⊆ {1/2, 1/4, 1/6, 1/8, 1/10, 1/12} →
  s.sum id = 1 →
  (({1/2, 1/4, 1/6, 1/8, 1/10, 1/12} \ s).prod id) = 1/80 := by
  sorry

end NUMINAMATH_CALUDE_removed_terms_product_l2886_288675


namespace NUMINAMATH_CALUDE_certain_age_problem_l2886_288662

/-- Prove that the certain age is 30 years old given the conditions in the problem -/
theorem certain_age_problem (kody_current_age : ℕ) (mohamed_current_age : ℕ) (certain_age : ℕ) :
  kody_current_age = 32 →
  mohamed_current_age = 2 * certain_age →
  kody_current_age - 4 = (mohamed_current_age - 4) / 2 →
  certain_age = 30 := by
  sorry

end NUMINAMATH_CALUDE_certain_age_problem_l2886_288662


namespace NUMINAMATH_CALUDE_sqrt_product_division_main_theorem_l2886_288607

theorem sqrt_product_division (a b c : ℝ) (ha : a > 0) (hb : b > 0) (hc : c > 0) :
  Real.sqrt a * Real.sqrt b / (1 / Real.sqrt c) = c * (a * b / c) :=
by sorry

theorem main_theorem : Real.sqrt 2 * Real.sqrt 3 / (1 / Real.sqrt 6) = 6 :=
by sorry

end NUMINAMATH_CALUDE_sqrt_product_division_main_theorem_l2886_288607


namespace NUMINAMATH_CALUDE_combined_transformation_correct_l2886_288680

def dilation_matrix (scale : ℝ) : Matrix (Fin 2) (Fin 2) ℝ :=
  !![scale, 0; 0, scale]

def reflection_x_axis : Matrix (Fin 2) (Fin 2) ℝ :=
  !![1, 0; 0, -1]

def combined_transformation : Matrix (Fin 2) (Fin 2) ℝ :=
  !![5, 0; 0, -5]

theorem combined_transformation_correct :
  combined_transformation = reflection_x_axis * dilation_matrix 5 := by
  sorry

end NUMINAMATH_CALUDE_combined_transformation_correct_l2886_288680


namespace NUMINAMATH_CALUDE_total_money_l2886_288692

theorem total_money (a b c : ℕ) 
  (h1 : a + c = 700)
  (h2 : b + c = 600)
  (h3 : c = 300) : 
  a + b + c = 1000 := by
sorry

end NUMINAMATH_CALUDE_total_money_l2886_288692


namespace NUMINAMATH_CALUDE_distance_between_cities_l2886_288602

theorem distance_between_cities (t : ℝ) : ∃ x : ℝ,
  x / 50 = t - 1 ∧ x / 35 = t + 2 → x = 350 := by
  sorry

end NUMINAMATH_CALUDE_distance_between_cities_l2886_288602


namespace NUMINAMATH_CALUDE_brad_green_balloons_l2886_288615

/-- Calculates the number of green balloons Brad has -/
def green_balloons (total : ℕ) (initial_red : ℕ) (popped_red : ℕ) (blue : ℕ) : ℕ :=
  let remaining_red := initial_red - popped_red
  let non_red := total - remaining_red
  let green_and_yellow := non_red - blue
  (2 * green_and_yellow) / 5

/-- Theorem stating that Brad has 12 green balloons -/
theorem brad_green_balloons :
  green_balloons 50 15 3 7 = 12 := by
  sorry

end NUMINAMATH_CALUDE_brad_green_balloons_l2886_288615


namespace NUMINAMATH_CALUDE_fermat_numbers_not_cubes_l2886_288632

theorem fermat_numbers_not_cubes : ∀ (n : ℕ), ¬ ∃ (k : ℤ), 2^(2^n) + 1 = k^3 := by
  sorry

end NUMINAMATH_CALUDE_fermat_numbers_not_cubes_l2886_288632


namespace NUMINAMATH_CALUDE_power_of_81_four_thirds_l2886_288699

theorem power_of_81_four_thirds :
  (81 : ℝ) ^ (4/3) = 243 * (3 : ℝ) ^ (1/3) := by sorry

end NUMINAMATH_CALUDE_power_of_81_four_thirds_l2886_288699


namespace NUMINAMATH_CALUDE_sum_of_specific_numbers_l2886_288637

theorem sum_of_specific_numbers : 
  12345 + 23451 + 34512 + 45123 + 51234 = 166665 := by
  sorry

end NUMINAMATH_CALUDE_sum_of_specific_numbers_l2886_288637


namespace NUMINAMATH_CALUDE_lisa_children_count_l2886_288621

/-- The number of children Lisa has -/
def num_children : ℕ := sorry

/-- The number of eggs Lisa cooks for her family in a year -/
def total_eggs_per_year : ℕ := 3380

/-- The number of days Lisa cooks breakfast in a year -/
def days_per_year : ℕ := 5 * 52

/-- The number of eggs Lisa cooks each day -/
def eggs_per_day (c : ℕ) : ℕ := 2 * c + 3 + 2

theorem lisa_children_count : 
  num_children = 4 ∧ 
  total_eggs_per_year = days_per_year * eggs_per_day num_children :=
sorry

end NUMINAMATH_CALUDE_lisa_children_count_l2886_288621


namespace NUMINAMATH_CALUDE_investment_scientific_notation_l2886_288624

-- Define the value in billion yuan
def investment : ℝ := 845

-- Define the scientific notation representation
def scientific_notation : ℝ := 8.45 * (10 ^ 3)

-- Theorem statement
theorem investment_scientific_notation : investment = scientific_notation := by
  sorry

end NUMINAMATH_CALUDE_investment_scientific_notation_l2886_288624


namespace NUMINAMATH_CALUDE_sum_of_powers_l2886_288653

theorem sum_of_powers (a b y : ℝ) (ha : a > 0) (hb : b > 0) (hy : y > 0) :
  (2 * a) ^ (2 * b ^ 2) = (a ^ b + y ^ b) ^ 2 → y = 4 * a ^ 2 - a := by
  sorry

end NUMINAMATH_CALUDE_sum_of_powers_l2886_288653


namespace NUMINAMATH_CALUDE_specific_trapezoid_area_l2886_288639

/-- An isosceles trapezoid with given base lengths and angle -/
structure IsoscelesTrapezoid where
  larger_base : ℝ
  smaller_base : ℝ
  angle_at_larger_base : ℝ

/-- The area of an isosceles trapezoid -/
def area (t : IsoscelesTrapezoid) : ℝ :=
  sorry

/-- Theorem: The area of the specific isosceles trapezoid is 15 -/
theorem specific_trapezoid_area :
  let t : IsoscelesTrapezoid := {
    larger_base := 8,
    smaller_base := 2,
    angle_at_larger_base := Real.pi / 4  -- 45° in radians
  }
  area t = 15 := by
  sorry

end NUMINAMATH_CALUDE_specific_trapezoid_area_l2886_288639


namespace NUMINAMATH_CALUDE_rectangular_parallelepiped_volume_l2886_288670

theorem rectangular_parallelepiped_volume
  (m n p d : ℝ) 
  (h_positive : m > 0 ∧ n > 0 ∧ p > 0 ∧ d > 0) :
  ∃ (V : ℝ), V = (m * n * p * d^3) / (m^2 + n^2 + p^2)^(3/2) ∧
  ∃ (a b c : ℝ), 
    a / m = b / n ∧ 
    b / n = c / p ∧
    V = a * b * c ∧
    d^2 = a^2 + b^2 + c^2 := by
  sorry

#check rectangular_parallelepiped_volume

end NUMINAMATH_CALUDE_rectangular_parallelepiped_volume_l2886_288670


namespace NUMINAMATH_CALUDE_M_eq_real_l2886_288614

/-- The set M of complex numbers z where (z-1)^2 = |z-1|^2 -/
def M : Set ℂ := {z : ℂ | (z - 1)^2 = Complex.abs (z - 1)^2}

/-- Theorem stating that M is equal to the set of real numbers -/
theorem M_eq_real : M = {z : ℂ | z.im = 0} := by sorry

end NUMINAMATH_CALUDE_M_eq_real_l2886_288614


namespace NUMINAMATH_CALUDE_x_gt_one_sufficient_not_necessary_for_abs_x_gt_one_l2886_288685

theorem x_gt_one_sufficient_not_necessary_for_abs_x_gt_one :
  (∀ x : ℝ, x > 1 → |x| > 1) ∧
  (∃ x : ℝ, |x| > 1 ∧ x ≤ 1) := by
  sorry

end NUMINAMATH_CALUDE_x_gt_one_sufficient_not_necessary_for_abs_x_gt_one_l2886_288685


namespace NUMINAMATH_CALUDE_audiobook_disc_content_l2886_288651

theorem audiobook_disc_content (total_time min_per_disc : ℕ) 
  (h1 : total_time = 520) 
  (h2 : min_per_disc = 65) : 
  ∃ (num_discs : ℕ), 
    num_discs > 0 ∧ 
    num_discs * min_per_disc = total_time ∧ 
    ∀ (n : ℕ), n > 0 → n * min_per_disc < total_time → n < num_discs :=
by sorry

end NUMINAMATH_CALUDE_audiobook_disc_content_l2886_288651


namespace NUMINAMATH_CALUDE_square_area_from_diagonal_l2886_288622

theorem square_area_from_diagonal (d : ℝ) (h : d = 8 * Real.sqrt 2) :
  let s := d / Real.sqrt 2
  s ^ 2 = 64 := by sorry

end NUMINAMATH_CALUDE_square_area_from_diagonal_l2886_288622


namespace NUMINAMATH_CALUDE_sports_club_overlap_l2886_288690

theorem sports_club_overlap (total : ℕ) (badminton : ℕ) (tennis : ℕ) (neither : ℕ)
  (h1 : total = 35)
  (h2 : badminton = 15)
  (h3 : tennis = 18)
  (h4 : neither = 5) :
  badminton + tennis - (total - neither) = 3 :=
by sorry

end NUMINAMATH_CALUDE_sports_club_overlap_l2886_288690


namespace NUMINAMATH_CALUDE_move_right_coords_specific_point_move_l2886_288658

/-- A point in 2D space -/
structure Point where
  x : ℝ
  y : ℝ

/-- Move a point horizontally -/
def moveRight (p : Point) (h : ℝ) : Point :=
  { x := p.x + h, y := p.y }

theorem move_right_coords (p : Point) (h : ℝ) :
  moveRight p h = { x := p.x + h, y := p.y } := by sorry

theorem specific_point_move :
  let p : Point := { x := -1, y := 3 }
  moveRight p 2 = { x := 1, y := 3 } := by sorry

end NUMINAMATH_CALUDE_move_right_coords_specific_point_move_l2886_288658


namespace NUMINAMATH_CALUDE_smallest_value_expression_l2886_288672

theorem smallest_value_expression (a b : ℤ) (h1 : a = 3 * b) (h2 : b ≠ 0) :
  (((a + b) / (a - b)) ^ 2 + ((a - b) / (a + b)) ^ 2 : ℝ) = 4.25 := by sorry

end NUMINAMATH_CALUDE_smallest_value_expression_l2886_288672


namespace NUMINAMATH_CALUDE_odd_factors_of_420_l2886_288603

-- Define 420 as a natural number
def n : ℕ := 420

-- Define a function to count odd factors
def count_odd_factors (m : ℕ) : ℕ := sorry

-- Theorem statement
theorem odd_factors_of_420 : count_odd_factors n = 8 := by sorry

end NUMINAMATH_CALUDE_odd_factors_of_420_l2886_288603


namespace NUMINAMATH_CALUDE_polar_to_cartesian_line_l2886_288610

/-- The polar equation r = 1 / (sin θ - cos θ) represents a line in Cartesian coordinates. -/
theorem polar_to_cartesian_line :
  ∀ (r θ : ℝ), r = 1 / (Real.sin θ - Real.cos θ) →
  ∃ (x y : ℝ), y - x = 1 :=
by sorry

end NUMINAMATH_CALUDE_polar_to_cartesian_line_l2886_288610


namespace NUMINAMATH_CALUDE_product_of_largest_and_smallest_three_digit_l2886_288676

def largest_three_digit (a b c : Nat) : Nat :=
  100 * max a (max b c) + 10 * (if a > b ∧ a > c then max b c else if b > a ∧ b > c then max a c else max a b) +
  min a (min b c)

def smallest_three_digit (a b c : Nat) : Nat :=
  100 * (if a > 0 then a else if b > 0 then b else c) +
  10 * (if a > 0 ∧ b > 0 then min a b else if a > 0 ∧ c > 0 then min a c else min b c) +
  (if a = 0 then 0 else if b = 0 then 0 else c)

theorem product_of_largest_and_smallest_three_digit :
  largest_three_digit 6 0 2 * smallest_three_digit 6 0 2 = 127720 := by
  sorry

end NUMINAMATH_CALUDE_product_of_largest_and_smallest_three_digit_l2886_288676


namespace NUMINAMATH_CALUDE_triangle_properties_l2886_288600

theorem triangle_properties (a b c : ℝ) (A B C : ℝ) :
  0 < a ∧ 0 < b ∧ 0 < c ∧
  0 < A ∧ A < π ∧ 0 < B ∧ B < π ∧ 0 < C ∧ C < π ∧
  b * Real.cos A + a / 2 = c ∧
  c = 2 * a ∧
  b = 3 * Real.sqrt 3 →
  B = π / 3 ∧ (a * c * Real.sin B) / 2 = (9 * Real.sqrt 3) / 2 := by
  sorry

#check triangle_properties

end NUMINAMATH_CALUDE_triangle_properties_l2886_288600


namespace NUMINAMATH_CALUDE_max_sum_of_squares_l2886_288656

theorem max_sum_of_squares (x y : ℤ) (h : x^2 - y^2 = 221) : 
  x^2 + y^2 ≤ 24421 ∧ ∃ (a b : ℤ), a^2 - b^2 = 221 ∧ a^2 + b^2 = 24421 :=
sorry

end NUMINAMATH_CALUDE_max_sum_of_squares_l2886_288656


namespace NUMINAMATH_CALUDE_complex_arithmetic_simplification_l2886_288631

theorem complex_arithmetic_simplification :
  57.6 * (8 / 5) + 28.8 * (184 / 5) - 14.4 * 80 + 12.5 = 12.5 := by
  sorry

end NUMINAMATH_CALUDE_complex_arithmetic_simplification_l2886_288631


namespace NUMINAMATH_CALUDE_subset_implies_m_values_l2886_288660

-- Define the sets P and Q
def P : Set ℝ := {x | x^2 = 1}
def Q (m : ℝ) : Set ℝ := {x | m * x = 1}

-- State the theorem
theorem subset_implies_m_values (m : ℝ) : Q m ⊆ P → m = 0 ∨ m = 1 ∨ m = -1 := by
  sorry

end NUMINAMATH_CALUDE_subset_implies_m_values_l2886_288660


namespace NUMINAMATH_CALUDE_merry_lambs_l2886_288683

theorem merry_lambs (merry_lambs : ℕ) (brother_lambs : ℕ) : 
  brother_lambs = merry_lambs + 3 →
  merry_lambs + brother_lambs = 23 →
  merry_lambs = 10 := by
sorry

end NUMINAMATH_CALUDE_merry_lambs_l2886_288683


namespace NUMINAMATH_CALUDE_smallest_m_no_real_roots_l2886_288694

theorem smallest_m_no_real_roots : ∃ (m : ℤ),
  (∀ (k : ℤ), k < m → ∃ (x : ℝ), 3 * x * (k * x - 6) - 2 * x^2 + 10 = 0) ∧
  (∀ (x : ℝ), 3 * x * (m * x - 6) - 2 * x^2 + 10 ≠ 0) ∧
  m = 4 := by
  sorry

end NUMINAMATH_CALUDE_smallest_m_no_real_roots_l2886_288694


namespace NUMINAMATH_CALUDE_point_reflection_fourth_to_second_l2886_288638

/-- A point in the Cartesian plane -/
structure Point where
  x : ℝ
  y : ℝ

/-- Definition of the fourth quadrant -/
def is_in_fourth_quadrant (p : Point) : Prop :=
  p.x > 0 ∧ p.y < 0

/-- Definition of the second quadrant -/
def is_in_second_quadrant (p : Point) : Prop :=
  p.x > 0 ∧ p.y < 0

/-- Theorem: If A(a,b) is in the fourth quadrant, then B(-b,-a) is in the second quadrant -/
theorem point_reflection_fourth_to_second (a b : ℝ) :
  is_in_fourth_quadrant (Point.mk a b) →
  is_in_second_quadrant (Point.mk (-b) (-a)) := by
  sorry


end NUMINAMATH_CALUDE_point_reflection_fourth_to_second_l2886_288638


namespace NUMINAMATH_CALUDE_hcf_problem_l2886_288697

theorem hcf_problem (a b H : ℕ+) : 
  (Nat.gcd a b = H) →
  (Nat.lcm a b = H * 13 * 14) →
  (max a b = 322) →
  (H = 14) := by
sorry

end NUMINAMATH_CALUDE_hcf_problem_l2886_288697


namespace NUMINAMATH_CALUDE_certain_number_problem_l2886_288630

theorem certain_number_problem (x : ℝ) : 0.75 * x = 0.5 * 900 → x = 600 := by
  sorry

end NUMINAMATH_CALUDE_certain_number_problem_l2886_288630


namespace NUMINAMATH_CALUDE_modular_congruence_l2886_288612

theorem modular_congruence (n : ℤ) : 
  0 ≤ n ∧ n < 103 ∧ (102 * n) % 103 = 74 % 103 → n % 103 = 29 % 103 := by
sorry

end NUMINAMATH_CALUDE_modular_congruence_l2886_288612


namespace NUMINAMATH_CALUDE_exam_probability_theorem_l2886_288620

def exam_probability (P : ℝ) : Prop :=
  let correct_prob : List ℝ := [1, P, 1/2, 1/4]
  let perfect_score_prob := List.prod correct_prob
  let prob_15 := P * (1/2) * (3/4) + (1-P) * (1/2) * (3/4)
  let prob_10 := P * (1/2) * (3/4) * (1/4) + (1-P) * (1/2) * (1/4) + (1-P) * (1/2) * (3/4) * (1/4)
  let prob_5 := P * (1/2) * (3/4) + (1-P) * (1/2) * (1/4)
  let prob_0 := 1 - perfect_score_prob - prob_15 - prob_10 - prob_5
  (P = 2/3 → perfect_score_prob = 1/12) ∧
  (prob_15 = 1/8 ∧ prob_10 = 1/8) ∧
  (prob_0 = 1/6)

theorem exam_probability_theorem : exam_probability (2/3) :=
sorry

end NUMINAMATH_CALUDE_exam_probability_theorem_l2886_288620


namespace NUMINAMATH_CALUDE_f_symmetric_about_origin_l2886_288686

/-- The function f(x) = 2sin(x)cos(x) is symmetric about the origin -/
theorem f_symmetric_about_origin :
  ∀ x : ℝ, (2 * Real.sin x * Real.cos x) = -(2 * Real.sin (-x) * Real.cos (-x)) := by
  sorry

end NUMINAMATH_CALUDE_f_symmetric_about_origin_l2886_288686


namespace NUMINAMATH_CALUDE_probability_three_yellow_apples_l2886_288635

def total_apples : ℕ := 10
def yellow_apples : ℕ := 4
def selected_apples : ℕ := 3

def probability_all_yellow : ℚ := (yellow_apples.choose selected_apples) / (total_apples.choose selected_apples)

theorem probability_three_yellow_apples :
  probability_all_yellow = 1 / 30 := by
  sorry

end NUMINAMATH_CALUDE_probability_three_yellow_apples_l2886_288635


namespace NUMINAMATH_CALUDE_jackie_apples_l2886_288689

theorem jackie_apples (adam_apples : ℕ) (difference : ℕ) (jackie_apples : ℕ) : 
  adam_apples = 14 → 
  adam_apples = jackie_apples + difference → 
  difference = 5 →
  jackie_apples = 9 := by
sorry

end NUMINAMATH_CALUDE_jackie_apples_l2886_288689


namespace NUMINAMATH_CALUDE_sum_of_digits_product_53_nines_53_fours_l2886_288640

def repeat_digit (d : ℕ) (n : ℕ) : ℕ :=
  d * (10^n - 1) / 9

def sum_of_digits (n : ℕ) : ℕ :=
  if n = 0 then 0 else (n % 10) + sum_of_digits (n / 10)

theorem sum_of_digits_product_53_nines_53_fours :
  sum_of_digits (repeat_digit 9 53 * repeat_digit 4 53) = 477 := by
  sorry

end NUMINAMATH_CALUDE_sum_of_digits_product_53_nines_53_fours_l2886_288640


namespace NUMINAMATH_CALUDE_or_proposition_true_l2886_288684

theorem or_proposition_true : 
  let p : Prop := 3 > 4
  let q : Prop := 3 < 4
  p ∨ q := by
  sorry

end NUMINAMATH_CALUDE_or_proposition_true_l2886_288684


namespace NUMINAMATH_CALUDE_equation_solution_implies_a_range_l2886_288616

theorem equation_solution_implies_a_range (a : ℝ) :
  (∃ x : ℝ, Real.sqrt 3 * Real.sin x + Real.cos x = 2 * a - 1) →
  -1/2 ≤ a ∧ a ≤ 3/2 := by
  sorry

end NUMINAMATH_CALUDE_equation_solution_implies_a_range_l2886_288616


namespace NUMINAMATH_CALUDE_joshua_bottle_caps_l2886_288678

theorem joshua_bottle_caps (initial : ℕ) (bought : ℕ) (total : ℕ) : 
  initial = 40 → bought = 7 → total = initial + bought → total = 47 := by
  sorry

end NUMINAMATH_CALUDE_joshua_bottle_caps_l2886_288678


namespace NUMINAMATH_CALUDE_victor_games_ratio_l2886_288642

theorem victor_games_ratio : 
  let victor_wins : ℕ := 36
  let friend_wins : ℕ := 20
  let gcd := Nat.gcd victor_wins friend_wins
  (victor_wins / gcd) = 9 ∧ (friend_wins / gcd) = 5 := by
sorry

end NUMINAMATH_CALUDE_victor_games_ratio_l2886_288642


namespace NUMINAMATH_CALUDE_imaginary_unit_multiplication_l2886_288623

theorem imaginary_unit_multiplication (i : ℂ) : i * i = -1 → i * (1 + i) = -1 + i := by
  sorry

end NUMINAMATH_CALUDE_imaginary_unit_multiplication_l2886_288623


namespace NUMINAMATH_CALUDE_range_of_cosine_squared_minus_two_sine_l2886_288655

theorem range_of_cosine_squared_minus_two_sine :
  ∀ (x : ℝ), -2 ≤ Real.cos x ^ 2 - 2 * Real.sin x ∧ 
             Real.cos x ^ 2 - 2 * Real.sin x ≤ 2 ∧
             ∃ (y z : ℝ), Real.cos y ^ 2 - 2 * Real.sin y = -2 ∧
                          Real.cos z ^ 2 - 2 * Real.sin z = 2 :=
by sorry

end NUMINAMATH_CALUDE_range_of_cosine_squared_minus_two_sine_l2886_288655


namespace NUMINAMATH_CALUDE_salary_may_value_l2886_288605

def salary_problem (jan feb mar apr may : ℕ) : Prop :=
  (jan + feb + mar + apr) / 4 = 8000 ∧
  (feb + mar + apr + may) / 4 = 8300 ∧
  jan = 5300

theorem salary_may_value :
  ∀ (jan feb mar apr may : ℕ),
    salary_problem jan feb mar apr may →
    may = 6500 :=
by
  sorry

end NUMINAMATH_CALUDE_salary_may_value_l2886_288605


namespace NUMINAMATH_CALUDE_exam_questions_count_l2886_288606

theorem exam_questions_count :
  ∀ (Q : ℕ), -- Total number of questions
  (Q > 0) →  -- Ensure positive number of questions
  (Q / 5 = Q - (4 * Q / 5)) →  -- Sylvia's incorrect answers are one-fifth
  (Q - (Q - 4) = 4) →  -- Sergio has 4 incorrect answers
  (Q - 4 = (4 * Q / 5) + 6) →  -- Sergio has 6 more correct answers than Sylvia
  Q = 50 := by
sorry

end NUMINAMATH_CALUDE_exam_questions_count_l2886_288606


namespace NUMINAMATH_CALUDE_brians_trip_distance_l2886_288681

/-- Calculates the distance traveled given car efficiency and fuel consumed -/
def distance_traveled (efficiency : ℝ) (fuel_consumed : ℝ) : ℝ :=
  efficiency * fuel_consumed

/-- Proves that given a car efficiency of 20 miles per gallon and a fuel consumption of 3 gallons, the distance traveled is 60 miles -/
theorem brians_trip_distance :
  distance_traveled 20 3 = 60 := by
  sorry

end NUMINAMATH_CALUDE_brians_trip_distance_l2886_288681


namespace NUMINAMATH_CALUDE_point_location_l2886_288613

theorem point_location (x y : ℝ) (h1 : y > 3 * x) (h2 : y > 5 - 2 * x) :
  (x > 0 ∧ y > 0) ∨ (x < 0 ∧ y > 0) :=
sorry

end NUMINAMATH_CALUDE_point_location_l2886_288613


namespace NUMINAMATH_CALUDE_coffee_package_size_l2886_288645

theorem coffee_package_size (total_coffee : ℕ) (large_package_size : ℕ) (large_package_count : ℕ) (small_package_count_diff : ℕ) :
  total_coffee = 115 →
  large_package_size = 10 →
  large_package_count = 7 →
  small_package_count_diff = 2 →
  ∃ (small_package_size : ℕ),
    small_package_size = 5 ∧
    total_coffee = (large_package_size * large_package_count) + (small_package_size * (large_package_count + small_package_count_diff)) :=
by sorry

end NUMINAMATH_CALUDE_coffee_package_size_l2886_288645


namespace NUMINAMATH_CALUDE_square_sum_zero_implies_both_zero_l2886_288604

theorem square_sum_zero_implies_both_zero (a b : ℝ) :
  a^2 + b^2 = 0 → a = 0 ∧ b = 0 := by
  sorry

end NUMINAMATH_CALUDE_square_sum_zero_implies_both_zero_l2886_288604


namespace NUMINAMATH_CALUDE_probability_two_hearts_is_one_seventeenth_l2886_288627

/-- The number of cards in a standard deck -/
def standardDeckSize : ℕ := 52

/-- The number of hearts in a standard deck -/
def heartsInDeck : ℕ := 13

/-- The number of cards drawn -/
def cardsDrawn : ℕ := 2

/-- Calculates the number of ways to choose k items from n items -/
def choose (n k : ℕ) : ℕ := Nat.choose n k

/-- The probability of drawing two hearts from a standard deck when two cards are drawn randomly -/
def probabilityTwoHearts : ℚ :=
  (choose heartsInDeck cardsDrawn : ℚ) / (choose standardDeckSize cardsDrawn : ℚ)

theorem probability_two_hearts_is_one_seventeenth :
  probabilityTwoHearts = 1 / 17 := by sorry

end NUMINAMATH_CALUDE_probability_two_hearts_is_one_seventeenth_l2886_288627


namespace NUMINAMATH_CALUDE_cricket_team_members_l2886_288669

/-- The number of members in a cricket team satisfying specific age conditions. -/
theorem cricket_team_members : ∃ (n : ℕ),
  n > 0 ∧
  let captain_age : ℕ := 26
  let keeper_age : ℕ := captain_age + 5
  let team_avg_age : ℚ := 24
  let remaining_avg_age : ℚ := team_avg_age - 1
  n * team_avg_age = (n - 2) * remaining_avg_age + (captain_age + keeper_age) ∧
  n = 11 := by
sorry

end NUMINAMATH_CALUDE_cricket_team_members_l2886_288669


namespace NUMINAMATH_CALUDE_win_sector_area_l2886_288617

theorem win_sector_area (r : ℝ) (p : ℝ) (h1 : r = 6) (h2 : p = 1/3) :
  p * (π * r^2) = 12 * π := by
  sorry

end NUMINAMATH_CALUDE_win_sector_area_l2886_288617


namespace NUMINAMATH_CALUDE_complex_equation_solution_l2886_288666

theorem complex_equation_solution :
  ∃ (x y : ℂ), (3 + 5*I)*x + (2 - I)*y = 17 - 2*I ∧ x = 1 ∧ y = 7 :=
by
  sorry

end NUMINAMATH_CALUDE_complex_equation_solution_l2886_288666


namespace NUMINAMATH_CALUDE_rectangle_area_l2886_288634

theorem rectangle_area (side : ℝ) (h1 : side > 0) :
  let perimeter := 8 * side
  let area := 4 * side^2
  perimeter = 160 → area = 1600 := by
sorry

end NUMINAMATH_CALUDE_rectangle_area_l2886_288634


namespace NUMINAMATH_CALUDE_smallest_n_same_divisors_l2886_288652

/-- The number of divisors of a natural number -/
def num_divisors (n : ℕ) : ℕ := (Nat.divisors n).card

/-- Checks if three consecutive natural numbers have the same number of divisors -/
def same_num_divisors (n : ℕ) : Prop :=
  num_divisors n = num_divisors (n + 1) ∧ num_divisors n = num_divisors (n + 2)

/-- 33 is the smallest natural number n such that n, n+1, and n+2 have the same number of divisors -/
theorem smallest_n_same_divisors :
  (∀ m : ℕ, m < 33 → ¬ same_num_divisors m) ∧ same_num_divisors 33 := by
  sorry

end NUMINAMATH_CALUDE_smallest_n_same_divisors_l2886_288652


namespace NUMINAMATH_CALUDE_negation_of_universal_proposition_l2886_288677

theorem negation_of_universal_proposition :
  (¬ ∀ x : ℝ, x^2 + 2*x + 2 > 0) ↔ (∃ x : ℝ, x^2 + 2*x + 2 ≤ 0) := by
  sorry

end NUMINAMATH_CALUDE_negation_of_universal_proposition_l2886_288677


namespace NUMINAMATH_CALUDE_total_spent_is_200_l2886_288633

/-- The amount Pete and Raymond each received in cents -/
def initial_amount : ℕ := 250

/-- The value of a nickel in cents -/
def nickel_value : ℕ := 5

/-- The value of a dime in cents -/
def dime_value : ℕ := 10

/-- The number of nickels Pete spent -/
def pete_nickels_spent : ℕ := 4

/-- The number of dimes Raymond has left -/
def raymond_dimes_left : ℕ := 7

/-- Theorem: The total amount spent by Pete and Raymond is 200 cents -/
theorem total_spent_is_200 : 
  (pete_nickels_spent * nickel_value) + 
  (initial_amount - (raymond_dimes_left * dime_value)) = 200 := by
  sorry

end NUMINAMATH_CALUDE_total_spent_is_200_l2886_288633


namespace NUMINAMATH_CALUDE_quadratic_function_sign_l2886_288679

/-- Given a quadratic function f(x) = x^2 - x + a, where f(-m) < 0,
    prove that f(m+1) is negative. -/
theorem quadratic_function_sign (a m : ℝ) : 
  let f := λ x : ℝ => x^2 - x + a
  f (-m) < 0 → f (m + 1) < 0 := by sorry

end NUMINAMATH_CALUDE_quadratic_function_sign_l2886_288679


namespace NUMINAMATH_CALUDE_rectangle_triangle_area_ratio_l2886_288636

/-- The ratio of the area of a rectangle to the area of a triangle formed with one side of the rectangle as base --/
theorem rectangle_triangle_area_ratio 
  (L W : ℝ) 
  (θ : ℝ) 
  (h_pos : L > 0 ∧ W > 0)
  (h_angle : 0 < θ ∧ θ < π / 2) :
  (L * W) / ((1/2) * L * W * Real.sin θ) = 2 / Real.sin θ :=
by sorry

end NUMINAMATH_CALUDE_rectangle_triangle_area_ratio_l2886_288636


namespace NUMINAMATH_CALUDE_tournament_prize_total_l2886_288687

def prize_money (first_place : ℕ) (interval : ℕ) : ℕ :=
  let second_place := first_place - interval
  let third_place := second_place - interval
  first_place + second_place + third_place

theorem tournament_prize_total :
  prize_money 2000 400 = 4800 :=
by sorry

end NUMINAMATH_CALUDE_tournament_prize_total_l2886_288687


namespace NUMINAMATH_CALUDE_monochromatic_rectangle_exists_l2886_288671

def Strip (n : ℤ) := {p : ℝ × ℝ | n ≤ p.1 ∧ p.1 < n + 1}

def ColoredStrip (n : ℤ) := Strip n → Bool

structure ColoredPlane :=
  (coloring : ℤ → Bool)

def hasMonochromaticRectangle (cp : ColoredPlane) (a b : ℕ) : Prop :=
  ∃ (x y : ℝ), 
    cp.coloring ⌊x⌋ = cp.coloring ⌊x + a⌋ ∧
    cp.coloring ⌊x⌋ = cp.coloring ⌊y⌋ ∧
    cp.coloring ⌊x⌋ = cp.coloring ⌊y + b⌋

theorem monochromatic_rectangle_exists (a b : ℕ) (h : a ≠ b) :
  ∀ cp : ColoredPlane, hasMonochromaticRectangle cp a b :=
sorry

end NUMINAMATH_CALUDE_monochromatic_rectangle_exists_l2886_288671


namespace NUMINAMATH_CALUDE_seating_arrangements_l2886_288641

def number_of_seats : ℕ := 9
def number_of_families : ℕ := 3
def members_per_family : ℕ := 3

theorem seating_arrangements :
  (number_of_seats = number_of_families * members_per_family) →
  (number_of_different_seating_arrangements : ℕ) = (Nat.factorial number_of_families)^(number_of_families + 1) :=
by sorry

end NUMINAMATH_CALUDE_seating_arrangements_l2886_288641


namespace NUMINAMATH_CALUDE_total_students_is_63_l2886_288698

/-- The number of tables in the classroom -/
def num_tables : ℕ := 6

/-- The number of students currently sitting at each table -/
def students_per_table : ℕ := 3

/-- The number of girls who went to the bathroom -/
def girls_in_bathroom : ℕ := 4

/-- The number of students in new group 1 -/
def new_group1 : ℕ := 4

/-- The number of students in new group 2 -/
def new_group2 : ℕ := 5

/-- The number of students in new group 3 -/
def new_group3 : ℕ := 6

/-- The number of foreign exchange students from Germany -/
def german_students : ℕ := 2

/-- The number of foreign exchange students from France -/
def french_students : ℕ := 4

/-- The number of foreign exchange students from Norway -/
def norwegian_students : ℕ := 3

/-- The number of foreign exchange students from Italy -/
def italian_students : ℕ := 1

/-- The total number of students supposed to be in the class -/
def total_students : ℕ := 
  num_tables * students_per_table + 
  girls_in_bathroom + 
  4 * girls_in_bathroom + 
  new_group1 + new_group2 + new_group3 + 
  german_students + french_students + norwegian_students + italian_students

theorem total_students_is_63 : total_students = 63 := by
  sorry

end NUMINAMATH_CALUDE_total_students_is_63_l2886_288698


namespace NUMINAMATH_CALUDE_min_value_xy_l2886_288628

theorem min_value_xy (x y : ℝ) (h1 : x * y + 9 = 6 * x + 2 * y) (h2 : x > 2) :
  ∃ (min_xy : ℝ), min_xy = 27 ∧ ∀ (x' y' : ℝ), x' * y' + 9 = 6 * x' + 2 * y' → x' > 2 → x' * y' ≥ min_xy := by
  sorry

end NUMINAMATH_CALUDE_min_value_xy_l2886_288628


namespace NUMINAMATH_CALUDE_fathers_age_problem_l2886_288625

/-- Father's age problem -/
theorem fathers_age_problem (F C1 C2 : ℕ) : 
  F = 3 * (C1 + C2) →  -- Father's age is three times the sum of children's ages
  F + 5 = 2 * (C1 + 5 + C2 + 5) →  -- After 5 years, father's age will be twice the sum of children's ages
  F = 45 :=  -- Father's current age is 45
by sorry

end NUMINAMATH_CALUDE_fathers_age_problem_l2886_288625


namespace NUMINAMATH_CALUDE_sin_15_105_product_l2886_288668

theorem sin_15_105_product : 4 * Real.sin (15 * π / 180) * Real.sin (105 * π / 180) = 1 := by
  sorry

end NUMINAMATH_CALUDE_sin_15_105_product_l2886_288668


namespace NUMINAMATH_CALUDE_max_value_of_f_l2886_288629

/-- The quadratic function f(z) = -9z^2 + 27z + 3 -/
def f (z : ℝ) : ℝ := -9 * z^2 + 27 * z + 3

theorem max_value_of_f :
  ∃ (max : ℝ), max = 117/4 ∧ ∀ (z : ℝ), f z ≤ max :=
sorry

end NUMINAMATH_CALUDE_max_value_of_f_l2886_288629


namespace NUMINAMATH_CALUDE_max_value_of_f_l2886_288611

open Real

noncomputable def f (x : ℝ) : ℝ := x / (exp x)

theorem max_value_of_f :
  ∃ (c : ℝ), c ∈ Set.Icc 0 2 ∧ 
  (∀ x ∈ Set.Icc 0 2, f x ≤ f c) ∧
  f c = 1 / exp 1 := by
  sorry

end NUMINAMATH_CALUDE_max_value_of_f_l2886_288611


namespace NUMINAMATH_CALUDE_round_table_seat_count_l2886_288643

/-- Represents a circular seating arrangement -/
structure CircularTable where
  seatCount : ℕ
  kingArthurSeat : ℕ
  lancelotSeat : ℕ

/-- Checks if two seats are directly opposite in a circular arrangement -/
def areOpposite (table : CircularTable) : Prop :=
  (table.lancelotSeat - table.kingArthurSeat) % table.seatCount = table.seatCount / 2

/-- The theorem to be proved -/
theorem round_table_seat_count (table : CircularTable) :
  table.kingArthurSeat = 10 ∧ table.lancelotSeat = 29 ∧ areOpposite table →
  table.seatCount = 38 := by
  sorry


end NUMINAMATH_CALUDE_round_table_seat_count_l2886_288643


namespace NUMINAMATH_CALUDE_students_who_left_l2886_288696

/-- Proves the number of students who left given initial, new, and final student counts -/
theorem students_who_left (initial : ℕ) (new : ℕ) (final : ℕ) 
  (h_initial : initial = 10)
  (h_new : new = 42)
  (h_final : final = 48) :
  initial + new - final = 4 := by
  sorry

end NUMINAMATH_CALUDE_students_who_left_l2886_288696


namespace NUMINAMATH_CALUDE_conference_attendees_l2886_288649

theorem conference_attendees (total : ℕ) (first_known : ℕ) : 
  total = 47 → first_known = 16 → 
  ∃ (women men : ℕ), 
    women + men = total ∧ 
    men = first_known + (women - 1) ∧
    women = 16 ∧ 
    men = 31 := by
  sorry

end NUMINAMATH_CALUDE_conference_attendees_l2886_288649


namespace NUMINAMATH_CALUDE_not_both_squares_l2886_288608

theorem not_both_squares (a b : ℤ) : ¬(∃ (c d : ℤ), c > 0 ∧ d > 0 ∧ a * (a + 4) = c^2 ∧ b * (b + 4) = d^2) := by
  sorry

end NUMINAMATH_CALUDE_not_both_squares_l2886_288608


namespace NUMINAMATH_CALUDE_soda_discount_percentage_l2886_288626

theorem soda_discount_percentage (regular_price : ℝ) (discounted_total : ℝ) (cans : ℕ) :
  regular_price = 0.15 →
  discounted_total = 10.125 →
  cans = 75 →
  ∃ (discount : ℝ), 
    discount = 0.1 ∧
    cans * regular_price * (1 - discount) = discounted_total :=
by sorry

end NUMINAMATH_CALUDE_soda_discount_percentage_l2886_288626


namespace NUMINAMATH_CALUDE_function_property_l2886_288665

noncomputable section

def f (x : ℝ) : ℝ := Real.log ((1 - x) / (1 + x))

def domain (x : ℝ) : Prop := -1 < x ∧ x < 1

theorem function_property (f : ℝ → ℝ) (h : ∀ x y, domain x → domain y → f x + f y = f ((x + y) / (1 + x * y))) :
  ∀ x, domain x → f x = Real.log ((1 - x) / (1 + x)) →
  (∀ x, domain x → f (-x) = -f x) ∧
  ∃ a b, domain a ∧ domain b ∧ 
    f ((a + b) / (1 + a * b)) = 1 ∧ 
    f ((a - b) / (1 - a * b)) = 2 ∧
    f a = 3/2 ∧ f b = -1/2 :=
by sorry

end NUMINAMATH_CALUDE_function_property_l2886_288665


namespace NUMINAMATH_CALUDE_relationship_abc_l2886_288661

theorem relationship_abc : 
  let a : ℝ := Real.sqrt 2
  let b : ℝ := Real.sqrt 7 - Real.sqrt 3
  let c : ℝ := Real.sqrt 6 - Real.sqrt 2
  a > c ∧ c > b := by sorry

end NUMINAMATH_CALUDE_relationship_abc_l2886_288661


namespace NUMINAMATH_CALUDE_second_number_value_l2886_288673

theorem second_number_value (x y z : ℚ) 
  (sum_eq : x + y + z = 120)
  (ratio_xy : x / y = 3 / 4)
  (ratio_yz : y / z = 4 / 7) :
  y = 240 / 7 := by
sorry

end NUMINAMATH_CALUDE_second_number_value_l2886_288673


namespace NUMINAMATH_CALUDE_puss_in_boots_pikes_l2886_288691

theorem puss_in_boots_pikes (x : ℚ) : x = 4 + (1/2) * x → x = 8 := by
  sorry

end NUMINAMATH_CALUDE_puss_in_boots_pikes_l2886_288691


namespace NUMINAMATH_CALUDE_abc_sum_sqrt_l2886_288618

theorem abc_sum_sqrt (a b c : ℝ) 
  (h1 : b + c = 20) 
  (h2 : c + a = 22) 
  (h3 : a + b = 24) : 
  Real.sqrt (2 * a * b * c * (a + b + c)) = 1287 := by
  sorry

end NUMINAMATH_CALUDE_abc_sum_sqrt_l2886_288618


namespace NUMINAMATH_CALUDE_rationalize_denominator_l2886_288667

theorem rationalize_denominator :
  ∃ (A B C : ℤ),
    (2 + Real.sqrt 5) / (2 - Real.sqrt 5) = A + B * Real.sqrt C ∧
    A = -9 ∧
    B = -4 ∧
    C = 5 := by
  sorry

end NUMINAMATH_CALUDE_rationalize_denominator_l2886_288667


namespace NUMINAMATH_CALUDE_non_degenerate_ellipse_condition_l2886_288664

def is_non_degenerate_ellipse (k : ℝ) : Prop :=
  ∀ x y : ℝ, 3 * x^2 + 9 * y^2 - 12 * x + 18 * y = k → k > -21

theorem non_degenerate_ellipse_condition :
  ∀ k : ℝ, is_non_degenerate_ellipse k ↔ k > -21 := by sorry

end NUMINAMATH_CALUDE_non_degenerate_ellipse_condition_l2886_288664
