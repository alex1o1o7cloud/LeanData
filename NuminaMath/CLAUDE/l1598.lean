import Mathlib

namespace NUMINAMATH_CALUDE_paint_cost_per_square_meter_l1598_159817

/-- Calculates the paint cost per square meter for a mural --/
theorem paint_cost_per_square_meter
  (mural_length : ℝ)
  (mural_width : ℝ)
  (painting_rate : ℝ)
  (labor_charge : ℝ)
  (total_cost : ℝ)
  (h1 : mural_length = 6)
  (h2 : mural_width = 3)
  (h3 : painting_rate = 1.5)
  (h4 : labor_charge = 10)
  (h5 : total_cost = 192) :
  (total_cost - (mural_length * mural_width / painting_rate) * labor_charge) / (mural_length * mural_width) = 4 :=
by sorry

end NUMINAMATH_CALUDE_paint_cost_per_square_meter_l1598_159817


namespace NUMINAMATH_CALUDE_fortran_program_141_l1598_159843

/-- Calculates the product of digits of a natural number -/
def digitProduct (n : ℕ) : ℕ := sorry

/-- Generates the next number in the sequence -/
def nextNumber (n : ℕ) : ℕ := sorry

/-- Represents the sequence of numbers generated by the process -/
def numberSequence (start : ℕ) : ℕ → ℕ := sorry

theorem fortran_program_141 :
  ∀ k : ℕ, k > 0 → numberSequence 141 k ≠ 141 := by sorry

end NUMINAMATH_CALUDE_fortran_program_141_l1598_159843


namespace NUMINAMATH_CALUDE_watermelon_seed_requirement_l1598_159880

/-- Represents the minimum number of watermelon seeds required -/
def min_seeds : ℕ := 10041

/-- Represents the number of watermelons to be sold each year -/
def watermelons_to_sell : ℕ := 10000

/-- Represents the number of seeds produced by each watermelon -/
def seeds_per_watermelon : ℕ := 250

theorem watermelon_seed_requirement (S : ℕ) :
  S ≥ min_seeds →
  ∃ (x : ℕ), S = watermelons_to_sell + x ∧
             seeds_per_watermelon * x ≥ S ∧
             ∀ (S' : ℕ), S' < S →
               ¬∃ (x' : ℕ), S' = watermelons_to_sell + x' ∧
                             seeds_per_watermelon * x' ≥ S' :=
by sorry

#check watermelon_seed_requirement

end NUMINAMATH_CALUDE_watermelon_seed_requirement_l1598_159880


namespace NUMINAMATH_CALUDE_last_ball_black_prob_specific_box_l1598_159846

/-- A box containing black and white balls -/
structure Box where
  black : ℕ
  white : ℕ

/-- The probability of the last ball being black in a drawing process -/
def last_ball_black_prob (b : Box) : ℚ :=
  b.white / (b.black + b.white)

/-- The theorem stating the probability of the last ball being black for a specific box -/
theorem last_ball_black_prob_specific_box :
  let b : Box := { black := 3, white := 4 }
  last_ball_black_prob b = 4/7 := by
  sorry

#check last_ball_black_prob_specific_box

end NUMINAMATH_CALUDE_last_ball_black_prob_specific_box_l1598_159846


namespace NUMINAMATH_CALUDE_tangent_line_y_intercept_l1598_159888

/-- The y-coordinate of the intersection point between the tangent line
    to the curve y = x^3 + 11 at point P(1, 12) and the y-axis is 9. -/
theorem tangent_line_y_intercept : 
  let f (x : ℝ) := x^3 + 11
  let P : ℝ × ℝ := (1, 12)
  let m : ℝ := deriv f 1
  let tangent_line (x : ℝ) := m * (x - P.1) + P.2
  tangent_line 0 = 9 := by sorry

end NUMINAMATH_CALUDE_tangent_line_y_intercept_l1598_159888


namespace NUMINAMATH_CALUDE_intersection_value_l1598_159876

/-- The value of k for which the lines -3x + y = k and 2x + y = 8 intersect when x = -6 -/
theorem intersection_value : ∃ k : ℝ, 
  (∀ x y : ℝ, -3*x + y = k ∧ 2*x + y = 8 → x = -6) → k = 38 := by
  sorry

end NUMINAMATH_CALUDE_intersection_value_l1598_159876


namespace NUMINAMATH_CALUDE_range_of_a_theorem_l1598_159845

-- Define propositions p and q
def p (a : ℝ) : Prop := ∀ x : ℝ, 0 < a * x^2 - x + 1/16 * a

def q (a : ℝ) : Prop := ∀ x y : ℝ, x < y → (a - 3/2)^y < (a - 3/2)^x

-- Define the range of a
def range_of_a (a : ℝ) : Prop := (3/2 < a ∧ a ≤ 2) ∨ a ≥ 5/2

-- State the theorem
theorem range_of_a_theorem (a : ℝ) :
  ((p a ∨ q a) ∧ ¬(p a ∧ q a)) → range_of_a a :=
by sorry

end NUMINAMATH_CALUDE_range_of_a_theorem_l1598_159845


namespace NUMINAMATH_CALUDE_sally_buttons_theorem_l1598_159800

/-- The number of buttons Sally needs to sew all the shirts -/
def total_buttons : ℕ :=
  let monday_shirts := 4
  let tuesday_shirts := 3
  let wednesday_shirts := 2
  let buttons_per_shirt := 5
  let total_shirts := monday_shirts + tuesday_shirts + wednesday_shirts
  total_shirts * buttons_per_shirt

theorem sally_buttons_theorem : total_buttons = 45 := by
  sorry

end NUMINAMATH_CALUDE_sally_buttons_theorem_l1598_159800


namespace NUMINAMATH_CALUDE_nine_sided_polygon_diagonals_l1598_159842

/-- The number of diagonals in a regular polygon with n sides -/
def num_diagonals (n : ℕ) : ℕ := n.choose 2 - n

/-- Theorem: A regular nine-sided polygon contains 27 diagonals -/
theorem nine_sided_polygon_diagonals : num_diagonals 9 = 27 := by
  sorry

end NUMINAMATH_CALUDE_nine_sided_polygon_diagonals_l1598_159842


namespace NUMINAMATH_CALUDE_age_sum_proof_l1598_159820

theorem age_sum_proof (uncle_age : ℕ) (yuna_eunji_diff : ℕ) (uncle_eunji_diff : ℕ) 
  (h1 : uncle_age = 41)
  (h2 : yuna_eunji_diff = 3)
  (h3 : uncle_eunji_diff = 25) :
  uncle_age - uncle_eunji_diff + (uncle_age - uncle_eunji_diff + yuna_eunji_diff) = 35 := by
  sorry

end NUMINAMATH_CALUDE_age_sum_proof_l1598_159820


namespace NUMINAMATH_CALUDE_roses_stolen_l1598_159806

/-- Given the initial number of roses, number of people, and roses per person,
    prove that the number of roses stolen is equal to the initial number of roses
    minus the product of the number of people and roses per person. -/
theorem roses_stolen (initial_roses : ℕ) (num_people : ℕ) (roses_per_person : ℕ) :
  initial_roses - (num_people * roses_per_person) =
  initial_roses - num_people * roses_per_person :=
by sorry

end NUMINAMATH_CALUDE_roses_stolen_l1598_159806


namespace NUMINAMATH_CALUDE_inequality_proof_l1598_159859

theorem inequality_proof (a b c : ℝ) (h : a * b < 0) :
  a^2 + b^2 + c^2 > 2*a*b + 2*b*c + 2*c*a := by
sorry

end NUMINAMATH_CALUDE_inequality_proof_l1598_159859


namespace NUMINAMATH_CALUDE_rectangle_center_line_slope_l1598_159860

/-- Given a rectangle with vertices (1, 0), (5, 0), (1, 2), and (5, 2),
    the slope of the line passing through the origin and the center of the rectangle is 1/3 -/
theorem rectangle_center_line_slope :
  let vertices : List (ℝ × ℝ) := [(1, 0), (5, 0), (1, 2), (5, 2)]
  let center : ℝ × ℝ := (
    (vertices.map Prod.fst).sum / vertices.length,
    (vertices.map Prod.snd).sum / vertices.length
  )
  let slope : ℝ := (center.2 - 0) / (center.1 - 0)
  slope = 1 / 3 := by
sorry

end NUMINAMATH_CALUDE_rectangle_center_line_slope_l1598_159860


namespace NUMINAMATH_CALUDE_equation_B_not_symmetric_l1598_159810

-- Define the equations
def equation_A (x y : ℝ) : Prop := x^2 - x + y^2 = 1
def equation_B (x y : ℝ) : Prop := x^2 * y + x * y^2 = 1
def equation_C (x y : ℝ) : Prop := 2 * x^2 - y^2 = 1
def equation_D (x y : ℝ) : Prop := x + y^2 = -1

-- Define symmetry about x-axis
def symmetric_about_x_axis (f : ℝ → ℝ → Prop) : Prop :=
  ∀ x y, f x y ↔ f x (-y)

-- Theorem statement
theorem equation_B_not_symmetric :
  ¬(symmetric_about_x_axis equation_B) ∧
  (symmetric_about_x_axis equation_A) ∧
  (symmetric_about_x_axis equation_C) ∧
  (symmetric_about_x_axis equation_D) :=
sorry

end NUMINAMATH_CALUDE_equation_B_not_symmetric_l1598_159810


namespace NUMINAMATH_CALUDE_min_value_3a_plus_1_l1598_159826

theorem min_value_3a_plus_1 (a : ℝ) (h : 8 * a^2 + 6 * a + 2 = 2) :
  ∃ (m : ℝ), m = -5/4 ∧ ∀ x, (8 * x^2 + 6 * x + 2 = 2) → (3 * x + 1 ≥ m) :=
sorry

end NUMINAMATH_CALUDE_min_value_3a_plus_1_l1598_159826


namespace NUMINAMATH_CALUDE_normal_distribution_std_dev_l1598_159879

/-- For a normal distribution with mean 14.5, if the value that is exactly 2 standard deviations
    less than the mean is 11.5, then the standard deviation is 1.5. -/
theorem normal_distribution_std_dev (μ σ : ℝ) :
  μ = 14.5 →
  μ - 2 * σ = 11.5 →
  σ = 1.5 := by
sorry

end NUMINAMATH_CALUDE_normal_distribution_std_dev_l1598_159879


namespace NUMINAMATH_CALUDE_smallest_x_value_l1598_159824

theorem smallest_x_value : ∃ x : ℝ, 
  (∀ y : ℝ, 3 * y^2 + 36 * y - 135 = 2 * y * (y + 16) → x ≤ y) ∧
  (3 * x^2 + 36 * x - 135 = 2 * x * (x + 16)) ∧
  x = -15 := by
  sorry

end NUMINAMATH_CALUDE_smallest_x_value_l1598_159824


namespace NUMINAMATH_CALUDE_cylinder_radius_problem_l1598_159886

theorem cylinder_radius_problem (r : ℝ) (h : ℝ) : 
  h = 3 → 
  π * (r + 5)^2 * h = π * r^2 * (h + 5) → 
  r = 3 + 2 * Real.sqrt 6 :=
by sorry

end NUMINAMATH_CALUDE_cylinder_radius_problem_l1598_159886


namespace NUMINAMATH_CALUDE_sin_theta_value_l1598_159835

theorem sin_theta_value (θ : Real) (h : Real.cos (π / 4 - θ / 2) = 2 / 3) : 
  Real.sin θ = -1 / 9 := by
  sorry

end NUMINAMATH_CALUDE_sin_theta_value_l1598_159835


namespace NUMINAMATH_CALUDE_satisfying_digits_characterization_l1598_159881

/-- A digit is a natural number less than 10. -/
def Digit : Type := { d : ℕ // d < 10 }

/-- The set of digits that satisfy the given property. -/
def SatisfyingDigits : Set Digit :=
  { z : Digit | ∀ k : ℕ, k ≥ 1 → ∃ n : ℕ, n ≥ 1 ∧ n^9 % 10^k = z.val^k % 10^k }

/-- The theorem stating that the satisfying digits are exactly 0, 1, 5, and 6. -/
theorem satisfying_digits_characterization :
  SatisfyingDigits = {⟨0, by norm_num⟩, ⟨1, by norm_num⟩, ⟨5, by norm_num⟩, ⟨6, by norm_num⟩} :=
by sorry

end NUMINAMATH_CALUDE_satisfying_digits_characterization_l1598_159881


namespace NUMINAMATH_CALUDE_sufficient_condition_range_l1598_159887

theorem sufficient_condition_range (p : ℝ) : 
  (∀ x : ℝ, 4*x + p < 0 → x^2 - x - 2 > 0) ∧ 
  (∃ x : ℝ, x^2 - x - 2 > 0 ∧ 4*x + p ≥ 0) →
  p ≥ 4 :=
by sorry

end NUMINAMATH_CALUDE_sufficient_condition_range_l1598_159887


namespace NUMINAMATH_CALUDE_intersection_of_A_and_B_l1598_159849

-- Define the sets A and B
def A : Set (ℝ × ℝ) := {p : ℝ × ℝ | p.2 = 3^p.1}
def B : Set (ℝ × ℝ) := {p : ℝ × ℝ | p.2 = 2^(-p.1)}

-- State the theorem
theorem intersection_of_A_and_B : A ∩ B = {(0, 1)} := by
  sorry

end NUMINAMATH_CALUDE_intersection_of_A_and_B_l1598_159849


namespace NUMINAMATH_CALUDE_system_of_equations_solution_l1598_159829

theorem system_of_equations_solution (x y z : ℝ) 
  (hx : x > 0) (hy : y > 0) (hz : z > 0)
  (eq1 : x^2 + x*y + y^2 = 75)
  (eq2 : y^2 + y*z + z^2 = 49)
  (eq3 : z^2 + x*z + x^2 = 124) :
  x*y + y*z + x*z = 70 := by
  sorry

end NUMINAMATH_CALUDE_system_of_equations_solution_l1598_159829


namespace NUMINAMATH_CALUDE_least_four_digit_multiple_l1598_159868

theorem least_four_digit_multiple : ∃ n : ℕ,
  (n ≥ 1000 ∧ n < 10000) ∧
  n % 15 = 0 ∧ n % 25 = 0 ∧ n % 40 = 0 ∧ n % 75 = 0 ∧
  (∀ m : ℕ, m ≥ 1000 ∧ m < 10000 ∧ m % 15 = 0 ∧ m % 25 = 0 ∧ m % 40 = 0 ∧ m % 75 = 0 → m ≥ n) ∧
  n = 1200 :=
by sorry


end NUMINAMATH_CALUDE_least_four_digit_multiple_l1598_159868


namespace NUMINAMATH_CALUDE_probability_at_least_one_correct_william_guessing_probability_l1598_159848

theorem probability_at_least_one_correct (n : Nat) (k : Nat) :
  (n ≥ 1) →
  (k ≥ 1) →
  (1 : ℚ) - (((k - 1 : ℚ) / k) ^ n) = (k ^ n - (k - 1) ^ n) / (k ^ n) :=
by sorry

theorem william_guessing_probability :
  let n : Nat := 4  -- number of questions William guesses
  let k : Nat := 5  -- number of answer choices per question
  (1 : ℚ) - (((k - 1 : ℚ) / k) ^ n) = 369 / 625 :=
by sorry

end NUMINAMATH_CALUDE_probability_at_least_one_correct_william_guessing_probability_l1598_159848


namespace NUMINAMATH_CALUDE_factorization_equality_l1598_159839

theorem factorization_equality (m n : ℝ) : 8*m*n - 2*m*n^3 = 2*m*n*(2+n)*(2-n) := by sorry

end NUMINAMATH_CALUDE_factorization_equality_l1598_159839


namespace NUMINAMATH_CALUDE_cost_for_23_days_l1598_159872

/-- Calculates the cost of staying in a student youth hostel for a given number of days. -/
def hostel_cost (days : ℕ) : ℚ :=
  let first_week_cost := 7 * 18
  let remaining_days := days - 7
  let additional_cost := remaining_days * 14
  first_week_cost + additional_cost

/-- Theorem stating that the cost for a 23-day stay is $350.00 -/
theorem cost_for_23_days : hostel_cost 23 = 350 := by
  sorry

end NUMINAMATH_CALUDE_cost_for_23_days_l1598_159872


namespace NUMINAMATH_CALUDE_probability_of_pair_l1598_159847

def deck_size : ℕ := 60
def cards_per_number : ℕ := 6
def numbers_in_deck : ℕ := 10
def pairs_removed : ℕ := 3

def remaining_cards : ℕ := deck_size - 2 * pairs_removed

def ways_to_choose_two : ℕ := remaining_cards.choose 2

def full_ranks : ℕ := numbers_in_deck - pairs_removed
def cards_in_full_rank : ℕ := cards_per_number

def pairs_from_full_ranks : ℕ := full_ranks * cards_in_full_rank.choose 2

def affected_ranks : ℕ := pairs_removed
def cards_in_affected_rank : ℕ := cards_per_number - 2

def pairs_from_affected_ranks : ℕ := affected_ranks * cards_in_affected_rank.choose 2

def total_pairs : ℕ := pairs_from_full_ranks + pairs_from_affected_ranks

theorem probability_of_pair (h : ways_to_choose_two = 1431 ∧ total_pairs = 123) :
  (total_pairs : ℚ) / ways_to_choose_two = 123 / 1431 :=
sorry

end NUMINAMATH_CALUDE_probability_of_pair_l1598_159847


namespace NUMINAMATH_CALUDE_max_value_quadratic_expression_l1598_159811

theorem max_value_quadratic_expression (x y : ℝ) (hx : x > 0) (hy : y > 0) 
  (h : x^2 - 2*x*y + 3*y^2 = 9) : 
  ∀ a b : ℝ, a > 0 → b > 0 → a^2 - 2*a*b + 3*b^2 = 9 → 
  x^2 + 2*x*y + 3*y^2 ≤ 18 + 9*Real.sqrt 3 ∧ 
  ∃ c d : ℝ, c > 0 ∧ d > 0 ∧ c^2 - 2*c*d + 3*d^2 = 9 ∧ 
  c^2 + 2*c*d + 3*d^2 = 18 + 9*Real.sqrt 3 :=
sorry

end NUMINAMATH_CALUDE_max_value_quadratic_expression_l1598_159811


namespace NUMINAMATH_CALUDE_part1_solution_set_part2_m_range_l1598_159889

-- Define the function f
def f (m : ℝ) (x : ℝ) : ℝ := |x + m| + |2 * x - 1|

-- Part 1
theorem part1_solution_set :
  {x : ℝ | f 1 x ≥ 3} = {x : ℝ | x ≤ -1 ∨ x ≥ 1} :=
sorry

-- Part 2
theorem part2_m_range (m : ℝ) (hm : m > 0) :
  (∀ x ∈ Set.Icc m (2 * m^2), (1/2) * f m x ≤ |x + 1|) →
  1/2 < m ∧ m ≤ 1 :=
sorry

end NUMINAMATH_CALUDE_part1_solution_set_part2_m_range_l1598_159889


namespace NUMINAMATH_CALUDE_farmers_market_cauliflower_sales_l1598_159801

/-- Represents the farmers' market sales problem -/
structure FarmersMarket where
  total_earnings : ℕ
  broccoli_price : ℕ
  carrot_price : ℕ
  spinach_price : ℕ
  cauliflower_price : ℕ
  tomato_price : ℕ
  broccoli_sold : ℕ
  spinach_weight : ℕ

/-- The theorem representing the farmers' market problem -/
theorem farmers_market_cauliflower_sales
  (market : FarmersMarket)
  (h1 : market.total_earnings = 520)
  (h2 : market.broccoli_price = 3)
  (h3 : market.carrot_price = 2)
  (h4 : market.spinach_price = 4)
  (h5 : market.cauliflower_price = 5)
  (h6 : market.tomato_price = 1)
  (h7 : market.broccoli_sold = 19)
  (h8 : market.spinach_weight * 2 * market.carrot_price = market.spinach_weight * market.spinach_price + 16)
  (h9 : market.broccoli_sold * market.broccoli_price + market.spinach_weight * market.spinach_price =
        (market.broccoli_sold * market.broccoli_price + market.spinach_weight * market.spinach_price) * market.tomato_price) :
  market.total_earnings - (market.broccoli_sold * market.broccoli_price +
                           market.spinach_weight * 2 * market.carrot_price +
                           market.spinach_weight * market.spinach_price +
                           (market.broccoli_sold * market.broccoli_price + market.spinach_weight * market.spinach_price)) = 310 := by
  sorry


end NUMINAMATH_CALUDE_farmers_market_cauliflower_sales_l1598_159801


namespace NUMINAMATH_CALUDE_M_subset_N_l1598_159827

def M : Set ℝ := { x | ∃ k : ℤ, x = (k * Real.pi / 2) + (Real.pi / 4) }

def N : Set ℝ := { x | ∃ k : ℤ, x = (k * Real.pi / 4) + (Real.pi / 2) }

theorem M_subset_N : M ⊆ N := by
  sorry

end NUMINAMATH_CALUDE_M_subset_N_l1598_159827


namespace NUMINAMATH_CALUDE_no_extrema_in_interval_l1598_159815

-- Define the function f(x) = x³ - 3x
def f (x : ℝ) : ℝ := x^3 - 3*x

-- Define the open interval (-1, 1)
def openInterval : Set ℝ := {x | -1 < x ∧ x < 1}

-- Theorem statement
theorem no_extrema_in_interval :
  ¬∃ (max_val min_val : ℝ), 
    (∀ x ∈ openInterval, f x ≤ max_val) ∧
    (∃ x_max ∈ openInterval, f x_max = max_val) ∧
    (∀ x ∈ openInterval, min_val ≤ f x) ∧
    (∃ x_min ∈ openInterval, f x_min = min_val) :=
sorry

end NUMINAMATH_CALUDE_no_extrema_in_interval_l1598_159815


namespace NUMINAMATH_CALUDE_noah_doctor_visits_l1598_159896

/-- The number of holidays Noah took in a year -/
def total_holidays : ℕ := 36

/-- The number of months in a year -/
def months_in_year : ℕ := 12

/-- The number of times Noah visits the doctor each month -/
def doctor_visits_per_month : ℕ := total_holidays / months_in_year

theorem noah_doctor_visits :
  doctor_visits_per_month = 3 :=
sorry

end NUMINAMATH_CALUDE_noah_doctor_visits_l1598_159896


namespace NUMINAMATH_CALUDE_f_difference_l1598_159884

theorem f_difference (r : ℝ) : 
  let f : ℝ → ℝ := λ n => (1/4) * n * (n+1) * (n+2) * (n+3)
  f r - f (r-1) = r * (r+1) * (r+2) := by
sorry

end NUMINAMATH_CALUDE_f_difference_l1598_159884


namespace NUMINAMATH_CALUDE_pencils_per_row_l1598_159890

theorem pencils_per_row (packs : ℕ) (pencils_per_pack : ℕ) (rows : ℕ) 
  (h1 : packs = 35) 
  (h2 : pencils_per_pack = 4) 
  (h3 : rows = 70) : 
  (packs * pencils_per_pack) / rows = 2 := by
  sorry

end NUMINAMATH_CALUDE_pencils_per_row_l1598_159890


namespace NUMINAMATH_CALUDE_exponential_equation_solution_l1598_159813

theorem exponential_equation_solution :
  ∃ x : ℝ, (10 : ℝ) ^ (x + 4) = 100 ^ x ∧ x = 4 :=
by sorry

end NUMINAMATH_CALUDE_exponential_equation_solution_l1598_159813


namespace NUMINAMATH_CALUDE_purely_imaginary_fraction_l1598_159865

theorem purely_imaginary_fraction (a : ℝ) : 
  (Complex.I * ((a - Complex.I) / (1 + Complex.I))).re = ((a - Complex.I) / (1 + Complex.I)).re → a = 1 := by
  sorry

end NUMINAMATH_CALUDE_purely_imaginary_fraction_l1598_159865


namespace NUMINAMATH_CALUDE_power_of_105_l1598_159898

theorem power_of_105 (n : ℕ) : 
  (105 : ℕ) ^ n = 21 * 25 * 45 * 49 ↔ n ≥ 3 :=
sorry

end NUMINAMATH_CALUDE_power_of_105_l1598_159898


namespace NUMINAMATH_CALUDE_correct_calculation_result_l1598_159831

theorem correct_calculation_result (x : ℝ) (h : 4 * x = 52) : 20 - x = 7 := by
  sorry

end NUMINAMATH_CALUDE_correct_calculation_result_l1598_159831


namespace NUMINAMATH_CALUDE_texas_california_plates_equal_l1598_159878

/-- The number of letters in the alphabet -/
def num_letters : ℕ := 26

/-- The number of digits -/
def num_digits : ℕ := 10

/-- The number of possible Texas license plates -/
def texas_plates : ℕ := num_letters^3 * num_digits^4

/-- The number of possible California license plates -/
def california_plates : ℕ := num_digits * num_letters^3 * num_digits^3

/-- Theorem stating that Texas and California can issue the same number of license plates -/
theorem texas_california_plates_equal : texas_plates = california_plates := by
  sorry

end NUMINAMATH_CALUDE_texas_california_plates_equal_l1598_159878


namespace NUMINAMATH_CALUDE_octal_subtraction_l1598_159862

/-- Converts a base-8 number to base-10 --/
def octalToDecimal (n : ℕ) : ℕ :=
  let hundreds := n / 100
  let tens := (n / 10) % 10
  let ones := n % 10
  hundreds * 8^2 + tens * 8^1 + ones * 8^0

/-- Converts a base-10 number to base-8 --/
def decimalToOctal (n : ℕ) : ℕ :=
  let tens := n / 8
  let ones := n % 8
  tens * 10 + ones

/-- Proves that 346₈ - 255₈ = 71₈ --/
theorem octal_subtraction : decimalToOctal (octalToDecimal 346 - octalToDecimal 255) = 71 := by
  sorry


end NUMINAMATH_CALUDE_octal_subtraction_l1598_159862


namespace NUMINAMATH_CALUDE_no_basic_operation_satisfies_equation_l1598_159877

def basic_operations := [Int.add, Int.sub, Int.mul, Int.div]

theorem no_basic_operation_satisfies_equation :
  ∀ op ∈ basic_operations, (op 8 2) - 5 + 7 - (3^2 - 4) ≠ 6 := by
  sorry

end NUMINAMATH_CALUDE_no_basic_operation_satisfies_equation_l1598_159877


namespace NUMINAMATH_CALUDE_consecutive_integer_averages_l1598_159885

theorem consecutive_integer_averages (a : ℤ) (h : a + 1 > 0) : 
  let first_set := [a + 1, a + 2, a + 3]
  let first_avg := (a + 1 + a + 2 + a + 3) / 3
  let second_set := [first_avg, first_avg + 1, first_avg + 2]
  (second_set.sum / 3 : ℚ) = a + 3 := by sorry

end NUMINAMATH_CALUDE_consecutive_integer_averages_l1598_159885


namespace NUMINAMATH_CALUDE_complex_equation_solution_l1598_159812

def i : ℂ := Complex.I

theorem complex_equation_solution (x : ℝ) (h : (1 - 2*i) * (x + i) = 4 - 3*i) : x = 2 := by
  sorry

end NUMINAMATH_CALUDE_complex_equation_solution_l1598_159812


namespace NUMINAMATH_CALUDE_max_consecutive_sum_l1598_159891

/-- The sum of consecutive integers from a to (a + n - 1) -/
def sumConsecutive (a : ℤ) (n : ℕ) : ℤ := n * (2 * a + n - 1) / 2

/-- The target sum we want to achieve -/
def targetSum : ℤ := 2015

/-- Theorem stating that the maximum number of consecutive integers summing to 2015 is 4030 -/
theorem max_consecutive_sum :
  (∃ a : ℤ, sumConsecutive a 4030 = targetSum) ∧
  (∀ n : ℕ, n > 4030 → ∀ a : ℤ, sumConsecutive a n ≠ targetSum) :=
sorry

end NUMINAMATH_CALUDE_max_consecutive_sum_l1598_159891


namespace NUMINAMATH_CALUDE_no_nonzero_real_solutions_l1598_159828

theorem no_nonzero_real_solutions :
  ¬∃ (a b : ℝ), a ≠ 0 ∧ b ≠ 0 ∧ (1 / a + 1 / b = 2 / (a + b)) := by
  sorry

end NUMINAMATH_CALUDE_no_nonzero_real_solutions_l1598_159828


namespace NUMINAMATH_CALUDE_arithmetic_sequence_solution_l1598_159841

/-- An arithmetic sequence with first term a, common difference d, and index n -/
def arithmeticSequence (a d : ℚ) (n : ℕ) : ℚ := a + d * n

theorem arithmetic_sequence_solution :
  ∃ (x : ℚ),
    (arithmeticSequence (3/4) d 0 = 3/4) ∧
    (arithmeticSequence (3/4) d 1 = x + 1) ∧
    (arithmeticSequence (3/4) d 2 = 5*x) →
    x = 5/12 := by
  sorry

end NUMINAMATH_CALUDE_arithmetic_sequence_solution_l1598_159841


namespace NUMINAMATH_CALUDE_runners_speed_l1598_159802

theorem runners_speed (track_length : ℝ) (time_between_encounters : ℝ) (speed_difference : ℝ)
  (h1 : track_length = 600)
  (h2 : time_between_encounters = 50)
  (h3 : speed_difference = 2)
  : ∃ (faster_speed slower_speed : ℝ),
    faster_speed - slower_speed = speed_difference ∧
    faster_speed + slower_speed = track_length / time_between_encounters ∧
    faster_speed = 7 := by
  sorry

end NUMINAMATH_CALUDE_runners_speed_l1598_159802


namespace NUMINAMATH_CALUDE_line_equation_slope_intercept_l1598_159822

/-- Given a line equation, prove its slope and y-intercept -/
theorem line_equation_slope_intercept :
  ∀ (x y : ℝ), 
  2 * (x - 3) + (-1) * (y - (-4)) = 0 →
  ∃ (m b : ℝ), y = m * x + b ∧ m = 2 ∧ b = -10 := by
  sorry

end NUMINAMATH_CALUDE_line_equation_slope_intercept_l1598_159822


namespace NUMINAMATH_CALUDE_age_problem_l1598_159871

theorem age_problem (a b c : ℕ) : 
  a = b + 2 →
  b = 2 * c →
  a + b + c = 27 →
  b = 10 :=
by sorry

end NUMINAMATH_CALUDE_age_problem_l1598_159871


namespace NUMINAMATH_CALUDE_jesse_pages_left_to_read_l1598_159807

/-- Represents a book with a given number of pages in the first 5 chapters -/
structure Book where
  chapter1 : ℕ
  chapter2 : ℕ
  chapter3 : ℕ
  chapter4 : ℕ
  chapter5 : ℕ

/-- The number of pages left to read in the book -/
def pagesLeftToRead (b : Book) : ℕ :=
  let pagesRead := b.chapter1 + b.chapter2 + b.chapter3 + b.chapter4 + b.chapter5
  let totalPages := pagesRead * 3
  totalPages - pagesRead

/-- Theorem stating the number of pages left to read in Jesse's book -/
theorem jesse_pages_left_to_read :
  let jessesBook : Book := {
    chapter1 := 10,
    chapter2 := 15,
    chapter3 := 27,
    chapter4 := 12,
    chapter5 := 19
  }
  pagesLeftToRead jessesBook = 166 := by
  sorry

end NUMINAMATH_CALUDE_jesse_pages_left_to_read_l1598_159807


namespace NUMINAMATH_CALUDE_exam_score_standard_deviations_l1598_159899

/-- Given an exam with mean score 88.8, where 90 is 3 standard deviations above the mean,
    prove that 86 is 7 standard deviations below the mean. -/
theorem exam_score_standard_deviations 
  (mean : ℝ) 
  (above_score : ℝ) 
  (below_score : ℝ) 
  (above_sd : ℝ) 
  (h_mean : mean = 88.8)
  (h_above : above_score = 90)
  (h_below : below_score = 86)
  (h_above_sd : above_score = mean + above_sd * 3)
  (h_below_exists : ∃ (x : ℝ), below_score = mean - x * (above_score - mean) / 3) :
  ∃ (x : ℝ), below_score = mean - x * (above_score - mean) / 3 ∧ x = 7 := by
  sorry

end NUMINAMATH_CALUDE_exam_score_standard_deviations_l1598_159899


namespace NUMINAMATH_CALUDE_hash_difference_six_four_l1598_159833

-- Define the # operation
def hash (x y : ℤ) : ℤ := x * y - 3 * x

-- State the theorem
theorem hash_difference_six_four : hash 6 4 - hash 4 6 = -6 := by
  sorry

end NUMINAMATH_CALUDE_hash_difference_six_four_l1598_159833


namespace NUMINAMATH_CALUDE_min_value_expression_l1598_159895

theorem min_value_expression (a b c : ℝ) (ha : a > 0) (hb : b > 0) (hc : c > 0) (h_abc : a * b * c = 27) :
  ∃ (min : ℝ), min = 162 ∧ ∀ x y z, x > 0 → y > 0 → z > 0 → x * y * z = 27 →
    x^2 + 6*x*y + 9*y^2 + 3*z^2 ≥ min :=
sorry

end NUMINAMATH_CALUDE_min_value_expression_l1598_159895


namespace NUMINAMATH_CALUDE_defective_draws_count_l1598_159818

/-- The number of ways to draw at least 2 defective products from a batch of 100 products
    containing 3 defective ones, when drawing 5 products. -/
def defectiveDraws : ℕ := sorry

/-- The total number of products -/
def totalProducts : ℕ := 100

/-- The number of defective products -/
def defectiveProducts : ℕ := 3

/-- The number of products drawn -/
def drawnProducts : ℕ := 5

theorem defective_draws_count :
  defectiveDraws = Nat.choose 3 2 * Nat.choose 97 3 + Nat.choose 3 3 * Nat.choose 97 2 := by
  sorry

end NUMINAMATH_CALUDE_defective_draws_count_l1598_159818


namespace NUMINAMATH_CALUDE_knight_reachability_l1598_159852

/-- Represents a position on an infinite chessboard -/
structure Position :=
  (x : ℤ)
  (y : ℤ)

/-- Represents a knight's move -/
def knight_move (p : Position) : Set Position :=
  {q : Position | (abs (q.x - p.x) = 2 ∧ abs (q.y - p.y) = 1) ∨
                  (abs (q.x - p.x) = 1 ∧ abs (q.y - p.y) = 2)}

/-- Represents the set of positions a knight can reach in exactly n moves -/
def reachable_in (start : Position) (n : ℕ) : Set Position :=
  match n with
  | 0 => {start}
  | n + 1 => ⋃ p ∈ reachable_in start n, knight_move p

/-- Represents whether a position is a black square -/
def is_black (p : Position) : Prop :=
  (p.x + p.y) % 2 = 0

/-- Represents the region described in the problem -/
def target_region (n : ℕ) (start : Position) : Set Position :=
  {p : Position | max (abs (p.x - start.x)) (abs (p.y - start.y)) ≤ 4*n + 1 ∧
                  abs (p.x - start.x) + abs (p.y - start.y) > 2*n}

/-- The main theorem to prove -/
theorem knight_reachability (n : ℕ) (start : Position) :
  ∀ p ∈ target_region n start, is_black p → p ∈ reachable_in start (2*n) :=
sorry

end NUMINAMATH_CALUDE_knight_reachability_l1598_159852


namespace NUMINAMATH_CALUDE_total_hired_is_31_l1598_159808

/-- Represents the daily pay for heavy operators -/
def heavy_operator_pay : ℕ := 129

/-- Represents the daily pay for general laborers -/
def general_laborer_pay : ℕ := 82

/-- Represents the total payroll -/
def total_payroll : ℕ := 3952

/-- Represents the number of general laborers hired -/
def laborers_hired : ℕ := 1

/-- Theorem stating that the total number of people hired is 31 -/
theorem total_hired_is_31 : 
  ∃ (heavy_operators : ℕ), 
    heavy_operator_pay * heavy_operators + general_laborer_pay * laborers_hired = total_payroll ∧
    heavy_operators + laborers_hired = 31 := by
  sorry

end NUMINAMATH_CALUDE_total_hired_is_31_l1598_159808


namespace NUMINAMATH_CALUDE_outfit_combinations_l1598_159825

theorem outfit_combinations (shirts : Nat) (pants : Nat) (shoe_types : Nat) (styles_per_type : Nat) :
  shirts = 4 →
  pants = 4 →
  shoe_types = 2 →
  styles_per_type = 2 →
  shirts * pants * (shoe_types * styles_per_type) = 64 := by
sorry

end NUMINAMATH_CALUDE_outfit_combinations_l1598_159825


namespace NUMINAMATH_CALUDE_square_of_cube_third_smallest_prime_l1598_159855

-- Define the third smallest prime number
def third_smallest_prime : ℕ := 5

-- State the theorem
theorem square_of_cube_third_smallest_prime :
  (third_smallest_prime ^ 3) ^ 2 = 15625 := by sorry

end NUMINAMATH_CALUDE_square_of_cube_third_smallest_prime_l1598_159855


namespace NUMINAMATH_CALUDE_ship_speed_l1598_159897

/-- The speed of a ship in still water, given specific conditions of its journey on a river -/
theorem ship_speed (total_time : ℝ) (total_distance : ℝ) (current_speed : ℝ) : 
  total_time = 6 ∧ 
  total_distance = 36 ∧ 
  current_speed = 3 → 
  ∃ (ship_speed : ℝ), 
    ship_speed = 3 + 3 * Real.sqrt 2 ∧
    total_time * (ship_speed^2 - current_speed^2) = 2 * total_distance * ship_speed :=
by sorry

end NUMINAMATH_CALUDE_ship_speed_l1598_159897


namespace NUMINAMATH_CALUDE_linear_function_increasing_l1598_159861

/-- 
Given a linear function y = kx - b with k > 0 that passes through points (-1, y₁) and (2, y₂),
prove that y₁ < y₂.
-/
theorem linear_function_increasing (k b y₁ y₂ : ℝ) 
  (h₁ : k > 0)
  (h₂ : y₁ = k * (-1) - b)
  (h₃ : y₂ = k * 2 - b) :
  y₁ < y₂ := by
  sorry

end NUMINAMATH_CALUDE_linear_function_increasing_l1598_159861


namespace NUMINAMATH_CALUDE_pizzeria_sales_l1598_159867

theorem pizzeria_sales (small_price large_price total_sales small_count : ℕ)
  (h1 : small_price = 2)
  (h2 : large_price = 8)
  (h3 : total_sales = 40)
  (h4 : small_count = 8) :
  ∃ large_count : ℕ,
    large_count * large_price + small_count * small_price = total_sales ∧
    large_count = 3 :=
by
  sorry

end NUMINAMATH_CALUDE_pizzeria_sales_l1598_159867


namespace NUMINAMATH_CALUDE_sin_alpha_plus_beta_l1598_159834

theorem sin_alpha_plus_beta (α β : Real) 
  (h1 : Real.sin α + Real.cos β = 1) 
  (h2 : Real.cos α + Real.sin β = 0) : 
  Real.sin (α + β) = -1/2 := by
sorry

end NUMINAMATH_CALUDE_sin_alpha_plus_beta_l1598_159834


namespace NUMINAMATH_CALUDE_lunchroom_tables_l1598_159838

theorem lunchroom_tables (students_per_table : ℕ) (total_students : ℕ) 
  (h1 : students_per_table = 6)
  (h2 : total_students = 204)
  (h3 : total_students % students_per_table = 0) :
  total_students / students_per_table = 34 := by
sorry

end NUMINAMATH_CALUDE_lunchroom_tables_l1598_159838


namespace NUMINAMATH_CALUDE_sum_reciprocals_bound_l1598_159856

theorem sum_reciprocals_bound (a b c : ℝ) 
  (pos_a : 0 < a) (pos_b : 0 < b) (pos_c : 0 < c) 
  (sum_one : a + b + c = 1) : 
  9 ≤ (1/a + 1/b + 1/c) ∧ 
  ∀ M : ℝ, ∃ x y z : ℝ, 0 < x ∧ 0 < y ∧ 0 < z ∧ x + y + z = 1 ∧ 1/x + 1/y + 1/z > M :=
by sorry

end NUMINAMATH_CALUDE_sum_reciprocals_bound_l1598_159856


namespace NUMINAMATH_CALUDE_tennis_preference_theorem_l1598_159870

/-- Represents the percentage of students who prefer tennis -/
def tennis_preference (total : ℕ) (prefer : ℕ) : ℚ :=
  prefer / total

/-- Represents the total number of students who prefer tennis -/
def total_tennis_preference (north_total : ℕ) (north_prefer : ℕ) (south_total : ℕ) (south_prefer : ℕ) : ℕ :=
  north_prefer + south_prefer

/-- Represents the combined percentage of students who prefer tennis -/
def combined_tennis_preference (north_total : ℕ) (north_prefer : ℕ) (south_total : ℕ) (south_prefer : ℕ) : ℚ :=
  tennis_preference (north_total + south_total) (total_tennis_preference north_total north_prefer south_total south_prefer)

theorem tennis_preference_theorem (north_total south_total : ℕ) (north_prefer south_prefer : ℕ) :
  north_total = 1800 →
  south_total = 2700 →
  tennis_preference north_total north_prefer = 30 / 100 →
  tennis_preference south_total south_prefer = 25 / 100 →
  combined_tennis_preference north_total north_prefer south_total south_prefer = 27 / 100 :=
by sorry

end NUMINAMATH_CALUDE_tennis_preference_theorem_l1598_159870


namespace NUMINAMATH_CALUDE_consecutive_prime_even_triangular_product_l1598_159819

/-- A number is triangular if it can be represented as n * (n + 1) / 2 for some natural number n. -/
def IsTriangular (n : ℕ) : Prop :=
  ∃ k : ℕ, n = k * (k + 1) / 2

theorem consecutive_prime_even_triangular_product : ∃ a b c : ℕ,
  (a < 20 ∧ b < 20 ∧ c < 20) ∧
  (b = a + 1 ∧ c = b + 1) ∧
  Nat.Prime a ∧
  Even b ∧
  IsTriangular c ∧
  a * b * c = 2730 :=
sorry

end NUMINAMATH_CALUDE_consecutive_prime_even_triangular_product_l1598_159819


namespace NUMINAMATH_CALUDE_ticket_sales_total_l1598_159892

/-- Calculates the total money collected from ticket sales -/
def total_money_collected (advanced_price : ℕ) (door_price : ℕ) (total_tickets : ℕ) (advanced_tickets : ℕ) : ℕ :=
  advanced_price * advanced_tickets + door_price * (total_tickets - advanced_tickets)

/-- Proves that the total money collected is $1360 given the ticket prices and quantities -/
theorem ticket_sales_total : total_money_collected 8 14 140 100 = 1360 := by
  sorry

#eval total_money_collected 8 14 140 100

end NUMINAMATH_CALUDE_ticket_sales_total_l1598_159892


namespace NUMINAMATH_CALUDE_second_sea_fields_medalist_from_vietnam_l1598_159840

/-- Represents a mathematician -/
structure Mathematician where
  name : String
  country : String

/-- Represents the Fields Medal award -/
inductive FieldsMedal
  | recipient : Mathematician → FieldsMedal

/-- Predicate to check if a country is in South East Asia -/
def is_south_east_asian (country : String) : Prop := sorry

/-- Predicate to check if a mathematician is a Fields Medal recipient -/
def is_fields_medalist (m : Mathematician) : Prop := sorry

/-- The second South East Asian Fields Medal recipient -/
def second_sea_fields_medalist : Mathematician := sorry

/-- Theorem stating that the second South East Asian Fields Medal recipient is from Vietnam -/
theorem second_sea_fields_medalist_from_vietnam :
  second_sea_fields_medalist.country = "Vietnam" := by sorry

end NUMINAMATH_CALUDE_second_sea_fields_medalist_from_vietnam_l1598_159840


namespace NUMINAMATH_CALUDE_max_value_of_sin_cos_ratio_l1598_159850

theorem max_value_of_sin_cos_ratio (α β γ : Real) 
  (h_acute_α : 0 < α ∧ α < π/2)
  (h_acute_β : 0 < β ∧ β < π/2)
  (h_acute_γ : 0 < γ ∧ γ < π/2)
  (h_sum_sin_sq : Real.sin α ^ 2 + Real.sin β ^ 2 + Real.sin γ ^ 2 = 1) :
  (Real.sin α + Real.sin β + Real.sin γ) / (Real.cos α + Real.cos β + Real.cos γ) ≤ Real.sqrt 2 / 2 := by
  sorry


end NUMINAMATH_CALUDE_max_value_of_sin_cos_ratio_l1598_159850


namespace NUMINAMATH_CALUDE_inequality_proof_l1598_159803

theorem inequality_proof (a b c : ℝ) (ha : a > 0) (hb : b > 0) (hc : c > 0) :
  (a^2 / b + b^2 / c + c^2 / a) ≥ 3 * (a^3 + b^3 + c^3) / (a^2 + b^2 + c^2) := by
  sorry


end NUMINAMATH_CALUDE_inequality_proof_l1598_159803


namespace NUMINAMATH_CALUDE_population_growth_rate_l1598_159816

theorem population_growth_rate (initial_population : ℝ) (population_after_two_years : ℝ) 
  (h1 : initial_population = 12000)
  (h2 : population_after_two_years = 18451.2) : 
  ∃ (r : ℝ), r = 24 ∧ population_after_two_years = initial_population * (1 + r / 100)^2 :=
by
  sorry

end NUMINAMATH_CALUDE_population_growth_rate_l1598_159816


namespace NUMINAMATH_CALUDE_quadratic_properties_l1598_159830

-- Define the quadratic function
def f (x : ℝ) : ℝ := 6 * x^2 - 18 * x + 3

-- Theorem stating the properties of the function
theorem quadratic_properties :
  (∀ x y, x > (3/2) ∧ y > x → f x > f y) ∧
  (∃ r₁ r₂, r₁ ≠ r₂ ∧ f r₁ = 0 ∧ f r₂ = 0) ∧
  (∃! x, ∀ y, f y ≥ f x) := by
  sorry

end NUMINAMATH_CALUDE_quadratic_properties_l1598_159830


namespace NUMINAMATH_CALUDE_food_supply_problem_l1598_159851

/-- Represents the food supply problem -/
theorem food_supply_problem (initial_men : ℕ) (additional_men : ℕ) (days_after_joining : ℕ) :
  initial_men = 760 →
  additional_men = 3040 →
  days_after_joining = 4 →
  ∃ (initial_days : ℕ),
    initial_days * initial_men = 
      (initial_days - 2) * initial_men + 
      days_after_joining * (initial_men + additional_men) ∧
    initial_days = 22 :=
by
  sorry

end NUMINAMATH_CALUDE_food_supply_problem_l1598_159851


namespace NUMINAMATH_CALUDE_value_of_p_l1598_159804

theorem value_of_p (p q r : ℝ) 
  (sum_eq : p + q + r = 70)
  (p_eq : p = 2 * q)
  (q_eq : q = 3 * r) : 
  p = 42 := by
sorry

end NUMINAMATH_CALUDE_value_of_p_l1598_159804


namespace NUMINAMATH_CALUDE_quadratic_equation_solution_exists_l1598_159869

/-- A positive single-digit integer is a natural number between 1 and 9, inclusive. -/
def PositiveSingleDigit (n : ℕ) : Prop := 1 ≤ n ∧ n ≤ 9

/-- The quadratic equation x^2 - (2A)x + AB = 0 has positive integer solutions. -/
def HasPositiveIntegerSolutions (A B : ℕ) : Prop :=
  ∃ x : ℕ, x > 0 ∧ x^2 - (2 * A) * x + A * B = 0

theorem quadratic_equation_solution_exists :
  ∃ A B : ℕ, PositiveSingleDigit A ∧ PositiveSingleDigit B ∧ HasPositiveIntegerSolutions A B := by
  sorry

end NUMINAMATH_CALUDE_quadratic_equation_solution_exists_l1598_159869


namespace NUMINAMATH_CALUDE_population_change_l1598_159857

theorem population_change (P : ℝ) : 
  P > 0 →
  P * 0.9 * 1.1 * 0.9 = 4455 →
  P = 5000 := by
sorry

end NUMINAMATH_CALUDE_population_change_l1598_159857


namespace NUMINAMATH_CALUDE_total_wheels_at_station_l1598_159858

/-- Calculates the total number of wheels at a train station -/
theorem total_wheels_at_station
  (num_trains : ℕ)
  (carriages_per_train : ℕ)
  (wheel_rows_per_carriage : ℕ)
  (wheels_per_row : ℕ)
  (h1 : num_trains = 4)
  (h2 : carriages_per_train = 4)
  (h3 : wheel_rows_per_carriage = 3)
  (h4 : wheels_per_row = 5) :
  num_trains * carriages_per_train * wheel_rows_per_carriage * wheels_per_row = 240 :=
by sorry

end NUMINAMATH_CALUDE_total_wheels_at_station_l1598_159858


namespace NUMINAMATH_CALUDE_triangle_third_side_l1598_159866

theorem triangle_third_side (a b m : ℝ) (ha : a = 11) (hb : b = 23) (hm : m = 10) :
  ∃ c : ℝ, c = 30 ∧ m^2 = (2*a^2 + 2*b^2 - c^2) / 4 :=
sorry

end NUMINAMATH_CALUDE_triangle_third_side_l1598_159866


namespace NUMINAMATH_CALUDE_right_triangle_area_l1598_159875

theorem right_triangle_area (a b c : ℝ) (h_right : a^2 + b^2 = c^2) 
  (h_hypotenuse : c = 50) (h_sum_legs : a + b = 70) : 
  (1/2) * a * b = 300 := by
sorry

end NUMINAMATH_CALUDE_right_triangle_area_l1598_159875


namespace NUMINAMATH_CALUDE_smallest_number_in_set_l1598_159837

theorem smallest_number_in_set (a b c d : ℕ+) : 
  (a + b + c + d : ℝ) / 4 = 30 →
  b = 28 →
  b < c →
  c < d →
  d = b + 7 →
  a < b →
  a = 27 := by
sorry

end NUMINAMATH_CALUDE_smallest_number_in_set_l1598_159837


namespace NUMINAMATH_CALUDE_mary_book_count_l1598_159836

/-- Represents the number of books Mary has at different stages --/
structure BookCount where
  initial : Nat
  afterReturningUnhelpful : Nat
  afterFirstCheckout : Nat
  beforeSecondCheckout : Nat
  final : Nat

/-- Represents the number of books Mary checks out or returns --/
structure BookTransactions where
  firstReturn : Nat
  firstCheckout : Nat
  secondReturn : Nat
  secondCheckout : Nat

theorem mary_book_count (b : BookCount) (t : BookTransactions) :
  b.initial = 5 →
  t.firstReturn = 3 →
  b.afterReturningUnhelpful = b.initial - t.firstReturn →
  b.afterFirstCheckout = b.afterReturningUnhelpful + t.firstCheckout →
  b.beforeSecondCheckout = b.afterFirstCheckout - t.secondReturn →
  t.secondReturn = 2 →
  t.secondCheckout = 7 →
  b.final = b.beforeSecondCheckout + t.secondCheckout →
  b.final = 12 →
  t.firstCheckout = 5 := by
sorry

end NUMINAMATH_CALUDE_mary_book_count_l1598_159836


namespace NUMINAMATH_CALUDE_pyramid_height_theorem_l1598_159882

/-- Represents a right octagonal pyramid -/
structure RightOctagonalPyramid where
  /-- The distance from the apex to the larger section -/
  height : ℝ
  /-- The area of the larger section -/
  larger_section_area : ℝ
  /-- The area of the smaller section -/
  smaller_section_area : ℝ
  /-- The distance between the two sections -/
  section_distance : ℝ

/-- Theorem stating the relationship between the sections and the height of the pyramid -/
theorem pyramid_height_theorem (pyramid : RightOctagonalPyramid) 
    (h1 : pyramid.larger_section_area = 810)
    (h2 : pyramid.smaller_section_area = 360)
    (h3 : pyramid.section_distance = 10) : 
    pyramid.height = 30 := by
  sorry

end NUMINAMATH_CALUDE_pyramid_height_theorem_l1598_159882


namespace NUMINAMATH_CALUDE_smallest_n_for_sqrt_difference_l1598_159893

theorem smallest_n_for_sqrt_difference (n : ℕ) : n ≥ 2501 ↔ Real.sqrt n - Real.sqrt (n - 1) < 0.01 :=
sorry

end NUMINAMATH_CALUDE_smallest_n_for_sqrt_difference_l1598_159893


namespace NUMINAMATH_CALUDE_fraction_change_l1598_159809

theorem fraction_change (n d x : ℚ) : 
  d = 2 * n - 1 →
  n / d = 5 / 9 →
  (n + x) / (d + x) = 3 / 5 →
  x = 1 := by sorry

end NUMINAMATH_CALUDE_fraction_change_l1598_159809


namespace NUMINAMATH_CALUDE_movie_theater_problem_l1598_159874

theorem movie_theater_problem (adult_price child_price : ℚ) 
  (total_people : ℕ) (total_paid : ℚ) : 
  adult_price = 9.5 → 
  child_price = 6.5 → 
  total_people = 7 → 
  total_paid = 54.5 → 
  ∃ (adults : ℕ), 
    adults ≤ total_people ∧ 
    (adult_price * adults + child_price * (total_people - adults) = total_paid) ∧
    adults = 3 :=
by sorry

end NUMINAMATH_CALUDE_movie_theater_problem_l1598_159874


namespace NUMINAMATH_CALUDE_pauls_books_l1598_159823

theorem pauls_books (sold : ℕ) (left : ℕ) (h1 : sold = 137) (h2 : left = 105) :
  sold + left = 242 := by
  sorry

end NUMINAMATH_CALUDE_pauls_books_l1598_159823


namespace NUMINAMATH_CALUDE_marbles_bet_thirteen_l1598_159821

/-- Calculates the number of marbles bet per game -/
def marbles_bet_per_game (friend_start : ℕ) (total_games : ℕ) (reggie_end : ℕ) (reggie_losses : ℕ) : ℕ :=
  ((friend_start - reggie_end) / (total_games - 2 * reggie_losses)).succ

/-- Proves that under the given conditions, 13 marbles were bet per game -/
theorem marbles_bet_thirteen (friend_start : ℕ) (total_games : ℕ) (reggie_end : ℕ) (reggie_losses : ℕ)
  (h1 : friend_start = 100)
  (h2 : total_games = 9)
  (h3 : reggie_end = 90)
  (h4 : reggie_losses = 1) :
  marbles_bet_per_game friend_start total_games reggie_end reggie_losses = 13 := by
  sorry

#eval marbles_bet_per_game 100 9 90 1

end NUMINAMATH_CALUDE_marbles_bet_thirteen_l1598_159821


namespace NUMINAMATH_CALUDE_no_functions_satisfying_equation_l1598_159814

theorem no_functions_satisfying_equation :
  ¬ ∃ (f g : ℝ → ℝ), ∀ (x y : ℝ), f (x + f y) = y^2 + g x := by
  sorry

end NUMINAMATH_CALUDE_no_functions_satisfying_equation_l1598_159814


namespace NUMINAMATH_CALUDE_tangerine_cost_theorem_l1598_159873

/-- The cost of tangerines bought by Dong-jin -/
def tangerine_cost (original_money : ℚ) : ℚ :=
  original_money / 2

/-- The amount of money Dong-jin has after buying tangerines and giving some to his brother -/
def remaining_money (original_money : ℚ) : ℚ :=
  original_money / 2 * (1 - 3/8)

/-- Theorem stating the cost of tangerines given the conditions -/
theorem tangerine_cost_theorem (original_money : ℚ) :
  remaining_money original_money = 2500 →
  tangerine_cost original_money = 4000 :=
by
  sorry

end NUMINAMATH_CALUDE_tangerine_cost_theorem_l1598_159873


namespace NUMINAMATH_CALUDE_total_cost_four_games_l1598_159864

def batman_price : ℝ := 13.60
def superman_price : ℝ := 5.06
def batman_discount : ℝ := 0.10
def superman_discount : ℝ := 0.05
def sales_tax : ℝ := 0.08
def owned_game1 : ℝ := 7.25
def owned_game2 : ℝ := 12.50

theorem total_cost_four_games :
  let batman_discounted := batman_price * (1 - batman_discount)
  let superman_discounted := superman_price * (1 - superman_discount)
  let batman_with_tax := batman_discounted * (1 + sales_tax)
  let superman_with_tax := superman_discounted * (1 + sales_tax)
  let total_cost := batman_with_tax + superman_with_tax + owned_game1 + owned_game2
  total_cost = 38.16 := by
  sorry

end NUMINAMATH_CALUDE_total_cost_four_games_l1598_159864


namespace NUMINAMATH_CALUDE_als_original_portion_l1598_159853

theorem als_original_portion (a b c : ℝ) : 
  a + b + c = 1200 →
  a - 150 + 3*b + 3*c = 1800 →
  a = 825 := by
sorry

end NUMINAMATH_CALUDE_als_original_portion_l1598_159853


namespace NUMINAMATH_CALUDE_quadratic_inequality_solution_l1598_159863

theorem quadratic_inequality_solution (m n : ℝ) : 
  (∀ x, x^2 - m*x + n ≤ 0 ↔ -5 ≤ x ∧ x ≤ 1) → m = -4 ∧ n = -5 := by
  sorry

end NUMINAMATH_CALUDE_quadratic_inequality_solution_l1598_159863


namespace NUMINAMATH_CALUDE_mass_of_third_metal_l1598_159844

/-- Given an alloy of four metals with specific mass ratios, prove the mass of the third metal -/
theorem mass_of_third_metal (m₁ m₂ m₃ m₄ : ℝ) 
  (h_total : m₁ + m₂ + m₃ + m₄ = 25)
  (h_ratio1 : m₁ = 1.5 * m₂)
  (h_ratio2 : m₂ / m₃ = 3 / 4)
  (h_ratio3 : m₃ / m₄ = 5 / 6) :
  m₃ = 375 / 78 := by
  sorry

#check mass_of_third_metal

end NUMINAMATH_CALUDE_mass_of_third_metal_l1598_159844


namespace NUMINAMATH_CALUDE_circle_equation_from_diameter_endpoints_l1598_159883

-- Define the circle
def Circle (center : ℝ × ℝ) (radius : ℝ) :=
  {p : ℝ × ℝ | (p.1 - center.1)^2 + (p.2 - center.2)^2 = radius^2}

-- Define the endpoints of the diameter
def endpoint1 : ℝ × ℝ := (-1, 3)
def endpoint2 : ℝ × ℝ := (5, -5)

-- Theorem statement
theorem circle_equation_from_diameter_endpoints :
  let center := ((endpoint1.1 + endpoint2.1) / 2, (endpoint1.2 + endpoint2.2) / 2)
  let radius := ((endpoint2.1 - endpoint1.1)^2 + (endpoint2.2 - endpoint1.2)^2).sqrt / 2
  Circle center radius = {p : ℝ × ℝ | p.1^2 + p.2^2 - 4*p.1 + 2*p.2 - 20 = 0} := by
sorry

end NUMINAMATH_CALUDE_circle_equation_from_diameter_endpoints_l1598_159883


namespace NUMINAMATH_CALUDE_rectangle_dimension_change_l1598_159805

theorem rectangle_dimension_change (L W : ℝ) (h : L > 0 ∧ W > 0) : 
  let new_L := 1.25 * L
  let new_W := W * (1 / 1.25)
  new_L * new_W = L * W ∧ (1 - new_W / W) * 100 = 20 := by
sorry

end NUMINAMATH_CALUDE_rectangle_dimension_change_l1598_159805


namespace NUMINAMATH_CALUDE_initial_list_size_l1598_159854

theorem initial_list_size (l : List Int) (m : ℚ) : 
  (((l.sum + 20) / (l.length + 1) : ℚ) = m + 3) →
  (((l.sum + 25) / (l.length + 2) : ℚ) = m + 1) →
  l.length = 3 := by
sorry

end NUMINAMATH_CALUDE_initial_list_size_l1598_159854


namespace NUMINAMATH_CALUDE_symmetric_point_x_axis_l1598_159894

/-- Given a point P(2, 5), its symmetric point with respect to the x-axis has coordinates (2, -5) -/
theorem symmetric_point_x_axis : 
  let P : ℝ × ℝ := (2, 5)
  let symmetric_point := (P.1, -P.2)
  symmetric_point = (2, -5) := by
sorry

end NUMINAMATH_CALUDE_symmetric_point_x_axis_l1598_159894


namespace NUMINAMATH_CALUDE_quadratic_equation_solution_l1598_159832

theorem quadratic_equation_solution : ∃ x₁ x₂ : ℝ, 
  (x₁ = 2 + Real.sqrt 7 ∧ x₁^2 - 4*x₁ - 3 = 0) ∧
  (x₂ = 2 - Real.sqrt 7 ∧ x₂^2 - 4*x₂ - 3 = 0) := by
  sorry

end NUMINAMATH_CALUDE_quadratic_equation_solution_l1598_159832
