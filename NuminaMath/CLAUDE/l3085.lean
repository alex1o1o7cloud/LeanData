import Mathlib

namespace NUMINAMATH_CALUDE_common_factor_of_polynomial_l3085_308528

/-- The common factor of each term in the polynomial 2m^3 - 8m is 2m -/
theorem common_factor_of_polynomial (m : ‚Ñ§) : ‚àÉ (k‚ÇÅ k‚ÇÇ : ‚Ñ§), 2 * m^3 - 8 * m = 2 * m * (k‚ÇÅ * m^2 + k‚ÇÇ) :=
by sorry

end NUMINAMATH_CALUDE_common_factor_of_polynomial_l3085_308528


namespace NUMINAMATH_CALUDE_complex_number_properties_l3085_308550

theorem complex_number_properties (z : ‚ÑÇ) (h : (z - 2*I) / z = 2 + I) : 
  z.im = -1 ‚àß z^6 = -8*I := by sorry

end NUMINAMATH_CALUDE_complex_number_properties_l3085_308550


namespace NUMINAMATH_CALUDE_direct_proportion_function_m_l3085_308581

theorem direct_proportion_function_m (m : ‚Ñù) : 
  (‚àÉ k : ‚Ñù, k ‚â† 0 ‚àß ‚àÄ x : ‚Ñù, (m - 3) * x^(m^2 - 8) = k * x) ‚Üî m = -3 :=
by sorry

end NUMINAMATH_CALUDE_direct_proportion_function_m_l3085_308581


namespace NUMINAMATH_CALUDE_sum_of_coefficients_l3085_308591

theorem sum_of_coefficients (a‚ÇÄ a‚ÇÅ a‚ÇÇ a‚ÇÉ a‚ÇÑ a‚ÇÖ a‚ÇÜ a‚Çá : ‚Ñù) :
  (‚àÄ x : ‚Ñù, (3*x - 1)^7 = a‚Çá*x^7 + a‚ÇÜ*x^6 + a‚ÇÖ*x^5 + a‚ÇÑ*x^4 + a‚ÇÉ*x^3 + a‚ÇÇ*x^2 + a‚ÇÅ*x + a‚ÇÄ) ‚Üí
  a‚Çá + a‚ÇÜ + a‚ÇÖ + a‚ÇÑ + a‚ÇÉ + a‚ÇÇ + a‚ÇÅ + a‚ÇÄ = 128 :=
by sorry

end NUMINAMATH_CALUDE_sum_of_coefficients_l3085_308591


namespace NUMINAMATH_CALUDE_race_result_l3085_308563

-- Define the set of runners
inductive Runner : Type
| P : Runner
| Q : Runner
| R : Runner
| S : Runner
| T : Runner

-- Define the relation "beats" between runners
def beats : Runner ‚Üí Runner ‚Üí Prop := sorry

-- Define the relation "finishes_before" between runners
def finishes_before : Runner ‚Üí Runner ‚Üí Prop := sorry

-- Define what it means for a runner to finish third
def finishes_third : Runner ‚Üí Prop := sorry

-- State the theorem
theorem race_result : 
  (beats Runner.P Runner.Q) ‚Üí
  (beats Runner.P Runner.R) ‚Üí
  (beats Runner.Q Runner.S) ‚Üí
  (finishes_before Runner.P Runner.T) ‚Üí
  (finishes_before Runner.T Runner.Q) ‚Üí
  (¬¨ finishes_third Runner.P ‚àß ¬¨ finishes_third Runner.S) ‚àß
  (‚àÉ (x : Runner), x ‚â† Runner.P ‚àß x ‚â† Runner.S ‚àß finishes_third x) :=
by sorry

end NUMINAMATH_CALUDE_race_result_l3085_308563


namespace NUMINAMATH_CALUDE_towels_used_is_285_towels_used_le_total_towels_l3085_308574

/-- Calculates the total number of towels used in a gym over 4 hours -/
def totalTowelsUsed (firstHourGuests : ‚Ñï) : ‚Ñï :=
  let secondHourGuests := firstHourGuests + (firstHourGuests * 20 / 100)
  let thirdHourGuests := secondHourGuests + (secondHourGuests * 25 / 100)
  let fourthHourGuests := thirdHourGuests + (thirdHourGuests * 1 / 3)
  firstHourGuests + secondHourGuests + thirdHourGuests + fourthHourGuests

/-- Theorem stating that the total number of towels used is 285 -/
theorem towels_used_is_285 :
  totalTowelsUsed 50 = 285 := by
  sorry

/-- The number of towels laid out daily -/
def totalTowels : ‚Ñï := 300

/-- Theorem stating that the number of towels used is less than or equal to the total towels -/
theorem towels_used_le_total_towels :
  totalTowelsUsed 50 ‚â§ totalTowels := by
  sorry

end NUMINAMATH_CALUDE_towels_used_is_285_towels_used_le_total_towels_l3085_308574


namespace NUMINAMATH_CALUDE_wrong_mark_calculation_l3085_308535

theorem wrong_mark_calculation (n : ‚Ñï) (initial_avg correct_avg correct_mark : ‚Ñù) : 
  n = 10 ‚àß 
  initial_avg = 100 ‚àß 
  correct_avg = 96 ‚àß 
  correct_mark = 10 ‚Üí 
  ‚àÉ wrong_mark : ‚Ñù, 
    wrong_mark = 50 ‚àß 
    n * initial_avg = (n - 1) * correct_avg + wrong_mark ‚àß
    n * correct_avg = (n - 1) * correct_avg + correct_mark :=
by sorry

end NUMINAMATH_CALUDE_wrong_mark_calculation_l3085_308535


namespace NUMINAMATH_CALUDE_tetrahedron_volume_is_sqrt3_over_3_l3085_308514

-- Define the square ABCD
def square_side_length : ‚Ñù := 2

-- Define point E as the midpoint of AB
def E_is_midpoint (A B E : ‚Ñù √ó ‚Ñù) : Prop :=
  E = ((A.1 + B.1) / 2, (A.2 + B.2) / 2)

-- Define the folding along EC and ED
def folded_square (A B C D E : ‚Ñù √ó ‚Ñù) : Prop :=
  E_is_midpoint A B E ‚àß
  (A.1 - E.1)^2 + (A.2 - E.2)^2 = (B.1 - E.1)^2 + (B.2 - E.2)^2

-- Define the tetrahedron CDEA
structure Tetrahedron :=
  (C D E A : ‚Ñù √ó ‚Ñù)

-- Define the volume of a tetrahedron
def tetrahedron_volume (t : Tetrahedron) : ‚Ñù := sorry

-- Theorem statement
theorem tetrahedron_volume_is_sqrt3_over_3 
  (A B C D E : ‚Ñù √ó ‚Ñù) 
  (h1 : (C.1 - A.1)^2 + (C.2 - A.2)^2 = square_side_length^2)
  (h2 : (D.1 - B.1)^2 + (D.2 - B.2)^2 = square_side_length^2)
  (h3 : folded_square A B C D E) :
  tetrahedron_volume {C := C, D := D, E := E, A := A} = Real.sqrt 3 / 3 :=
sorry

end NUMINAMATH_CALUDE_tetrahedron_volume_is_sqrt3_over_3_l3085_308514


namespace NUMINAMATH_CALUDE_fibonacci_arithmetic_sequence_l3085_308572

/-- Fibonacci sequence -/
def fib : ‚Ñï ‚Üí ‚Ñï
  | 0 => 0
  | 1 => 1
  | (n + 2) => fib (n + 1) + fib n

/-- Main theorem -/
theorem fibonacci_arithmetic_sequence (a b d : ‚Ñï) : 
  (‚àÄ n ‚â• 3, fib n = fib (n - 1) + fib (n - 2)) ‚Üí  -- Fibonacci recurrence relation
  (fib a < fib b ‚àß fib b < fib d) ‚Üí  -- Increasing sequence
  (fib d - fib b = fib b - fib a) ‚Üí  -- Arithmetic sequence
  d = b + 2 ‚Üí  -- Given condition
  a + b + d = 1000 ‚Üí  -- Given condition
  a = 332 := by
sorry

end NUMINAMATH_CALUDE_fibonacci_arithmetic_sequence_l3085_308572


namespace NUMINAMATH_CALUDE_discount_calculation_l3085_308547

theorem discount_calculation (cost_price : ‚Ñù) (profit_with_discount : ‚Ñù) (profit_without_discount : ‚Ñù) :
  cost_price = 100 ‚àß profit_with_discount = 20 ‚àß profit_without_discount = 25 ‚Üí
  (cost_price + cost_price * profit_without_discount / 100) - (cost_price + cost_price * profit_with_discount / 100) = 5 := by
sorry

end NUMINAMATH_CALUDE_discount_calculation_l3085_308547


namespace NUMINAMATH_CALUDE_parallelogram_area_l3085_308571

theorem parallelogram_area (side1 side2 : ‚Ñù) (angle : ‚Ñù) :
  side1 = 7 ‚Üí
  side2 = 12 ‚Üí
  angle = Real.pi / 3 ‚Üí
  side2 * side1 * Real.sin angle = 12 * 7 * Real.sin (Real.pi / 3) :=
by sorry

end NUMINAMATH_CALUDE_parallelogram_area_l3085_308571


namespace NUMINAMATH_CALUDE_exists_x_fx_equals_four_l3085_308597

open Real

theorem exists_x_fx_equals_four :
  ‚àÉ x‚ÇÄ ‚àà Set.Ioo 0 (3 * œÄ), 3 + cos (2 * x‚ÇÄ) = 4 := by
  sorry

end NUMINAMATH_CALUDE_exists_x_fx_equals_four_l3085_308597


namespace NUMINAMATH_CALUDE_ordering_abc_l3085_308558

theorem ordering_abc : 
  let a : ‚Ñù := 0.1 * Real.exp 0.1
  let b : ‚Ñù := 1 / 9
  let c : ‚Ñù := -Real.log 0.9
  c < a ‚àß a < b := by sorry

end NUMINAMATH_CALUDE_ordering_abc_l3085_308558


namespace NUMINAMATH_CALUDE_rearranged_number_bounds_l3085_308580

/-- Given a natural number B, returns the number A obtained by moving the last digit of B to the first position --/
def rearrange_digits (B : ‚Ñï) : ‚Ñï :=
  let b := B % 10
  10^8 * b + (B - b) / 10

/-- Checks if two natural numbers are coprime --/
def are_coprime (a b : ‚Ñï) : Prop :=
  Nat.gcd a b = 1

/-- Theorem stating the largest and smallest possible values of A given the conditions on B --/
theorem rearranged_number_bounds :
  ‚àÄ B : ‚Ñï,
  B > 222222222 ‚Üí
  are_coprime B 18 ‚Üí
  ‚àÉ A : ‚Ñï,
  A = rearrange_digits B ‚àß
  A ‚â§ 999999998 ‚àß
  A ‚â• 122222224 ‚àß
  (‚àÄ A' : ‚Ñï, A' = rearrange_digits B ‚Üí A' ‚â§ 999999998 ‚àß A' ‚â• 122222224) :=
sorry

end NUMINAMATH_CALUDE_rearranged_number_bounds_l3085_308580


namespace NUMINAMATH_CALUDE_intersection_with_complement_l3085_308536

open Set

-- Define the sets A and B
def A : Set ‚Ñù := {x | -1 ‚â§ x ‚àß x ‚â§ 2}
def B : Set ‚Ñù := {x | x < 1}

-- State the theorem
theorem intersection_with_complement : 
  A ‚à© (ùí∞ \ B) = {x : ‚Ñù | 1 ‚â§ x ‚àß x ‚â§ 2} := by sorry

end NUMINAMATH_CALUDE_intersection_with_complement_l3085_308536


namespace NUMINAMATH_CALUDE_exists_polygon_with_n_axes_of_symmetry_l3085_308502

/-- A convex polygon. -/
structure ConvexPolygon where
  -- Add necessary fields here
  -- This is a placeholder definition

/-- The number of axes of symmetry of a convex polygon. -/
def axesOfSymmetry (p : ConvexPolygon) : ‚Ñï :=
  sorry -- Placeholder definition

/-- For any natural number n, there exists a convex polygon with exactly n axes of symmetry. -/
theorem exists_polygon_with_n_axes_of_symmetry :
  ‚àÄ n : ‚Ñï, ‚àÉ p : ConvexPolygon, axesOfSymmetry p = n :=
sorry

end NUMINAMATH_CALUDE_exists_polygon_with_n_axes_of_symmetry_l3085_308502


namespace NUMINAMATH_CALUDE_b_fourth_zero_implies_b_squared_zero_l3085_308534

theorem b_fourth_zero_implies_b_squared_zero 
  (B : Matrix (Fin 2) (Fin 2) ‚Ñù) 
  (h : B ^ 4 = 0) : 
  B ^ 2 = 0 := by
sorry

end NUMINAMATH_CALUDE_b_fourth_zero_implies_b_squared_zero_l3085_308534


namespace NUMINAMATH_CALUDE_quadratic_is_square_of_binomial_l3085_308512

theorem quadratic_is_square_of_binomial (a : ‚Ñö) : 
  (‚àÉ b : ‚Ñö, ‚àÄ x : ‚Ñö, 4*x^2 + 14*x + a = (2*x + b)^2) ‚Üí a = 49/4 := by
sorry

end NUMINAMATH_CALUDE_quadratic_is_square_of_binomial_l3085_308512


namespace NUMINAMATH_CALUDE_calculation_proof_l3085_308564

theorem calculation_proof :
  (1 : ‚Ñù) = (1/3)^0 ‚àß
  3 = Real.sqrt 27 ‚àß
  3 = |-3| ‚àß
  1 = Real.tan (œÄ/4) ‚Üí
  (1/3)^0 + Real.sqrt 27 - |-3| + Real.tan (œÄ/4) = 1 + 3 * Real.sqrt 3 - 2 ‚àß
  ‚àÄ x : ‚Ñù, (x + 2)^2 - 2*(x - 1) = x^2 + 2*x + 6 :=
by sorry

end NUMINAMATH_CALUDE_calculation_proof_l3085_308564


namespace NUMINAMATH_CALUDE_fifth_term_is_32_l3085_308557

/-- A sequence where the difference between each term and its predecessor increases by 3 each time -/
def special_sequence : ‚Ñï ‚Üí ‚Ñï
| 0 => 2
| 1 => 5
| n + 2 => special_sequence (n + 1) + 3 * (n + 1)

theorem fifth_term_is_32 : special_sequence 4 = 32 := by
  sorry

end NUMINAMATH_CALUDE_fifth_term_is_32_l3085_308557


namespace NUMINAMATH_CALUDE_graph_below_line_l3085_308508

noncomputable def f (x : ‚Ñù) := x * Real.log x - x^2 - 1

theorem graph_below_line (x : ‚Ñù) (h : x > 0) : Real.log x - Real.exp x + 1 < 0 := by
  sorry

end NUMINAMATH_CALUDE_graph_below_line_l3085_308508


namespace NUMINAMATH_CALUDE_polynomial_simplification_l3085_308559

theorem polynomial_simplification (y : ‚Ñù) :
  (3 * y - 2) * (5 * y^12 + 3 * y^11 + 6 * y^10 + 4 + 2 * y^9) =
  15 * y^13 - y^12 + 12 * y^11 - 6 * y^10 - 4 * y^9 + 12 * y - 8 := by
  sorry

end NUMINAMATH_CALUDE_polynomial_simplification_l3085_308559


namespace NUMINAMATH_CALUDE_chord_quadrilateral_probability_l3085_308522

/-- Given 7 points on a circle, the probability that 4 randomly selected chords
    form a convex quadrilateral is 1/171. -/
theorem chord_quadrilateral_probability :
  let n : ‚Ñï := 7  -- number of points on the circle
  let k : ‚Ñï := 4  -- number of chords selected
  let total_chords : ‚Ñï := n.choose 2  -- total number of possible chords
  let total_selections : ‚Ñï := total_chords.choose k  -- ways to select k chords
  let convex_quads : ‚Ñï := n.choose k  -- number of convex quadrilaterals
  (convex_quads : ‚Ñö) / total_selections = 1 / 171 := by
sorry

end NUMINAMATH_CALUDE_chord_quadrilateral_probability_l3085_308522


namespace NUMINAMATH_CALUDE_max_notebooks_charlie_can_buy_l3085_308587

theorem max_notebooks_charlie_can_buy (available : ‚Ñù) (cost_per_notebook : ‚Ñù) 
  (h1 : available = 12) (h2 : cost_per_notebook = 1.45) : 
  ‚åäavailable / cost_per_notebook‚åã = 8 := by
  sorry

end NUMINAMATH_CALUDE_max_notebooks_charlie_can_buy_l3085_308587


namespace NUMINAMATH_CALUDE_people_born_in_country_l3085_308552

theorem people_born_in_country (immigrants : ‚Ñï) (new_residents : ‚Ñï) 
  (h1 : immigrants = 16320) 
  (h2 : new_residents = 106491) : 
  new_residents - immigrants = 90171 := by
sorry

end NUMINAMATH_CALUDE_people_born_in_country_l3085_308552


namespace NUMINAMATH_CALUDE_marble_count_l3085_308543

/-- The total number of marbles owned by Albert, Angela, Allison, Addison, and Alex -/
def total_marbles (allison angela albert addison alex : ‚Ñï) : ‚Ñï :=
  allison + angela + albert + addison + alex

/-- Theorem stating the total number of marbles given the conditions -/
theorem marble_count :
  ‚àÄ (allison angela albert addison alex : ‚Ñï),
    allison = 28 ‚Üí
    angela = allison + 8 ‚Üí
    albert = 3 * angela ‚Üí
    addison = 2 * albert ‚Üí
    alex = allison + 5 ‚Üí
    alex = angela / 2 ‚Üí
    total_marbles allison angela albert addison alex = 421 := by
  sorry


end NUMINAMATH_CALUDE_marble_count_l3085_308543


namespace NUMINAMATH_CALUDE_cone_central_angle_l3085_308582

/-- Given a cone where the lateral area is twice the area of its base,
    prove that the central angle of the sector of the unfolded side is 180 degrees. -/
theorem cone_central_angle (r R : ‚Ñù) (h : r > 0) (H : R > 0) : 
  œÄ * r * R = 2 * œÄ * r^2 ‚Üí (180 : ‚Ñù) * (2 * œÄ * r) / (œÄ * R) = 180 :=
by sorry

end NUMINAMATH_CALUDE_cone_central_angle_l3085_308582


namespace NUMINAMATH_CALUDE_trapezoid_area_l3085_308560

/-- Represents a point in 2D space -/
structure Point where
  x : ‚Ñù
  y : ‚Ñù

/-- Represents a rectangle -/
structure Rectangle where
  p : Point
  q : Point
  r : Point
  s : Point
  area : ‚Ñù

/-- Represents a trapezoid -/
structure Trapezoid where
  t : Point
  u : Point
  v : Point
  s : Point

/-- Given a rectangle PQRS and points T, U, V forming a trapezoid TUVS, 
    prove that the area of TUVS is 10 square units -/
theorem trapezoid_area 
  (pqrs : Rectangle)
  (t : Point)
  (u : Point)
  (v : Point)
  (h1 : pqrs.area = 20)
  (h2 : t.x - pqrs.p.x = 2)
  (h3 : t.y = pqrs.p.y)
  (h4 : u.x - pqrs.q.x = 2)
  (h5 : u.y = pqrs.r.y)
  (h6 : v.x = pqrs.r.x)
  (h7 : v.y - t.y = pqrs.r.y - pqrs.p.y)
  : ‚àÉ (tuvs : Trapezoid), tuvs.t = t ‚àß tuvs.u = u ‚àß tuvs.v = v ‚àß tuvs.s = pqrs.s ‚àß 
    (tuvs.v.x - tuvs.t.x + tuvs.s.x - tuvs.u.x) * (tuvs.u.y - tuvs.t.y) / 2 = 10 :=
by sorry

end NUMINAMATH_CALUDE_trapezoid_area_l3085_308560


namespace NUMINAMATH_CALUDE_symmetry_implies_axis_l3085_308578

/-- A function g : ‚Ñù ‚Üí ‚Ñù with the property that g(x) = g(3-x) for all x ‚àà ‚Ñù -/
def SymmetricFunction (g : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x : ‚Ñù, g x = g (3 - x)

/-- The line x = 1.5 is an axis of symmetry for g -/
def IsAxisOfSymmetry (g : ‚Ñù ‚Üí ‚Ñù) : Prop :=
  ‚àÄ x : ‚Ñù, g x = g (3 - x)

theorem symmetry_implies_axis (g : ‚Ñù ‚Üí ‚Ñù) (h : SymmetricFunction g) :
  IsAxisOfSymmetry g := by sorry

end NUMINAMATH_CALUDE_symmetry_implies_axis_l3085_308578


namespace NUMINAMATH_CALUDE_trivia_team_points_l3085_308533

/-- Calculates the total points scored by a trivia team given the total number of members,
    the number of absent members, and the points scored by each attending member. -/
def total_points (total_members : ‚Ñï) (absent_members : ‚Ñï) (points_per_member : ‚Ñï) : ‚Ñï :=
  (total_members - absent_members) * points_per_member

/-- Proves that a trivia team with 15 total members, 6 absent members, and 3 points per
    attending member scores a total of 27 points. -/
theorem trivia_team_points :
  total_points 15 6 3 = 27 := by
  sorry

end NUMINAMATH_CALUDE_trivia_team_points_l3085_308533


namespace NUMINAMATH_CALUDE_triangles_from_circle_points_l3085_308525

def points_on_circle : ‚Ñï := 10

theorem triangles_from_circle_points :
  Nat.choose points_on_circle 3 = 120 :=
by sorry

end NUMINAMATH_CALUDE_triangles_from_circle_points_l3085_308525


namespace NUMINAMATH_CALUDE_matching_color_probability_l3085_308599

def total_jellybeans_ava : ‚Ñï := 4
def total_jellybeans_ben : ‚Ñï := 8

def green_jellybeans_ava : ‚Ñï := 2
def red_jellybeans_ava : ‚Ñï := 2
def green_jellybeans_ben : ‚Ñï := 2
def red_jellybeans_ben : ‚Ñï := 3

theorem matching_color_probability :
  let p_green := (green_jellybeans_ava / total_jellybeans_ava) * (green_jellybeans_ben / total_jellybeans_ben)
  let p_red := (red_jellybeans_ava / total_jellybeans_ava) * (red_jellybeans_ben / total_jellybeans_ben)
  p_green + p_red = 5 / 16 := by
sorry

end NUMINAMATH_CALUDE_matching_color_probability_l3085_308599


namespace NUMINAMATH_CALUDE_smallest_c_value_l3085_308554

theorem smallest_c_value (c d : ‚Ñ§) : 
  (‚àÉ (r‚ÇÅ r‚ÇÇ r‚ÇÉ : ‚Ñ§), 
    r‚ÇÅ > 0 ‚àß r‚ÇÇ > 0 ‚àß r‚ÇÉ > 0 ‚àß
    ‚àÄ (x : ‚Ñ§), x^3 - c*x^2 + d*x - 3990 = (x - r‚ÇÅ) * (x - r‚ÇÇ) * (x - r‚ÇÉ)) ‚Üí
  c ‚â• 56 :=
by sorry

end NUMINAMATH_CALUDE_smallest_c_value_l3085_308554


namespace NUMINAMATH_CALUDE_geometric_arithmetic_sequence_common_difference_l3085_308596

/-- Given a geometric sequence {a_n} where a_1+1, a_3+4, a_5+7 form an arithmetic sequence,
    the common difference of this arithmetic sequence is 3. -/
theorem geometric_arithmetic_sequence_common_difference
  (a : ‚Ñï ‚Üí ‚Ñù)
  (h_geometric : ‚àÉ q : ‚Ñù, ‚àÄ n : ‚Ñï, a (n + 1) = a n * q)
  (h_arithmetic : ‚àÉ d : ‚Ñù, (a 3 + 4) - (a 1 + 1) = d ‚àß (a 5 + 7) - (a 3 + 4) = d) :
  ‚àÉ d : ‚Ñù, (a 3 + 4) - (a 1 + 1) = d ‚àß d = 3 :=
by sorry

end NUMINAMATH_CALUDE_geometric_arithmetic_sequence_common_difference_l3085_308596


namespace NUMINAMATH_CALUDE_systematic_sampling_third_group_l3085_308583

/-- Systematic sampling function -/
def systematicSample (totalItems : ‚Ñï) (sampleSize : ‚Ñï) (firstSelected : ‚Ñï) : ‚Ñï ‚Üí ‚Ñï :=
  fun n => firstSelected + (n - 1) * (totalItems / sampleSize)

theorem systematic_sampling_third_group 
  (totalItems : ‚Ñï) 
  (sampleSize : ‚Ñï) 
  (groupSize : ‚Ñï) 
  (numGroups : ‚Ñï) 
  (firstSelected : ‚Ñï) :
  totalItems = 300 ‚Üí
  sampleSize = 20 ‚Üí
  groupSize = 20 ‚Üí
  numGroups = 15 ‚Üí
  firstSelected = 6 ‚Üí
  totalItems = groupSize * numGroups ‚Üí
  systematicSample totalItems sampleSize firstSelected 3 = 36 := by
  sorry

#check systematic_sampling_third_group

end NUMINAMATH_CALUDE_systematic_sampling_third_group_l3085_308583


namespace NUMINAMATH_CALUDE_log_64_4_l3085_308590

theorem log_64_4 : Real.log 4 / Real.log 64 = 1 / 3 := by
  sorry

end NUMINAMATH_CALUDE_log_64_4_l3085_308590


namespace NUMINAMATH_CALUDE_rotten_apples_l3085_308516

theorem rotten_apples (apples_per_crate : ‚Ñï) (num_crates : ‚Ñï) (boxes : ‚Ñï) (apples_per_box : ‚Ñï) :
  apples_per_crate = 180 ‚Üí
  num_crates = 12 ‚Üí
  boxes = 100 ‚Üí
  apples_per_box = 20 ‚Üí
  apples_per_crate * num_crates - boxes * apples_per_box = 160 :=
by
  sorry

end NUMINAMATH_CALUDE_rotten_apples_l3085_308516


namespace NUMINAMATH_CALUDE_reflection_coordinate_sum_l3085_308518

/-- Given a point A with coordinates (x, 7), prove that the sum of its coordinates
    and the coordinates of its reflection B over the x-axis is 2x. -/
theorem reflection_coordinate_sum (x : ‚Ñù) : 
  let A : ‚Ñù √ó ‚Ñù := (x, 7)
  let B : ‚Ñù √ó ‚Ñù := (x, -7)  -- Reflection of A over x-axis
  (A.1 + A.2 + B.1 + B.2) = 2 * x := by
sorry

end NUMINAMATH_CALUDE_reflection_coordinate_sum_l3085_308518


namespace NUMINAMATH_CALUDE_largest_angle_in_special_quadrilateral_l3085_308504

/-- A quadrilateral with angles in the ratio 3:4:5:6 has its largest angle equal to 120¬∞. -/
theorem largest_angle_in_special_quadrilateral : 
  ‚àÄ (a b c d : ‚Ñù), 
  a > 0 ‚Üí b > 0 ‚Üí c > 0 ‚Üí d > 0 ‚Üí
  (a + b + c + d = 360) ‚Üí
  (b = 4/3 * a) ‚Üí (c = 5/3 * a) ‚Üí (d = 2 * a) ‚Üí
  d = 120 := by
sorry

end NUMINAMATH_CALUDE_largest_angle_in_special_quadrilateral_l3085_308504


namespace NUMINAMATH_CALUDE_power_equation_solution_l3085_308561

theorem power_equation_solution : ‚àÉ K : ‚Ñï, (4 ^ 5) * (2 ^ 3) = 2 ^ K ‚àß K = 13 := by
  sorry

end NUMINAMATH_CALUDE_power_equation_solution_l3085_308561


namespace NUMINAMATH_CALUDE_parabola_c_value_l3085_308503

/-- Represents a parabola of the form x = ay¬≤ + by + c -/
structure Parabola where
  a : ‚Ñù
  b : ‚Ñù
  c : ‚Ñù

/-- The x-coordinate of a point on the parabola -/
def Parabola.x_coord (p : Parabola) (y : ‚Ñù) : ‚Ñù :=
  p.a * y^2 + p.b * y + p.c

theorem parabola_c_value (p : Parabola) :
  p.x_coord 1 = -3 ‚Üí  -- vertex at (-3, 1)
  p.x_coord 3 = -1 ‚Üí  -- passes through (-1, 3)
  p.c = -5/2 := by
  sorry

end NUMINAMATH_CALUDE_parabola_c_value_l3085_308503


namespace NUMINAMATH_CALUDE_max_viewers_after_T_l3085_308592

/-- Represents a movie rating system --/
structure MovieRating where
  -- Total sum of scores
  scoreSum : ‚Ñï
  -- Number of voters
  voterCount : ‚Ñï
  -- Current rating (sum of scores divided by number of voters)
  rating : ‚Ñï

/-- Theorem: Maximum number of viewers after moment T is 5 --/
theorem max_viewers_after_T (initialRating : MovieRating) : 
  initialRating.rating ‚â§ 10 ‚Üí
  initialRating.rating > 0 ‚Üí
  (‚àÄ newScore : ‚Ñï, newScore ‚â§ 10 ‚Üí
    let newRating : MovieRating := {
      scoreSum := initialRating.scoreSum + newScore,
      voterCount := initialRating.voterCount + 1,
      rating := (initialRating.scoreSum + newScore) / (initialRating.voterCount + 1)
    }
    newRating.rating = initialRating.rating - 1) ‚Üí
  (‚àÉ (n : ‚Ñï), n ‚â§ 5 ‚àß 
    (‚àÄ (m : ‚Ñï), m > n ‚Üí 
      ‚àÉ (badRating : MovieRating), 
        badRating.rating ‚â§ 0 ‚à® 
        badRating.rating ‚â• initialRating.rating)) :=
by sorry


end NUMINAMATH_CALUDE_max_viewers_after_T_l3085_308592


namespace NUMINAMATH_CALUDE_solutions_count_l3085_308523

/-- The number of different integer solutions (x, y) for |x|+|y|=n -/
def num_solutions (n : ‚Ñï) : ‚Ñï := 4 * n

theorem solutions_count :
  (num_solutions 1 = 4) ‚àß
  (num_solutions 2 = 8) ‚àß
  (num_solutions 3 = 12) ‚Üí
  ‚àÄ n : ‚Ñï, num_solutions n = 4 * n :=
by sorry

end NUMINAMATH_CALUDE_solutions_count_l3085_308523


namespace NUMINAMATH_CALUDE_ln_concave_l3085_308540

/-- The natural logarithm function is concave on the positive real numbers. -/
theorem ln_concave : ‚àÄ x‚ÇÅ x‚ÇÇ : ‚Ñù, x‚ÇÅ > 0 ‚Üí x‚ÇÇ > 0 ‚Üí
  Real.log ((x‚ÇÅ + x‚ÇÇ) / 2) ‚â• (Real.log x‚ÇÅ + Real.log x‚ÇÇ) / 2 := by
  sorry

end NUMINAMATH_CALUDE_ln_concave_l3085_308540


namespace NUMINAMATH_CALUDE_negation_of_all_odd_double_even_l3085_308509

def is_odd (n : ‚Ñ§) : Prop := ‚àÉ k : ‚Ñ§, n = 2 * k + 1
def is_even (n : ‚Ñ§) : Prop := ‚àÉ k : ‚Ñ§, n = 2 * k

def A : Set ‚Ñ§ := {n : ‚Ñ§ | is_odd n}
def B : Set ‚Ñ§ := {n : ‚Ñ§ | is_even n}

theorem negation_of_all_odd_double_even :
  (¬¨ ‚àÄ x ‚àà A, (2 * x) ‚àà B) ‚Üî (‚àÉ x ‚àà A, (2 * x) ‚àâ B) :=
sorry

end NUMINAMATH_CALUDE_negation_of_all_odd_double_even_l3085_308509


namespace NUMINAMATH_CALUDE_only_D_positive_l3085_308521

theorem only_D_positive :
  let a := -3 + 7 - 5
  let b := (1 - 2) * 3
  let c := -16 / ((-3)^2)
  let d := -(2^4) * (-6)
  (a ‚â§ 0 ‚àß b ‚â§ 0 ‚àß c ‚â§ 0 ‚àß d > 0) := by sorry

end NUMINAMATH_CALUDE_only_D_positive_l3085_308521


namespace NUMINAMATH_CALUDE_parabola_intercepts_sum_l3085_308511

theorem parabola_intercepts_sum (d e f : ‚Ñù) : 
  (‚àÄ x, 3 * x^2 - 9 * x + 5 = 3 * 0^2 - 9 * 0 + 5 ‚Üí d = 3 * 0^2 - 9 * 0 + 5) ‚Üí
  (3 * e^2 - 9 * e + 5 = 0) ‚Üí
  (3 * f^2 - 9 * f + 5 = 0) ‚Üí
  d + e + f = 8 := by
sorry

end NUMINAMATH_CALUDE_parabola_intercepts_sum_l3085_308511


namespace NUMINAMATH_CALUDE_sqrt_24_simplification_l3085_308570

theorem sqrt_24_simplification : Real.sqrt 24 = 2 * Real.sqrt 6 := by sorry

end NUMINAMATH_CALUDE_sqrt_24_simplification_l3085_308570


namespace NUMINAMATH_CALUDE_college_student_count_l3085_308539

/-- The total number of students at the college -/
def total_students : ‚Ñï := 880

/-- The percentage of students enrolled in biology classes -/
def biology_enrollment_percentage : ‚Ñö := 47.5 / 100

/-- The number of students not enrolled in biology classes -/
def students_not_in_biology : ‚Ñï := 462

/-- Theorem stating the total number of students at the college -/
theorem college_student_count :
  total_students = students_not_in_biology / (1 - biology_enrollment_percentage) := by
  sorry

end NUMINAMATH_CALUDE_college_student_count_l3085_308539


namespace NUMINAMATH_CALUDE_power_seven_mod_twelve_l3085_308568

theorem power_seven_mod_twelve : 7^253 % 12 = 7 := by
  sorry

end NUMINAMATH_CALUDE_power_seven_mod_twelve_l3085_308568


namespace NUMINAMATH_CALUDE_fraction_product_theorem_l3085_308513

theorem fraction_product_theorem : 
  (7 / 4 : ‚Ñö) * (14 / 49 : ‚Ñö) * (10 / 15 : ‚Ñö) * (12 / 36 : ‚Ñö) * 
  (21 / 14 : ‚Ñö) * (40 / 80 : ‚Ñö) * (33 / 22 : ‚Ñö) * (16 / 64 : ‚Ñö) = 1 / 12 := by
  sorry

end NUMINAMATH_CALUDE_fraction_product_theorem_l3085_308513


namespace NUMINAMATH_CALUDE_complex_equality_l3085_308532

theorem complex_equality (z : ‚ÑÇ) : 
  z = -1 + I ‚Üî Complex.abs (z - 2) = Complex.abs (z + 4) ‚àß 
               Complex.abs (z - 2) = Complex.abs (z - 2*I) := by
  sorry

end NUMINAMATH_CALUDE_complex_equality_l3085_308532


namespace NUMINAMATH_CALUDE_vector_dot_product_l3085_308520

/-- Given vectors a, b, c in ‚Ñù¬≤, if a is parallel to b, then b ¬∑ c = 10 -/
theorem vector_dot_product (a b c : ‚Ñù √ó ‚Ñù) : 
  a = (-1, 2) ‚Üí b.1 = 2 ‚Üí c = (7, 1) ‚Üí (‚àÉ k : ‚Ñù, b = k ‚Ä¢ a) ‚Üí b.1 * c.1 + b.2 * c.2 = 10 := by
  sorry

end NUMINAMATH_CALUDE_vector_dot_product_l3085_308520


namespace NUMINAMATH_CALUDE_bus_seating_capacity_l3085_308515

theorem bus_seating_capacity : ‚àÄ (x : ‚Ñï),
  (4 * x + 30 = 5 * x - 10) ‚Üí x = 40 := by
  sorry

end NUMINAMATH_CALUDE_bus_seating_capacity_l3085_308515


namespace NUMINAMATH_CALUDE_amount_left_after_purchases_l3085_308577

def calculate_discounted_price (price : ‚Ñö) (discount_percent : ‚Ñö) : ‚Ñö :=
  price * (1 - discount_percent / 100)

def initial_amount : ‚Ñö := 60

def frame_price : ‚Ñö := 15
def frame_discount : ‚Ñö := 10

def wheel_price : ‚Ñö := 25
def wheel_discount : ‚Ñö := 5

def seat_price : ‚Ñö := 8
def seat_discount : ‚Ñö := 15

def handlebar_price : ‚Ñö := 5
def handlebar_discount : ‚Ñö := 0

def bell_price : ‚Ñö := 3
def bell_discount : ‚Ñö := 0

def hat_price : ‚Ñö := 10
def hat_discount : ‚Ñö := 25

def total_cost : ‚Ñö :=
  calculate_discounted_price frame_price frame_discount +
  calculate_discounted_price wheel_price wheel_discount +
  calculate_discounted_price seat_price seat_discount +
  calculate_discounted_price handlebar_price handlebar_discount +
  calculate_discounted_price bell_price bell_discount +
  calculate_discounted_price hat_price hat_discount

theorem amount_left_after_purchases :
  initial_amount - total_cost = 45 / 100 := by sorry

end NUMINAMATH_CALUDE_amount_left_after_purchases_l3085_308577


namespace NUMINAMATH_CALUDE_sin_30_degrees_l3085_308545

theorem sin_30_degrees : Real.sin (30 * œÄ / 180) = 1 / 2 := by
  sorry

end NUMINAMATH_CALUDE_sin_30_degrees_l3085_308545


namespace NUMINAMATH_CALUDE_gcd_50403_40302_l3085_308593

theorem gcd_50403_40302 : Nat.gcd 50403 40302 = 1 := by
  sorry

end NUMINAMATH_CALUDE_gcd_50403_40302_l3085_308593


namespace NUMINAMATH_CALUDE_simplify_sqrt_expression_l3085_308505

theorem simplify_sqrt_expression :
  Real.sqrt 5 - Real.sqrt 20 + Real.sqrt 45 - 2 * Real.sqrt 80 = -6 * Real.sqrt 5 := by
  sorry

end NUMINAMATH_CALUDE_simplify_sqrt_expression_l3085_308505


namespace NUMINAMATH_CALUDE_denis_neighbors_l3085_308527

-- Define the set of children
inductive Child : Type
| Anya : Child
| Borya : Child
| Vera : Child
| Gena : Child
| Denis : Child

-- Define the line as a function from position (1 to 5) to Child
def Line := Fin 5 ‚Üí Child

-- Define the conditions
def is_valid_line (l : Line) : Prop :=
  -- Borya is at the beginning of the line
  l 1 = Child.Borya ‚àß
  -- Vera is next to Anya but not next to Gena
  (‚àÉ i : Fin 4, (l i = Child.Vera ‚àß l (i+1) = Child.Anya) ‚à® (l (i+1) = Child.Vera ‚àß l i = Child.Anya)) ‚àß
  (‚àÄ i : Fin 4, ¬¨(l i = Child.Vera ‚àß l (i+1) = Child.Gena) ‚àß ¬¨(l (i+1) = Child.Vera ‚àß l i = Child.Gena)) ‚àß
  -- Among Anya, Borya, and Gena, no two are standing next to each other
  (‚àÄ i : Fin 4, ¬¨((l i = Child.Anya ‚à® l i = Child.Borya ‚à® l i = Child.Gena) ‚àß
                 (l (i+1) = Child.Anya ‚à® l (i+1) = Child.Borya ‚à® l (i+1) = Child.Gena)))

-- Theorem statement
theorem denis_neighbors (l : Line) (h : is_valid_line l) :
  (‚àÉ i : Fin 4, (l i = Child.Anya ‚àß l (i+1) = Child.Denis) ‚à® (l (i+1) = Child.Anya ‚àß l i = Child.Denis)) ‚àß
  (‚àÉ j : Fin 4, (l j = Child.Gena ‚àß l (j+1) = Child.Denis) ‚à® (l (j+1) = Child.Gena ‚àß l j = Child.Denis)) :=
by sorry

end NUMINAMATH_CALUDE_denis_neighbors_l3085_308527


namespace NUMINAMATH_CALUDE_f_constant_on_interval_inequality_solution_condition_l3085_308530

-- Define the function f(x)
def f (x : ‚Ñù) : ‚Ñù := |x - 1| + |x + 3|

-- Theorem 1: f(x) is constant on the interval [-3, 1]
theorem f_constant_on_interval :
  ‚àÄ x y : ‚Ñù, x ‚àà Set.Icc (-3) 1 ‚Üí y ‚àà Set.Icc (-3) 1 ‚Üí f x = f y :=
sorry

-- Theorem 2: For f(x) - a ‚â§ 0 to have a solution, a must be ‚â• 4
theorem inequality_solution_condition :
  ‚àÄ a : ‚Ñù, (‚àÉ x : ‚Ñù, f x - a ‚â§ 0) ‚Üî a ‚â• 4 :=
sorry

end NUMINAMATH_CALUDE_f_constant_on_interval_inequality_solution_condition_l3085_308530


namespace NUMINAMATH_CALUDE_preceding_number_in_base_3_l3085_308531

def base_3_to_decimal (digits : List Nat) : Nat :=
  digits.enum.foldr (fun (i, d) acc => acc + d * (3^i)) 0

def decimal_to_base_3 (n : Nat) : List Nat :=
  if n = 0 then [0] else
  let rec aux (m : Nat) (acc : List Nat) :=
    if m = 0 then acc else aux (m / 3) ((m % 3) :: acc)
  aux n []

theorem preceding_number_in_base_3 (N : Nat) (h : base_3_to_decimal [2, 1, 0, 1] = N) :
  decimal_to_base_3 (N - 1) = [2, 1, 0, 0] :=
sorry

end NUMINAMATH_CALUDE_preceding_number_in_base_3_l3085_308531


namespace NUMINAMATH_CALUDE_triangle_theorem_l3085_308517

noncomputable section

open Real

/-- Triangle ABC with sides a, b, c opposite to angles A, B, C respectively -/
structure Triangle where
  a : ‚Ñù
  b : ‚Ñù
  c : ‚Ñù
  A : ‚Ñù
  B : ‚Ñù
  C : ‚Ñù

/-- The given condition in the problem -/
def satisfiesCondition (t : Triangle) : Prop :=
  t.a * sin (t.A - t.C) = t.b * (sin t.A - sin t.B)

/-- The theorem to be proved -/
theorem triangle_theorem (t : Triangle) 
  (h1 : satisfiesCondition t) 
  (h2 : t.c = 4) : 
  t.C = œÄ/3 ‚àß 
  (‚àÄ (t' : Triangle), satisfiesCondition t' ‚Üí t'.c = 4 ‚Üí 
    t.a + t.b + t.c ‚â§ 12) :=
sorry

end

end NUMINAMATH_CALUDE_triangle_theorem_l3085_308517


namespace NUMINAMATH_CALUDE_opposite_signs_and_larger_negative_l3085_308551

theorem opposite_signs_and_larger_negative (a b : ‚Ñù) : 
  a + b < 0 ‚Üí a * b < 0 ‚Üí 
  ((a < 0 ‚àß b > 0 ‚àß |a| > |b|) ‚à® (a > 0 ‚àß b < 0 ‚àß |a| < |b|)) := by
  sorry

end NUMINAMATH_CALUDE_opposite_signs_and_larger_negative_l3085_308551


namespace NUMINAMATH_CALUDE_unique_number_l3085_308537

def is_two_digit (n : ‚Ñï) : Prop := 10 ‚â§ n ‚àß n ‚â§ 99

def is_odd (n : ‚Ñï) : Prop := n % 2 = 1

def is_multiple_of_9 (n : ‚Ñï) : Prop := n % 9 = 0

def digits_product (n : ‚Ñï) : ‚Ñï := (n / 10) * (n % 10)

def is_perfect_square (n : ‚Ñï) : Prop := ‚àÉ m : ‚Ñï, m * m = n

theorem unique_number :
  ‚àÉ! n : ‚Ñï, is_two_digit n ‚àß is_odd n ‚àß is_multiple_of_9 n ‚àß is_perfect_square (digits_product n) ‚àß n = 99 :=
sorry

end NUMINAMATH_CALUDE_unique_number_l3085_308537


namespace NUMINAMATH_CALUDE_min_magnitude_a_minus_c_l3085_308584

noncomputable section

-- Define the plane vectors
variable (a b c : ‚Ñù √ó ‚Ñù)

-- Define the conditions
def magnitude_a : ‚Ñù := Real.sqrt ((a.1 ^ 2) + (a.2 ^ 2))
def magnitude_b_minus_c : ‚Ñù := Real.sqrt (((b.1 - c.1) ^ 2) + ((b.2 - c.2) ^ 2))
def angle_between_a_and_b : ‚Ñù := Real.arccos ((a.1 * b.1 + a.2 * b.2) / (magnitude_a a * Real.sqrt ((b.1 ^ 2) + (b.2 ^ 2))))

-- State the theorem
theorem min_magnitude_a_minus_c (h1 : magnitude_a a = 2)
                                (h2 : magnitude_b_minus_c b c = 1)
                                (h3 : angle_between_a_and_b a b = œÄ / 3) :
  ‚àÉ (min_value : ‚Ñù), ‚àÄ (a' b' c' : ‚Ñù √ó ‚Ñù),
    magnitude_a a' = 2 ‚Üí
    magnitude_b_minus_c b' c' = 1 ‚Üí
    angle_between_a_and_b a' b' = œÄ / 3 ‚Üí
    Real.sqrt (((a'.1 - c'.1) ^ 2) + ((a'.2 - c'.2) ^ 2)) ‚â• min_value ‚àß
    min_value = Real.sqrt 3 - 1 :=
  sorry

end

end NUMINAMATH_CALUDE_min_magnitude_a_minus_c_l3085_308584


namespace NUMINAMATH_CALUDE_arrangement_theorem_l3085_308565

/-- The number of ways to arrange 4 different products in a row,
    with both product A and product B placed to the left of product C. -/
def arrangement_count : ‚Ñï := 8

/-- The total number of products to arrange. -/
def total_products : ‚Ñï := 4

/-- Theorem stating that the number of arrangements under the given conditions is 8. -/
theorem arrangement_theorem :
  arrangement_count = 8 ‚àß total_products = 4 := by sorry

end NUMINAMATH_CALUDE_arrangement_theorem_l3085_308565


namespace NUMINAMATH_CALUDE_rectangular_prism_diagonal_l3085_308589

theorem rectangular_prism_diagonal (l w h : ‚Ñù) (hl : l = 15) (hw : w = 25) (hh : h = 12) :
  Real.sqrt (l^2 + w^2 + h^2) = Real.sqrt 994 := by
  sorry

end NUMINAMATH_CALUDE_rectangular_prism_diagonal_l3085_308589


namespace NUMINAMATH_CALUDE_star_four_three_l3085_308598

-- Define the star operation
def star (a b : ‚Ñù) : ‚Ñù := a^2 - a*b + b^2 + 2*a*b

-- State the theorem
theorem star_four_three : star 4 3 = 37 := by
  sorry

end NUMINAMATH_CALUDE_star_four_three_l3085_308598


namespace NUMINAMATH_CALUDE_deepak_age_l3085_308585

/-- Given that the ratio of Rahul's age to Deepak's age is 4:3 and 
    Rahul's age after 6 years will be 34 years, 
    prove that Deepak's present age is 21 years. -/
theorem deepak_age (rahul_age deepak_age : ‚Ñï) : 
  (rahul_age : ‚Ñö) / deepak_age = 4 / 3 ‚Üí
  rahul_age + 6 = 34 ‚Üí
  deepak_age = 21 := by
sorry

end NUMINAMATH_CALUDE_deepak_age_l3085_308585


namespace NUMINAMATH_CALUDE_roshesmina_piggy_bank_pennies_l3085_308579

/-- Calculates the total number of pennies in a piggy bank -/
def total_pennies (compartments : ‚Ñï) (initial_pennies : ‚Ñï) (added_pennies : ‚Ñï) : ‚Ñï :=
  compartments * (initial_pennies + added_pennies)

/-- Theorem: The total number of pennies in Roshesmina's piggy bank -/
theorem roshesmina_piggy_bank_pennies :
  total_pennies 12 2 6 = 96 := by
  sorry

end NUMINAMATH_CALUDE_roshesmina_piggy_bank_pennies_l3085_308579


namespace NUMINAMATH_CALUDE_abs_neg_one_third_l3085_308594

theorem abs_neg_one_third : |(-1 : ‚Ñö) / 3| = 1 / 3 := by
  sorry

end NUMINAMATH_CALUDE_abs_neg_one_third_l3085_308594


namespace NUMINAMATH_CALUDE_kola_sugar_percentage_l3085_308507

/-- Calculates the percentage of sugar in a kola solution after adding ingredients -/
theorem kola_sugar_percentage
  (initial_volume : Real)
  (initial_water_percent : Real)
  (initial_kola_percent : Real)
  (added_sugar : Real)
  (added_water : Real)
  (added_kola : Real)
  (h1 : initial_volume = 340)
  (h2 : initial_water_percent = 88)
  (h3 : initial_kola_percent = 5)
  (h4 : added_sugar = 3.2)
  (h5 : added_water = 10)
  (h6 : added_kola = 6.8) :
  let initial_sugar_percent := 100 - initial_water_percent - initial_kola_percent
  let initial_water := initial_volume * initial_water_percent / 100
  let initial_kola := initial_volume * initial_kola_percent / 100
  let initial_sugar := initial_volume * initial_sugar_percent / 100
  let final_water := initial_water + added_water
  let final_kola := initial_kola + added_kola
  let final_sugar := initial_sugar + added_sugar
  let final_volume := final_water + final_kola + final_sugar
  final_sugar / final_volume * 100 = 7.5 := by
  sorry


end NUMINAMATH_CALUDE_kola_sugar_percentage_l3085_308507


namespace NUMINAMATH_CALUDE_power_difference_equality_l3085_308501

theorem power_difference_equality : (3^2)^3 - (2^3)^2 = 665 := by sorry

end NUMINAMATH_CALUDE_power_difference_equality_l3085_308501


namespace NUMINAMATH_CALUDE_integral_proof_l3085_308566

theorem integral_proof (x : ‚Ñù) (h : x ‚â† 2 ‚àß x ‚â† -2) : 
  (deriv (fun x => Real.log (abs (x - 2)) - 3 / (2 * (x + 2)^2))) x = 
  (x^3 + 6*x^2 + 15*x + 2) / ((x - 2) * (x + 2)^3) :=
by sorry

end NUMINAMATH_CALUDE_integral_proof_l3085_308566


namespace NUMINAMATH_CALUDE_train_journey_times_l3085_308556

/-- Proves that given the conditions of two trains running late, their usual journey times are both 2 hours -/
theorem train_journey_times (speed_ratio_A speed_ratio_B : ‚Ñö) (delay_A delay_B : ‚Ñö) 
  (h1 : speed_ratio_A = 4/5)
  (h2 : speed_ratio_B = 3/4)
  (h3 : delay_A = 1/2)  -- 30 minutes in hours
  (h4 : delay_B = 2/3)  -- 40 minutes in hours
  : ‚àÉ (T_A T_B : ‚Ñö), T_A = 2 ‚àß T_B = 2 ‚àß 
    (1/speed_ratio_A) * T_A = T_A + delay_A ‚àß
    (1/speed_ratio_B) * T_B = T_B + delay_B :=
by sorry


end NUMINAMATH_CALUDE_train_journey_times_l3085_308556


namespace NUMINAMATH_CALUDE_cuboid_volume_l3085_308506

/-- A cuboid with given height and base area has the specified volume. -/
theorem cuboid_volume (height : ‚Ñù) (base_area : ‚Ñù) :
  height = 13 ‚Üí base_area = 14 ‚Üí height * base_area = 182 := by
  sorry

end NUMINAMATH_CALUDE_cuboid_volume_l3085_308506


namespace NUMINAMATH_CALUDE_advanced_purchase_ticket_price_l3085_308546

/-- Given information about ticket sales for an art exhibition, prove the price of advanced-purchase tickets. -/
theorem advanced_purchase_ticket_price
  (total_tickets : ‚Ñï)
  (total_revenue : ‚Ñö)
  (door_price : ‚Ñö)
  (advanced_tickets : ‚Ñï)
  (h_total_tickets : total_tickets = 140)
  (h_total_revenue : total_revenue = 1720)
  (h_door_price : door_price = 14)
  (h_advanced_tickets : advanced_tickets = 100) :
  ‚àÉ (advanced_price : ‚Ñö),
    advanced_price * advanced_tickets + door_price * (total_tickets - advanced_tickets) = total_revenue ‚àß
    advanced_price = 11.60 :=
by sorry

end NUMINAMATH_CALUDE_advanced_purchase_ticket_price_l3085_308546


namespace NUMINAMATH_CALUDE_subtraction_problem_l3085_308573

theorem subtraction_problem : 943 - 87 = 856 := by
  sorry

end NUMINAMATH_CALUDE_subtraction_problem_l3085_308573


namespace NUMINAMATH_CALUDE_drain_time_for_specific_pumps_l3085_308575

/-- Represents the time taken to drain a lake with three pumps working together -/
def drain_time (rate1 rate2 rate3 : ‚Ñö) : ‚Ñö :=
  1 / (rate1 + rate2 + rate3)

/-- Theorem stating the time taken to drain a lake with three specific pumps -/
theorem drain_time_for_specific_pumps :
  drain_time (1/9) (1/6) (1/12) = 36/13 := by
  sorry

end NUMINAMATH_CALUDE_drain_time_for_specific_pumps_l3085_308575


namespace NUMINAMATH_CALUDE_quadratic_root_sqrt5_minus3_l3085_308519

theorem quadratic_root_sqrt5_minus3 : ‚àÉ (a b c : ‚Ñö), 
  a = 1 ‚àß (‚àÄ x : ‚Ñù, a * x^2 + b * x + c = 0 ‚Üî x = Real.sqrt 5 - 3 ‚à® x = -Real.sqrt 5 - 3) :=
by sorry

end NUMINAMATH_CALUDE_quadratic_root_sqrt5_minus3_l3085_308519


namespace NUMINAMATH_CALUDE_divisibility_property_l3085_308541

def sequence_a : ‚Ñï ‚Üí ‚Ñï
  | 0 => 3
  | n + 1 => (2 * (n + 2) * sequence_a n - (n + 1) - 2) / (n + 1)

theorem divisibility_property (p : ‚Ñï) (hp : Nat.Prime p) (hp_odd : Odd p) :
  ‚àÉ m : ‚Ñï, p ‚à£ sequence_a m ‚àß p ‚à£ sequence_a (m + 1) :=
by sorry

end NUMINAMATH_CALUDE_divisibility_property_l3085_308541


namespace NUMINAMATH_CALUDE_samara_detailing_cost_samara_detailing_cost_proof_l3085_308542

/-- Proves that Samara's spending on detailing equals $79 given the problem conditions -/
theorem samara_detailing_cost : ‚Ñï ‚Üí Prop :=
  fun (detailing_cost : ‚Ñï) =>
    let alberto_total : ‚Ñï := 2457
    let samara_oil : ‚Ñï := 25
    let samara_tires : ‚Ñï := 467
    let difference : ‚Ñï := 1886
    alberto_total = samara_oil + samara_tires + detailing_cost + difference ‚Üí
    detailing_cost = 79

/-- The proof of the theorem -/
theorem samara_detailing_cost_proof : samara_detailing_cost 79 := by
  sorry

end NUMINAMATH_CALUDE_samara_detailing_cost_samara_detailing_cost_proof_l3085_308542


namespace NUMINAMATH_CALUDE_jason_music_store_expenditure_l3085_308555

/-- The total cost of Jason's music store purchases --/
def total_cost : ‚Ñö :=
  142.46 + 8.89 + 7.00 + 15.75 + 12.95 + 36.50 + 5.25

/-- Theorem stating that Jason's total music store expenditure is $229.80 --/
theorem jason_music_store_expenditure :
  total_cost = 229.80 := by sorry

end NUMINAMATH_CALUDE_jason_music_store_expenditure_l3085_308555


namespace NUMINAMATH_CALUDE_expression_simplification_l3085_308586

theorem expression_simplification (x : ‚Ñù) :
  x - 3 * (2 + x) + 4 * (2 - x) - 5 * (1 + 3 * x) + 2 * x^2 = 2 * x^2 - 21 * x - 3 :=
by sorry

end NUMINAMATH_CALUDE_expression_simplification_l3085_308586


namespace NUMINAMATH_CALUDE_matrix_not_invertible_sum_l3085_308526

def matrix (x y z : ‚Ñù) : Matrix (Fin 3) (Fin 3) ‚Ñù :=
  ![![x + y, x, y],
    ![x, y + z, y],
    ![y, x, x + z]]

theorem matrix_not_invertible_sum (x y z : ‚Ñù) :
  ¬¨(IsUnit (Matrix.det (matrix x y z))) ‚Üí
  x + y + z = 0 ‚Üí
  x / (y + z) + y / (x + z) + z / (x + y) = -3 := by
  sorry

end NUMINAMATH_CALUDE_matrix_not_invertible_sum_l3085_308526


namespace NUMINAMATH_CALUDE_quadratic_polynomial_conditions_l3085_308529

theorem quadratic_polynomial_conditions (p : ‚Ñù ‚Üí ‚Ñù) :
  (‚àÄ x, p x = 2 * x^2 - 3 * x - 1) ‚Üí
  p (-2) = 13 ‚àß p 1 = -2 ‚àß p 3 = 8 := by
  sorry

end NUMINAMATH_CALUDE_quadratic_polynomial_conditions_l3085_308529


namespace NUMINAMATH_CALUDE_twin_brothers_age_l3085_308588

theorem twin_brothers_age :
  ‚àÄ x : ‚Ñï,
  (x + 1) * (x + 1) = x * x + 17 ‚Üí
  x = 8 :=
by
  sorry

end NUMINAMATH_CALUDE_twin_brothers_age_l3085_308588


namespace NUMINAMATH_CALUDE_inequality_proof_l3085_308549

theorem inequality_proof (x y z : ‚Ñù) (hx : x > 0) (hy : y > 0) (hz : z > 0) (h : x * y * z = 1) :
  1 / (x^3 * y) + 1 / (y^3 * z) + 1 / (z^3 * x) ‚â• x * y + y * z + z * x := by
  sorry

end NUMINAMATH_CALUDE_inequality_proof_l3085_308549


namespace NUMINAMATH_CALUDE_cuboid_dimensions_sum_l3085_308500

theorem cuboid_dimensions_sum (A B C : ‚Ñù) (h1 : A * B = 45) (h2 : B * C = 80) (h3 : C * A = 180) :
  A + B + C = 145 / 9 := by
sorry

end NUMINAMATH_CALUDE_cuboid_dimensions_sum_l3085_308500


namespace NUMINAMATH_CALUDE_intersection_implies_a_value_l3085_308569

def A : Set ‚Ñù := {-1, 0, 1}
def B (a : ‚Ñù) : Set ‚Ñù := {a + 1, 2 * a}

theorem intersection_implies_a_value :
  ‚àÄ a : ‚Ñù, (A ‚à© B a = {0}) ‚Üí a = -1 := by sorry

end NUMINAMATH_CALUDE_intersection_implies_a_value_l3085_308569


namespace NUMINAMATH_CALUDE_perpendicular_lines_from_parallel_planes_l3085_308538

-- Define the types for lines and planes
variable (Line Plane : Type)

-- Define the relations
variable (parallel_planes : Plane ‚Üí Plane ‚Üí Prop)
variable (perpendicular_line_plane : Line ‚Üí Plane ‚Üí Prop)
variable (parallel_line_plane : Line ‚Üí Plane ‚Üí Prop)
variable (perpendicular_lines : Line ‚Üí Line ‚Üí Prop)

-- State the theorem
theorem perpendicular_lines_from_parallel_planes
  (Œ± Œ≤ : Plane) (m n : Line)
  (h1 : parallel_planes Œ± Œ≤)
  (h2 : perpendicular_line_plane m Œ±)
  (h3 : parallel_line_plane n Œ≤) :
  perpendicular_lines m n :=
sorry

end NUMINAMATH_CALUDE_perpendicular_lines_from_parallel_planes_l3085_308538


namespace NUMINAMATH_CALUDE_boxes_shipped_this_week_l3085_308567

/-- Represents the number of pomelos in a dozen -/
def dozen : ‚Ñï := 12

/-- Represents the number of boxes shipped last week -/
def last_week_boxes : ‚Ñï := 10

/-- Represents the total number of pomelos shipped last week -/
def last_week_pomelos : ‚Ñï := 240

/-- Represents the number of dozens of pomelos shipped this week -/
def this_week_dozens : ‚Ñï := 60

/-- Calculates the number of boxes shipped this week -/
def boxes_this_week : ‚Ñï :=
  (this_week_dozens * dozen) / (last_week_pomelos / last_week_boxes)

theorem boxes_shipped_this_week :
  boxes_this_week = 30 := by sorry

end NUMINAMATH_CALUDE_boxes_shipped_this_week_l3085_308567


namespace NUMINAMATH_CALUDE_constant_term_expansion_l3085_308595

theorem constant_term_expansion (n : ‚Ñï) : 
  (‚àÉ (k : ‚Ñï), (Nat.choose n (2*n/3 : ‚Ñï)) = 15 ‚àß 2*n/3 = k) ‚Üí n = 6 :=
by sorry

end NUMINAMATH_CALUDE_constant_term_expansion_l3085_308595


namespace NUMINAMATH_CALUDE_clothing_problem_l3085_308524

/-- Calculates the remaining clothing pieces after donations and discarding --/
def remaining_clothing (initial : ‚Ñï) (donated1 : ‚Ñï) (donated2_multiplier : ‚Ñï) (discarded : ‚Ñï) : ‚Ñï :=
  initial - (donated1 + donated1 * donated2_multiplier) - discarded

/-- Theorem stating that given the specific values in the problem, 
    the remaining clothing pieces is 65 --/
theorem clothing_problem : 
  remaining_clothing 100 5 3 15 = 65 := by
  sorry

end NUMINAMATH_CALUDE_clothing_problem_l3085_308524


namespace NUMINAMATH_CALUDE_factors_of_180_l3085_308510

def number_of_factors (n : ‚Ñï) : ‚Ñï := (Finset.filter (¬∑ ‚à£ n) (Finset.range (n + 1))).card

theorem factors_of_180 : number_of_factors 180 = 18 := by
  sorry

end NUMINAMATH_CALUDE_factors_of_180_l3085_308510


namespace NUMINAMATH_CALUDE_green_tiles_in_50th_row_l3085_308548

/-- Represents the number of tiles in a row of the tiling pattern. -/
def num_tiles (n : ‚Ñï) : ‚Ñï := 2 * n - 1

/-- Represents the number of green tiles in a row of the tiling pattern. -/
def num_green_tiles (n : ‚Ñï) : ‚Ñï := (num_tiles n - 1) / 2

theorem green_tiles_in_50th_row :
  num_green_tiles 50 = 49 := by sorry

end NUMINAMATH_CALUDE_green_tiles_in_50th_row_l3085_308548


namespace NUMINAMATH_CALUDE_cos_2alpha_value_l3085_308562

theorem cos_2alpha_value (Œ± : ‚Ñù) (h : (Real.sin Œ± - Real.cos Œ±) / (Real.sin Œ± + Real.cos Œ±) = 1/2) :
  Real.cos (2 * Œ±) = -4/5 := by
  sorry

end NUMINAMATH_CALUDE_cos_2alpha_value_l3085_308562


namespace NUMINAMATH_CALUDE_some_number_value_l3085_308576

theorem some_number_value (x y : ‚Ñù) 
  (h1 : x / y = 3 / 2)
  (h2 : (7 * x + y) / (x - y) = 23) :
  y = 1 := by
sorry

end NUMINAMATH_CALUDE_some_number_value_l3085_308576


namespace NUMINAMATH_CALUDE_polygon_perimeter_bounds_l3085_308544

theorem polygon_perimeter_bounds :
  ‚àÉ (m‚ÇÉ m‚ÇÑ m‚ÇÖ m‚ÇÜ m‚Çá m‚Çà m‚Çâ m‚ÇÅ‚ÇÄ : ‚Ñù),
    (abs m‚ÇÉ ‚â§ 3) ‚àß
    (abs m‚ÇÑ ‚â§ 5) ‚àß
    (abs m‚ÇÖ ‚â§ 7) ‚àß
    (abs m‚ÇÜ ‚â§ 9) ‚àß
    (abs m‚Çá ‚â§ 12) ‚àß
    (abs m‚Çà ‚â§ 14) ‚àß
    (abs m‚Çâ ‚â§ 16) ‚àß
    (abs m‚ÇÅ‚ÇÄ ‚â§ 19) ‚àß
    (m‚ÇÉ ‚â§ m‚ÇÑ) ‚àß (m‚ÇÑ ‚â§ m‚ÇÖ) ‚àß (m‚ÇÖ ‚â§ m‚ÇÜ) ‚àß (m‚ÇÜ ‚â§ m‚Çá) ‚àß
    (m‚Çá ‚â§ m‚Çà) ‚àß (m‚Çà ‚â§ m‚Çâ) ‚àß (m‚Çâ ‚â§ m‚ÇÅ‚ÇÄ) := by
  sorry


end NUMINAMATH_CALUDE_polygon_perimeter_bounds_l3085_308544


namespace NUMINAMATH_CALUDE_cos_difference_l3085_308553

theorem cos_difference (A B : Real) 
  (h1 : Real.sin A + Real.sin B = 1/2) 
  (h2 : Real.cos A + Real.cos B = 2) : 
  Real.cos (A - B) = 9/8 := by
  sorry

end NUMINAMATH_CALUDE_cos_difference_l3085_308553
