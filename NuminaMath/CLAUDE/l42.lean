import Mathlib

namespace NUMINAMATH_CALUDE_function_divisibility_property_l42_4203

theorem function_divisibility_property (f : ℕ+ → ℕ+) : 
  (∀ a b : ℕ+, ∃ k : ℕ+, a^2 + f a * f b = k * (f a + b)) →
  (∀ n : ℕ+, f n = n) :=
by sorry

end NUMINAMATH_CALUDE_function_divisibility_property_l42_4203


namespace NUMINAMATH_CALUDE_equation_solutions_l42_4248

theorem equation_solutions : 
  {x : ℝ | (2010 + 2*x)^2 = x^2} = {-2010, -670} := by sorry

end NUMINAMATH_CALUDE_equation_solutions_l42_4248


namespace NUMINAMATH_CALUDE_line_sequence_stabilizes_l42_4223

/-- Represents a line of 2018 natural numbers -/
def Line := Fin 2018 → ℕ

/-- Creates the next line based on the current line -/
def nextLine (l : Line) : Line := sorry

/-- Checks if two lines are identical -/
def linesEqual (l1 l2 : Line) : Prop := ∀ i, l1 i = l2 i

/-- The sequence of lines generated by repeatedly applying nextLine -/
def lineSequence (initial : Line) : ℕ → Line
  | 0 => initial
  | n + 1 => nextLine (lineSequence initial n)

/-- The main theorem: the sequence of lines eventually stabilizes -/
theorem line_sequence_stabilizes (initial : Line) : 
  ∃ N : ℕ, ∀ n ≥ N, linesEqual (lineSequence initial n) (lineSequence initial (n + 1)) := by
  sorry

end NUMINAMATH_CALUDE_line_sequence_stabilizes_l42_4223


namespace NUMINAMATH_CALUDE_factorization_x4_minus_1_l42_4260

theorem factorization_x4_minus_1 (x : ℂ) : x^4 - 1 = (x + Complex.I) * (x - Complex.I) * (x - 1) * (x + 1) := by
  sorry

end NUMINAMATH_CALUDE_factorization_x4_minus_1_l42_4260


namespace NUMINAMATH_CALUDE_arithmetic_progressions_in_S_l42_4259

def S : Set ℤ := {n : ℤ | ∃ k : ℕ, n = ⌊k * Real.pi⌋}

theorem arithmetic_progressions_in_S :
  (∀ k : ℕ, ∃ (a d : ℤ) (f : Fin k → ℤ), (∀ i : Fin k, f i ∈ S) ∧ 
    (∀ i : Fin k, f i = a + i.val * d)) ∧
  ¬(∃ (a d : ℤ) (f : ℕ → ℤ), (∀ n : ℕ, f n ∈ S) ∧ 
    (∀ n : ℕ, f (n + 1) - f n = d)) :=
by sorry

end NUMINAMATH_CALUDE_arithmetic_progressions_in_S_l42_4259


namespace NUMINAMATH_CALUDE_triangle_altitude_median_equations_l42_4284

/-- Triangle ABC with given coordinates -/
structure Triangle where
  A : ℝ × ℝ
  B : ℝ × ℝ
  C : ℝ × ℝ

/-- The equation of a line in the form ax + by + c = 0 -/
structure LineEquation where
  a : ℝ
  b : ℝ
  c : ℝ

/-- Given triangle ABC, return the equation of the altitude from C to AB -/
def altitude (t : Triangle) : LineEquation :=
  sorry

/-- Given triangle ABC, return the equation of the median from C to AB -/
def median (t : Triangle) : LineEquation :=
  sorry

theorem triangle_altitude_median_equations :
  let t : Triangle := { A := (3, 3), B := (2, -2), C := (-7, 1) }
  (altitude t = { a := 1, b := 5, c := 2 }) ∧
  (median t = { a := 1, b := 19, c := -12 }) := by
  sorry

end NUMINAMATH_CALUDE_triangle_altitude_median_equations_l42_4284


namespace NUMINAMATH_CALUDE_a_equals_plus_minus_two_l42_4226

-- Define the sets A and B
def A : Set ℝ := {0, 2}
def B (a : ℝ) : Set ℝ := {1, a^2}

-- Define the theorem
theorem a_equals_plus_minus_two (a : ℝ) : 
  A ∪ B a = {0, 1, 2, 4} → a = 2 ∨ a = -2 := by
  sorry

end NUMINAMATH_CALUDE_a_equals_plus_minus_two_l42_4226


namespace NUMINAMATH_CALUDE_sum_of_roots_l42_4219

theorem sum_of_roots (k c : ℝ) (x₁ x₂ : ℝ) 
  (h_distinct : x₁ ≠ x₂)
  (h₁ : 6 * x₁^2 - k * x₁ = c)
  (h₂ : 6 * x₂^2 - k * x₂ = c) :
  x₁ + x₂ = k / 6 := by
sorry

end NUMINAMATH_CALUDE_sum_of_roots_l42_4219


namespace NUMINAMATH_CALUDE_not_divides_for_all_m_l42_4282

theorem not_divides_for_all_m : ∀ m : ℕ, ¬((1000^m - 1) ∣ (1978^m - 1)) := by
  sorry

end NUMINAMATH_CALUDE_not_divides_for_all_m_l42_4282


namespace NUMINAMATH_CALUDE_tony_puzzle_time_l42_4216

/-- The total time Tony spent solving puzzles -/
def total_puzzle_time (warm_up_time : ℝ) : ℝ :=
  let challenging_puzzle_time := 3 * warm_up_time
  let set_puzzle1_time := 0.5 * warm_up_time
  let set_puzzle2_time := 2 * set_puzzle1_time
  let set_puzzle3_time := set_puzzle1_time + set_puzzle2_time + 2
  let set_puzzle4_time := 1.5 * set_puzzle3_time
  warm_up_time + 2 * challenging_puzzle_time + set_puzzle1_time + set_puzzle2_time + set_puzzle3_time + set_puzzle4_time

/-- Theorem stating that Tony spent 127.5 minutes solving puzzles -/
theorem tony_puzzle_time : total_puzzle_time 10 = 127.5 := by
  sorry

end NUMINAMATH_CALUDE_tony_puzzle_time_l42_4216


namespace NUMINAMATH_CALUDE_garden_vegetable_ratio_l42_4266

theorem garden_vegetable_ratio :
  let potatoes : ℕ := 237
  let cucumbers : ℕ := potatoes - 60
  let total_vegetables : ℕ := 768
  let peppers : ℕ := total_vegetables - potatoes - cucumbers
  peppers = 2 * cucumbers :=
by sorry

end NUMINAMATH_CALUDE_garden_vegetable_ratio_l42_4266


namespace NUMINAMATH_CALUDE_sum_of_squares_l42_4236

theorem sum_of_squares (a b c : ℝ) : 
  a * b + b * c + a * c = 131 →
  a + b + c = 22 →
  a^2 + b^2 + c^2 = 222 := by
sorry

end NUMINAMATH_CALUDE_sum_of_squares_l42_4236


namespace NUMINAMATH_CALUDE_min_value_x_plus_y_l42_4283

theorem min_value_x_plus_y (x y : ℝ) (hx : x > 0) (hy : y > 0) (h : 4/y + 1/x = 4) :
  ∀ z w : ℝ, z > 0 → w > 0 → 4/w + 1/z = 4 → x + y ≤ z + w ∧ x + y = 9/4 := by
  sorry

end NUMINAMATH_CALUDE_min_value_x_plus_y_l42_4283


namespace NUMINAMATH_CALUDE_intersection_implies_a_values_l42_4281

def A (a : ℝ) : Set ℝ := {-1, 2*a-1, a^2}
def B (a : ℝ) : Set ℝ := {9, 5-a, 4-a}

theorem intersection_implies_a_values (a : ℝ) :
  A a ∩ B a = {9} → a = 3 ∨ a = -3 := by
  sorry

end NUMINAMATH_CALUDE_intersection_implies_a_values_l42_4281


namespace NUMINAMATH_CALUDE_susan_tuesday_candies_l42_4255

/-- Represents the number of candies Susan bought on each day -/
structure CandyPurchases where
  tuesday : ℕ
  thursday : ℕ
  friday : ℕ

/-- Represents Susan's candy consumption and remaining candies -/
structure CandyConsumption where
  eaten : ℕ
  remaining : ℕ

/-- Calculates the total number of candies Susan had -/
def totalCandies (purchases : CandyPurchases) (consumption : CandyConsumption) : ℕ :=
  purchases.tuesday + purchases.thursday + purchases.friday

/-- Theorem: Susan bought 3 candies on Tuesday -/
theorem susan_tuesday_candies (purchases : CandyPurchases) (consumption : CandyConsumption) :
  purchases.thursday = 5 →
  purchases.friday = 2 →
  consumption.eaten = 6 →
  consumption.remaining = 4 →
  totalCandies purchases consumption = consumption.eaten + consumption.remaining →
  purchases.tuesday = 3 := by
  sorry

end NUMINAMATH_CALUDE_susan_tuesday_candies_l42_4255


namespace NUMINAMATH_CALUDE_circledot_not_commutative_l42_4234

-- Define a planar vector
structure PlanarVector where
  x : ℝ
  y : ℝ

-- Define the ⊙ operation
def circledot (a b : PlanarVector) : ℝ :=
  a.x * b.y - a.y * b.x

-- Theorem: The ⊙ operation is not commutative
theorem circledot_not_commutative : ¬ ∀ (a b : PlanarVector), circledot a b = circledot b a := by
  sorry

end NUMINAMATH_CALUDE_circledot_not_commutative_l42_4234


namespace NUMINAMATH_CALUDE_function_range_theorem_l42_4200

-- Define the function types
def EvenFunction (f : ℝ → ℝ) : Prop := ∀ x, f (-x) = f x
def OddFunction (g : ℝ → ℝ) : Prop := ∀ x, g (-x) = -g x

-- Define the main theorem
theorem function_range_theorem (f g : ℝ → ℝ) (a : ℝ) :
  EvenFunction f →
  OddFunction g →
  (∀ x, f x + g x = 2^(x + 1)) →
  (∀ x, a * f (2*x) + g x ≤ 25/8 + a * f (2*0) + g 0) →
  (∀ x, a * f (2*x) + g x ≥ a * f (2*0) + g 0 - 25/8) →
  -2 ≤ a ∧ a ≤ 13/18 :=
by sorry

end NUMINAMATH_CALUDE_function_range_theorem_l42_4200


namespace NUMINAMATH_CALUDE_total_books_read_is_72cs_l42_4202

/-- The total number of books read by the entire student body in one year -/
def total_books_read (c s : ℕ) : ℕ :=
  let books_per_month : ℕ := 6
  let months_per_year : ℕ := 12
  let books_per_student_per_year : ℕ := books_per_month * months_per_year
  let total_students : ℕ := c * s
  books_per_student_per_year * total_students

/-- Theorem stating that the total number of books read is 72cs -/
theorem total_books_read_is_72cs (c s : ℕ) :
  total_books_read c s = 72 * c * s := by
  sorry

end NUMINAMATH_CALUDE_total_books_read_is_72cs_l42_4202


namespace NUMINAMATH_CALUDE_average_speed_calculation_l42_4229

/-- Calculates the average speed given distances and speeds for multiple segments of a ride -/
theorem average_speed_calculation 
  (d₁ d₂ d₃ : ℝ) 
  (v₁ v₂ v₃ : ℝ) 
  (h₁ : d₁ = 50)
  (h₂ : d₂ = 20)
  (h₃ : d₃ = 10)
  (h₄ : v₁ = 12)
  (h₅ : v₂ = 40)
  (h₆ : v₃ = 20) :
  (d₁ + d₂ + d₃) / ((d₁ / v₁) + (d₂ / v₂) + (d₃ / v₃)) = 480 / 31 := by
  sorry

#check average_speed_calculation

end NUMINAMATH_CALUDE_average_speed_calculation_l42_4229


namespace NUMINAMATH_CALUDE_jackson_painting_fraction_l42_4251

-- Define the time it takes Jackson to paint the entire garage
def total_time : ℚ := 60

-- Define the time we want to calculate the portion for
def partial_time : ℚ := 12

-- Define the fraction of the garage painted in partial_time
def fraction_painted : ℚ := partial_time / total_time

-- Theorem to prove
theorem jackson_painting_fraction :
  fraction_painted = 1 / 5 := by
  sorry

end NUMINAMATH_CALUDE_jackson_painting_fraction_l42_4251


namespace NUMINAMATH_CALUDE_seats_per_bus_l42_4280

/-- Given a school trip scenario with students and buses, calculate the number of seats per bus. -/
theorem seats_per_bus (students : ℕ) (buses : ℕ) (h1 : students = 111) (h2 : buses = 37) :
  students / buses = 3 := by
  sorry


end NUMINAMATH_CALUDE_seats_per_bus_l42_4280


namespace NUMINAMATH_CALUDE_a_equals_one_sufficient_not_necessary_l42_4286

theorem a_equals_one_sufficient_not_necessary :
  (∀ a : ℝ, a = 1 → (a - 1) * (a - 2) = 0) ∧
  (∃ a : ℝ, a ≠ 1 ∧ (a - 1) * (a - 2) = 0) :=
by sorry

end NUMINAMATH_CALUDE_a_equals_one_sufficient_not_necessary_l42_4286


namespace NUMINAMATH_CALUDE_sine_function_period_l42_4209

theorem sine_function_period (a b c d : ℝ) (ha : a > 0) (hb : b > 0) (hc : c > 0) (hd : d > 0) :
  (∀ x : ℝ, ∃ k : ℤ, a * Real.sin (b * x + c) + d = a * Real.sin (b * (x + 2 * π / 5) + c) + d) →
  b = 5 := by
  sorry

end NUMINAMATH_CALUDE_sine_function_period_l42_4209


namespace NUMINAMATH_CALUDE_imaginary_part_of_z_l42_4222

theorem imaginary_part_of_z (z : ℂ) : z = Complex.I * (1 - 3 * Complex.I) → z.im = 1 := by
  sorry

end NUMINAMATH_CALUDE_imaginary_part_of_z_l42_4222


namespace NUMINAMATH_CALUDE_sum_of_coefficients_l42_4213

-- Define the polynomial
def p (x : ℝ) : ℝ := 3 * (x^8 - 2*x^5 + 4*x^3 - 6) - 5 * (x^4 - 3*x^2 + 2) + 2 * (x^6 + 5*x - 8)

-- Theorem: The sum of the coefficients of p is -3
theorem sum_of_coefficients : p 1 = -3 := by
  sorry

end NUMINAMATH_CALUDE_sum_of_coefficients_l42_4213


namespace NUMINAMATH_CALUDE_intersection_of_A_and_B_l42_4289

def A : Set ℝ := {x : ℝ | -x^2 + x + 6 > 0}
def B : Set ℝ := {x : ℝ | x^2 + 2*x - 8 > 0}

theorem intersection_of_A_and_B :
  A ∩ B = {x : ℝ | 2 < x ∧ x < 3} := by sorry

end NUMINAMATH_CALUDE_intersection_of_A_and_B_l42_4289


namespace NUMINAMATH_CALUDE_inequality_system_solution_set_l42_4268

theorem inequality_system_solution_set :
  ∀ x : ℝ, (x + 1 > 2 ∧ 2*x - 4 < x) ↔ (1 < x ∧ x < 4) := by
  sorry

end NUMINAMATH_CALUDE_inequality_system_solution_set_l42_4268


namespace NUMINAMATH_CALUDE_triangle_theorem_l42_4237

-- Define a triangle ABC
structure Triangle :=
  (A B C : Real)  -- Angles
  (a b c : Real)  -- Sides opposite to angles A, B, C respectively
  (S : Real)      -- Area

-- State the theorem
theorem triangle_theorem (t : Triangle) 
  (h1 : t.b + t.c = 2 * t.a * Real.cos t.B)  -- Given condition
  (h2 : t.S = t.a^2 / 4)                     -- Given area condition
  : t.A = 2 * t.B ∧ (t.A = Real.pi / 2 ∨ t.A = Real.pi / 4) :=
by sorry

end NUMINAMATH_CALUDE_triangle_theorem_l42_4237


namespace NUMINAMATH_CALUDE_units_digit_of_3_pow_7_pow_6_l42_4225

/-- The units digit of a natural number -/
def unitsDigit (n : ℕ) : ℕ := n % 10

/-- The units digit of 3^(7^6) is 3 -/
theorem units_digit_of_3_pow_7_pow_6 : unitsDigit (3^(7^6)) = 3 := by
  sorry

end NUMINAMATH_CALUDE_units_digit_of_3_pow_7_pow_6_l42_4225


namespace NUMINAMATH_CALUDE_max_value_F_unique_s_for_H_l42_4256

noncomputable section

def f (x : ℝ) : ℝ := (Real.log x) / x

def F (x : ℝ) : ℝ := x^2 - Real.log x

def H (s x : ℝ) : ℝ := 
  if x ≥ s then x / (2 * Real.exp 1) else f x

theorem max_value_F :
  ∃ (x : ℝ), x ∈ Set.Icc (1/2) 2 ∧ 
  ∀ (y : ℝ), y ∈ Set.Icc (1/2) 2 → F y ≤ F x ∧
  F x = 4 - Real.log 2 :=
sorry

theorem unique_s_for_H :
  ∃! (s : ℝ), s > 0 ∧ 
  (∀ (k : ℝ), ∃ (x : ℝ), H s x = k) ∧
  s = Real.sqrt (Real.exp 1) :=
sorry

end NUMINAMATH_CALUDE_max_value_F_unique_s_for_H_l42_4256


namespace NUMINAMATH_CALUDE_negation_of_existence_l42_4252

theorem negation_of_existence (Triangle : Type) (isSymmetrical : Triangle → Prop) :
  (¬ ∃ t : Triangle, isSymmetrical t) ↔ (∀ t : Triangle, ¬ isSymmetrical t) := by sorry

end NUMINAMATH_CALUDE_negation_of_existence_l42_4252


namespace NUMINAMATH_CALUDE_perfect_square_sums_l42_4258

theorem perfect_square_sums : ∃ (x y : ℕ+), 
  ∃ (a b c : ℕ+),
  (x + y : ℕ) = a^2 ∧
  (x^2 + y^2 : ℕ) = b^2 ∧
  (x^3 + y^3 : ℕ) = c^2 := by
  sorry

end NUMINAMATH_CALUDE_perfect_square_sums_l42_4258


namespace NUMINAMATH_CALUDE_three_digit_sum_property_l42_4249

theorem three_digit_sum_property (a b c d e f : Nat) : 
  (a ≠ 0 ∧ b ≠ 0 ∧ c ≠ 0 ∧ d ≠ 0 ∧ e ≠ 0 ∧ f ≠ 0) →
  (100 * a + 10 * b + c + 100 * d + 10 * e + f = 1000) →
  (a + b + c + d + e + f = 28) := by
  sorry

end NUMINAMATH_CALUDE_three_digit_sum_property_l42_4249


namespace NUMINAMATH_CALUDE_student_number_problem_l42_4244

theorem student_number_problem (x : ℝ) : 2 * x - 200 = 110 → x = 155 := by
  sorry

end NUMINAMATH_CALUDE_student_number_problem_l42_4244


namespace NUMINAMATH_CALUDE_division_problem_l42_4220

theorem division_problem (a b c : ℝ) 
  (h1 : a / b = 3) 
  (h2 : b / c = 2/3) : 
  c / a = 1/2 := by sorry

end NUMINAMATH_CALUDE_division_problem_l42_4220


namespace NUMINAMATH_CALUDE_hyperbola_equation_l42_4208

def is_hyperbola (a b : ℝ) (x y : ℝ → ℝ) : Prop :=
  ∀ t, (x t)^2 / a^2 - (y t)^2 / b^2 = 1 ∧ a > 0 ∧ b > 0

def has_focus_at (x y : ℝ → ℝ) (fx fy : ℝ) : Prop :=
  ∃ t, x t = fx ∧ y t = fy

def has_asymptotes (x y : ℝ → ℝ) (m : ℝ) : Prop :=
  ∀ t, y t = m * x t ∨ y t = -m * x t

theorem hyperbola_equation (a b : ℝ) (x y : ℝ → ℝ) :
  is_hyperbola a b x y →
  has_focus_at x y 5 0 →
  has_asymptotes x y (3/4) →
  a^2 = 16 ∧ b^2 = 9 := by sorry

end NUMINAMATH_CALUDE_hyperbola_equation_l42_4208


namespace NUMINAMATH_CALUDE_difference_of_squares_l42_4276

theorem difference_of_squares (x : ℝ) : x^2 - 1 = (x + 1) * (x - 1) := by
  sorry

end NUMINAMATH_CALUDE_difference_of_squares_l42_4276


namespace NUMINAMATH_CALUDE_singer_songs_released_l42_4297

/-- Given a singer's work schedule and total time spent, calculate the number of songs released --/
theorem singer_songs_released 
  (hours_per_day : ℕ) 
  (days_per_song : ℕ) 
  (total_hours : ℕ) 
  (h1 : hours_per_day = 10)
  (h2 : days_per_song = 10)
  (h3 : total_hours = 300) :
  total_hours / (hours_per_day * days_per_song) = 3 := by
  sorry

end NUMINAMATH_CALUDE_singer_songs_released_l42_4297


namespace NUMINAMATH_CALUDE_lucas_52_mod_5_l42_4250

def lucas : ℕ → ℕ
  | 0 => 1
  | 1 => 3
  | (n + 2) => lucas (n + 1) + lucas n

theorem lucas_52_mod_5 : lucas 51 % 5 = 2 := by
  sorry

end NUMINAMATH_CALUDE_lucas_52_mod_5_l42_4250


namespace NUMINAMATH_CALUDE_smallest_whole_number_satisfying_inequality_two_satisfies_inequality_two_is_smallest_l42_4269

theorem smallest_whole_number_satisfying_inequality :
  ∀ x : ℤ, (3 * x + 4 > 11 - 2 * x) → x ≥ 2 :=
by sorry

theorem two_satisfies_inequality :
  3 * 2 + 4 > 11 - 2 * 2 :=
by sorry

theorem two_is_smallest :
  ∀ x : ℤ, x < 2 → (3 * x + 4 ≤ 11 - 2 * x) :=
by sorry

end NUMINAMATH_CALUDE_smallest_whole_number_satisfying_inequality_two_satisfies_inequality_two_is_smallest_l42_4269


namespace NUMINAMATH_CALUDE_dans_gift_l42_4243

-- Define the number of cards Sally sold
def cards_sold : ℕ := 27

-- Define the number of cards Sally bought
def cards_bought : ℕ := 20

-- Define the total number of cards Sally has now
def total_cards : ℕ := 34

-- Theorem to prove
theorem dans_gift (cards_from_dan : ℕ) : 
  cards_from_dan = total_cards - cards_bought := by
  sorry

#check dans_gift

end NUMINAMATH_CALUDE_dans_gift_l42_4243


namespace NUMINAMATH_CALUDE_contemporary_probability_is_five_ninths_l42_4274

/-- Represents a scientist with a birth year and lifespan -/
structure Scientist where
  birth_year : ℝ
  lifespan : ℝ

/-- The total time span in years -/
def total_span : ℝ := 600

/-- The probability that two scientists were contemporaries -/
noncomputable def contemporary_probability (s1 s2 : Scientist) : ℝ :=
  let overlap_area := (total_span - (s1.lifespan + s2.lifespan)) ^ 2
  (total_span ^ 2 - overlap_area) / (total_span ^ 2)

/-- The main theorem stating the probability of two scientists being contemporaries -/
theorem contemporary_probability_is_five_ninths :
  ∃ (s1 s2 : Scientist),
    s1.lifespan = 110 ∧
    s2.lifespan = 90 ∧
    s1.birth_year ≥ 0 ∧
    s1.birth_year ≤ total_span ∧
    s2.birth_year ≥ 0 ∧
    s2.birth_year ≤ total_span ∧
    contemporary_probability s1 s2 = 5 / 9 :=
by
  sorry

end NUMINAMATH_CALUDE_contemporary_probability_is_five_ninths_l42_4274


namespace NUMINAMATH_CALUDE_alloy_mixture_problem_l42_4238

/-- Represents the composition of an alloy --/
structure Alloy where
  component1 : ℝ
  component2 : ℝ
  ratio : ℚ

/-- Represents the mixture of two alloys --/
structure Mixture where
  alloyA : Alloy
  alloyB : Alloy
  massA : ℝ
  massB : ℝ
  tinTotal : ℝ

/-- The theorem to be proved --/
theorem alloy_mixture_problem (m : Mixture) : 
  m.alloyA.ratio = 1/3 ∧ 
  m.alloyB.ratio = 3/5 ∧ 
  m.massA = 170 ∧ 
  m.tinTotal = 221.25 → 
  m.massB = 250 := by
  sorry

end NUMINAMATH_CALUDE_alloy_mixture_problem_l42_4238


namespace NUMINAMATH_CALUDE_only_54_65_rounds_differently_l42_4285

def round_to_nearest_tenth (x : Float) : Float :=
  (x * 10).round / 10

theorem only_54_65_rounds_differently : 
  let numbers := [54.56, 54.63, 54.64, 54.65, 54.59]
  ∀ x ∈ numbers, x ≠ 54.65 → round_to_nearest_tenth x = 54.6 ∧
  round_to_nearest_tenth 54.65 ≠ 54.6 := by
  sorry

end NUMINAMATH_CALUDE_only_54_65_rounds_differently_l42_4285


namespace NUMINAMATH_CALUDE_company_profit_achievable_l42_4231

/-- Represents the company's financial model -/
structure CompanyModel where
  investment : ℝ
  production_cost : ℝ
  advertising_fee : ℝ
  min_price : ℝ
  max_price : ℝ
  sales_function : ℝ → ℝ

/-- Calculates the profit for a given price -/
def profit (model : CompanyModel) (price : ℝ) : ℝ :=
  let sales := model.sales_function price
  sales * (price - model.production_cost) - model.investment - model.advertising_fee

/-- Theorem stating that the company can achieve a total profit of 35 million over two years -/
theorem company_profit_achievable (model : CompanyModel) 
  (h1 : model.investment = 25)
  (h2 : model.production_cost = 20)
  (h3 : model.advertising_fee = 5)
  (h4 : model.min_price = 30)
  (h5 : model.max_price = 70)
  (h6 : ∀ x, model.sales_function x = -x + 150)
  (h7 : ∀ x, model.min_price ≤ x ∧ x ≤ model.max_price → 0 ≤ model.sales_function x) :
  ∃ (price1 price2 : ℝ), 
    model.min_price ≤ price1 ∧ price1 ≤ model.max_price ∧
    model.min_price ≤ price2 ∧ price2 ≤ model.max_price ∧
    profit model price1 + profit model price2 = 35 :=
  sorry


end NUMINAMATH_CALUDE_company_profit_achievable_l42_4231


namespace NUMINAMATH_CALUDE_chord_length_concentric_circles_l42_4232

/-- Given two concentric circles where the area between them is 50π square inches
    and the radius of the smaller circle is 5 inches, the length of a chord of the
    larger circle that is tangent to the smaller circle is 10√2 inches. -/
theorem chord_length_concentric_circles (R r : ℝ) (h1 : r = 5) 
    (h2 : π * R^2 - π * r^2 = 50 * π) : 
  ∃ (c : ℝ), c = 10 * Real.sqrt 2 ∧ c^2 = 4 * (R^2 - r^2) := by
  sorry

end NUMINAMATH_CALUDE_chord_length_concentric_circles_l42_4232


namespace NUMINAMATH_CALUDE_quadratic_roots_identity_l42_4298

theorem quadratic_roots_identity (a b c : ℝ) : 
  (∃ x y : ℝ, x = Real.sin (42 * π / 180) ∧ y = Real.sin (48 * π / 180) ∧ 
    (∀ z : ℝ, a * z^2 + b * z + c = 0 ↔ z = x ∨ z = y)) →
  b^2 = a^2 + 2*a*c :=
by sorry

end NUMINAMATH_CALUDE_quadratic_roots_identity_l42_4298


namespace NUMINAMATH_CALUDE_min_m_for_24m_equals_n4_l42_4215

theorem min_m_for_24m_equals_n4 (m n : ℕ+) (h : 24 * m = n^4) :
  ∀ k : ℕ+, 24 * k = (some_nat : ℕ+)^4 → m ≤ k :=
by sorry

end NUMINAMATH_CALUDE_min_m_for_24m_equals_n4_l42_4215


namespace NUMINAMATH_CALUDE_bushes_for_zucchinis_l42_4212

/-- Represents the number of containers of blueberries per bush -/
def containers_per_bush : ℕ := 8

/-- Represents the number of containers traded for zucchinis -/
def containers_traded : ℕ := 5

/-- Represents the number of zucchinis received in trade -/
def zucchinis_received : ℕ := 2

/-- Represents the target number of zucchinis -/
def target_zucchinis : ℕ := 48

/-- Calculates the number of bushes needed to obtain the target number of zucchinis -/
def bushes_needed : ℕ :=
  (target_zucchinis * containers_traded) / (zucchinis_received * containers_per_bush)

theorem bushes_for_zucchinis :
  bushes_needed = 15 :=
sorry

end NUMINAMATH_CALUDE_bushes_for_zucchinis_l42_4212


namespace NUMINAMATH_CALUDE_odd_prime_non_divisibility_l42_4267

theorem odd_prime_non_divisibility (p r : ℕ) : 
  Prime p → Odd p → Odd r → ¬(p * r + 1 ∣ p^p - 1) := by
  sorry

end NUMINAMATH_CALUDE_odd_prime_non_divisibility_l42_4267


namespace NUMINAMATH_CALUDE_solve_equation_l42_4245

theorem solve_equation (x : ℝ) (h : 0.009 / x = 0.01) : x = 0.9 := by
  sorry

end NUMINAMATH_CALUDE_solve_equation_l42_4245


namespace NUMINAMATH_CALUDE_average_of_three_numbers_l42_4247

theorem average_of_three_numbers (x : ℝ) : (15 + 19 + x) / 3 = 20 → x = 26 := by
  sorry

end NUMINAMATH_CALUDE_average_of_three_numbers_l42_4247


namespace NUMINAMATH_CALUDE_find_n_l42_4214

theorem find_n : ∃ n : ℤ, n + (n + 1) + (n + 2) = 15 ∧ n = 4 := by
  sorry

end NUMINAMATH_CALUDE_find_n_l42_4214


namespace NUMINAMATH_CALUDE_nested_cube_root_simplification_l42_4254

theorem nested_cube_root_simplification (N : ℝ) (h : N > 1) :
  (4 * N * (8 * N * (12 * N)^(1/3))^(1/3))^(1/3) = 2 * 3^(1/3) * N^(13/27) := by
  sorry

end NUMINAMATH_CALUDE_nested_cube_root_simplification_l42_4254


namespace NUMINAMATH_CALUDE_triangle_construction_l42_4292

-- Define the necessary structures
structure Triangle where
  A : Point
  B : Point
  C : Point

-- Define the properties
def is_orthocenter (H : Point) (t : Triangle) : Prop := sorry
def is_circumcenter (O : Point) (t : Triangle) : Prop := sorry
def side_on_line (l : Line) (t : Triangle) : Prop := sorry

-- Theorem statement
theorem triangle_construction (H O : Point) (l : Line) :
  ∃ (t : Triangle), is_orthocenter H t ∧ is_circumcenter O t ∧ side_on_line l t := by
  sorry

end NUMINAMATH_CALUDE_triangle_construction_l42_4292


namespace NUMINAMATH_CALUDE_fifteenth_shape_black_tiles_l42_4240

/-- The dimension of the nth shape in the sequence -/
def shape_dimension (n : ℕ) : ℕ := 2 * n - 1

/-- The total number of tiles in the nth shape -/
def total_tiles (n : ℕ) : ℕ := (shape_dimension n) ^ 2

/-- The number of black tiles in the nth shape -/
def black_tiles (n : ℕ) : ℕ := (total_tiles n + 1) / 2

theorem fifteenth_shape_black_tiles :
  black_tiles 15 = 421 := by sorry

end NUMINAMATH_CALUDE_fifteenth_shape_black_tiles_l42_4240


namespace NUMINAMATH_CALUDE_modulus_of_x_minus_yi_l42_4288

-- Define the complex number i
noncomputable def i : ℂ := Complex.I

-- Define the equation
def complex_equation (x y : ℝ) : Prop :=
  (x + Real.sqrt 2 * i) / i = y + i

-- Theorem statement
theorem modulus_of_x_minus_yi (x y : ℝ) 
  (h : complex_equation x y) : Complex.abs (x - y * i) = Real.sqrt 3 := by
  sorry

end NUMINAMATH_CALUDE_modulus_of_x_minus_yi_l42_4288


namespace NUMINAMATH_CALUDE_roses_remaining_proof_l42_4277

def dozen : ℕ := 12

def initial_roses : ℕ := 3 * dozen

def roses_given_away : ℕ := initial_roses / 2

def roses_in_vase : ℕ := initial_roses - roses_given_away

def wilted_roses : ℕ := roses_in_vase / 3

def remaining_roses : ℕ := roses_in_vase - wilted_roses

theorem roses_remaining_proof :
  remaining_roses = 12 := by sorry

end NUMINAMATH_CALUDE_roses_remaining_proof_l42_4277


namespace NUMINAMATH_CALUDE_soda_cost_is_80_cents_l42_4239

/-- Represents the cost of items in cents -/
structure ItemCosts where
  burger : ℕ
  soda : ℕ
  fry : ℕ

/-- Represents a purchase with quantities of items and total cost -/
structure Purchase where
  burgers : ℕ
  sodas : ℕ
  fries : ℕ
  total : ℕ

/-- Given two purchases and their costs, determines the cost of a soda -/
def find_soda_cost (alice_purchase bill_purchase : Purchase) : ℕ :=
  sorry

/-- Theorem stating that given Alice's and Bill's purchases, the soda cost is 80 cents -/
theorem soda_cost_is_80_cents (alice_purchase bill_purchase : Purchase)
  (h_alice : alice_purchase = { burgers := 5, sodas := 3, fries := 2, total := 520 })
  (h_bill : bill_purchase = { burgers := 3, sodas := 2, fries := 1, total := 340 }) :
  find_soda_cost alice_purchase bill_purchase = 80 :=
sorry

end NUMINAMATH_CALUDE_soda_cost_is_80_cents_l42_4239


namespace NUMINAMATH_CALUDE_point_d_theorem_l42_4227

-- Define the triangle ABC
structure RightTriangle where
  a : ℝ
  b : ℝ
  h_positive : a > 0 ∧ b > 0

-- Define point D
def PointD (x y : ℝ) : Prod ℝ ℝ := (x, y)

-- Define the condition for point D
def SatisfiesCondition (t : RightTriangle) (d : Prod ℝ ℝ) : Prop :=
  let (x, y) := d
  let ad := Real.sqrt ((x - t.a)^2 + y^2)
  let bc := t.a
  let ac := Real.sqrt (t.a^2 + t.b^2)
  let bd := Real.sqrt (x^2 + (y - t.b)^2)
  let cd := Real.sqrt (x^2 + y^2)
  ad * bc = ac * bd ∧ ac * bd = (Real.sqrt (t.a^2 + t.b^2) * cd) / Real.sqrt 2

-- Theorem statement
theorem point_d_theorem (t : RightTriangle) :
  ∀ x y : ℝ, SatisfiesCondition t (PointD x y) ↔ 
  (x = t.a * t.b / (t.a + t.b) ∧ y = t.a * t.b / (t.a + t.b)) ∨
  (x = t.a * t.b / (t.a - t.b) ∧ y = t.a * t.b / (t.a - t.b)) :=
sorry

end NUMINAMATH_CALUDE_point_d_theorem_l42_4227


namespace NUMINAMATH_CALUDE_katie_baked_18_cupcakes_l42_4294

/-- The number of cupcakes Todd ate -/
def todd_ate : ℕ := 8

/-- The number of packages Katie could make after Todd ate some cupcakes -/
def num_packages : ℕ := 5

/-- The number of cupcakes in each package -/
def cupcakes_per_package : ℕ := 2

/-- The initial number of cupcakes Katie baked -/
def initial_cupcakes : ℕ := todd_ate + num_packages * cupcakes_per_package

theorem katie_baked_18_cupcakes : initial_cupcakes = 18 := by
  sorry

end NUMINAMATH_CALUDE_katie_baked_18_cupcakes_l42_4294


namespace NUMINAMATH_CALUDE_sin_angle_RPT_l42_4201

theorem sin_angle_RPT (RPQ : Real) (h : Real.sin RPQ = 3/5) : 
  Real.sin (2 * Real.pi - RPQ) = 3/5 := by
  sorry

end NUMINAMATH_CALUDE_sin_angle_RPT_l42_4201


namespace NUMINAMATH_CALUDE_charlies_weight_l42_4265

theorem charlies_weight (alice_weight charlie_weight : ℚ) 
  (sum_condition : alice_weight + charlie_weight = 240)
  (difference_condition : charlie_weight - alice_weight = charlie_weight / 3) :
  charlie_weight = 144 := by
  sorry

end NUMINAMATH_CALUDE_charlies_weight_l42_4265


namespace NUMINAMATH_CALUDE_inequality_equivalence_l42_4206

theorem inequality_equivalence (x : ℝ) : x - 2 > 1 ↔ x > 3 := by
  sorry

end NUMINAMATH_CALUDE_inequality_equivalence_l42_4206


namespace NUMINAMATH_CALUDE_ginger_flower_sales_l42_4293

/-- Represents the number of flowers sold of each type -/
structure FlowerSales where
  lilacs : ℕ
  roses : ℕ
  gardenias : ℕ

/-- Calculates the total number of flowers sold -/
def total_flowers (sales : FlowerSales) : ℕ :=
  sales.lilacs + sales.roses + sales.gardenias

/-- Theorem: Given the conditions of Ginger's flower sales, prove that the total number of flowers sold is 45 -/
theorem ginger_flower_sales : 
  ∀ (sales : FlowerSales),
    sales.lilacs = 10 →
    sales.roses = 3 * sales.lilacs →
    sales.gardenias = sales.lilacs / 2 →
    total_flowers sales = 45 := by
  sorry


end NUMINAMATH_CALUDE_ginger_flower_sales_l42_4293


namespace NUMINAMATH_CALUDE_floor_inequality_and_factorial_integrality_l42_4230

theorem floor_inequality_and_factorial_integrality :
  (∀ (x y : ℝ), x ≥ 0 ∧ y ≥ 0 → ⌊5 * x⌋ + ⌊5 * y⌋ ≥ ⌊3 * x + y⌋ + ⌊x + 3 * y⌋) ∧
  (∀ (a b : ℕ), a > 0 ∧ b > 0 → ∃ (k : ℕ), k * (a.factorial * b.factorial * (3 * a + b).factorial * (a + 3 * b).factorial) = (5 * a).factorial * (5 * b).factorial) :=
by sorry

end NUMINAMATH_CALUDE_floor_inequality_and_factorial_integrality_l42_4230


namespace NUMINAMATH_CALUDE_seohyeon_distance_longer_l42_4290

/-- Proves that Seohyeon's distance to school is longer than Kunwoo's. -/
theorem seohyeon_distance_longer (kunwoo_distance : ℝ) (seohyeon_distance : ℝ) 
  (h1 : kunwoo_distance = 3.97) 
  (h2 : seohyeon_distance = 4028) : 
  seohyeon_distance > kunwoo_distance * 1000 :=
by
  sorry

#check seohyeon_distance_longer

end NUMINAMATH_CALUDE_seohyeon_distance_longer_l42_4290


namespace NUMINAMATH_CALUDE_total_snow_is_0_53_l42_4211

/-- The amount of snow on Monday in inches -/
def snow_monday : ℝ := 0.32

/-- The amount of snow on Tuesday in inches -/
def snow_tuesday : ℝ := 0.21

/-- The total amount of snow on Monday and Tuesday combined -/
def total_snow : ℝ := snow_monday + snow_tuesday

/-- Theorem stating that the total snow on Monday and Tuesday is 0.53 inches -/
theorem total_snow_is_0_53 : total_snow = 0.53 := by
  sorry

end NUMINAMATH_CALUDE_total_snow_is_0_53_l42_4211


namespace NUMINAMATH_CALUDE_park_tree_count_l42_4279

/-- Given an initial number of trees and a number of trees to be planted,
    this function calculates the final number of trees. -/
def final_tree_count (initial_trees planted_trees : ℕ) : ℕ :=
  initial_trees + planted_trees

/-- Theorem stating that given 25 initial trees and 73 trees to be planted,
    the final number of trees will be 98. -/
theorem park_tree_count : final_tree_count 25 73 = 98 := by
  sorry

end NUMINAMATH_CALUDE_park_tree_count_l42_4279


namespace NUMINAMATH_CALUDE_function_satisfies_equation_l42_4261

theorem function_satisfies_equation (x : ℝ) : 
  let f : ℝ → ℝ := λ x ↦ (x - 3) / (x^2 - x + 4)
  2 * f (1 - x) + 1 = x * f x := by
  sorry

end NUMINAMATH_CALUDE_function_satisfies_equation_l42_4261


namespace NUMINAMATH_CALUDE_marching_band_theorem_l42_4272

def marching_band_ratio (total_members brass_players : ℕ) : Prop :=
  ∃ (percussion woodwind : ℕ),
    -- Total members condition
    total_members = percussion + woodwind + brass_players ∧
    -- Woodwind is twice brass
    woodwind = 2 * brass_players ∧
    -- Percussion is a multiple of woodwind
    ∃ (k : ℕ), percussion = k * woodwind ∧
    -- Ratio of percussion to woodwind is 4:1
    percussion = 4 * woodwind

theorem marching_band_theorem :
  marching_band_ratio 110 10 := by
  sorry

end NUMINAMATH_CALUDE_marching_band_theorem_l42_4272


namespace NUMINAMATH_CALUDE_inequality_proof_l42_4224

theorem inequality_proof (a b c d e : ℝ) 
  (h_pos : a > 0 ∧ b > 0 ∧ c > 0 ∧ d > 0 ∧ e > 0) 
  (h_prod : a * b * c * d * e = 1) : 
  (a + a*b*c) / (1 + a*b + a*b*c*d) + 
  (b + b*c*d) / (1 + b*c + b*c*d*e) + 
  (c + c*d*e) / (1 + c*d + c*d*e*a) + 
  (d + d*e*a) / (1 + d*e + d*e*a*b) + 
  (e + e*a*b) / (1 + e*a + e*a*b*c) ≥ 10/3 := by
sorry

end NUMINAMATH_CALUDE_inequality_proof_l42_4224


namespace NUMINAMATH_CALUDE_partial_fraction_decomposition_l42_4257

theorem partial_fraction_decomposition (x : ℝ) (h1 : x ≠ 2) (h2 : x ≠ 4) :
  5 * x + 1 = (x - 4) * (x - 2)^3 * (21 / (8 * (x - 4)) + 19 / (4 * (x - 2)) + (-11) / (2 * (x - 2)^3)) := by
sorry

end NUMINAMATH_CALUDE_partial_fraction_decomposition_l42_4257


namespace NUMINAMATH_CALUDE_simple_interest_problem_l42_4264

theorem simple_interest_problem (P R : ℝ) : 
  P > 0 → R > 0 → 
  P * (R + 3) * 3 / 100 - P * R * 3 / 100 = 90 → 
  P = 1000 := by
  sorry

end NUMINAMATH_CALUDE_simple_interest_problem_l42_4264


namespace NUMINAMATH_CALUDE_bridget_skittles_l42_4299

/-- If Bridget has 4 Skittles, Henry has 4 Skittles, and Henry gives all of his Skittles to Bridget,
    then Bridget will have 8 Skittles in total. -/
theorem bridget_skittles (bridget_initial : ℕ) (henry_initial : ℕ)
    (h1 : bridget_initial = 4)
    (h2 : henry_initial = 4) :
    bridget_initial + henry_initial = 8 := by
  sorry

end NUMINAMATH_CALUDE_bridget_skittles_l42_4299


namespace NUMINAMATH_CALUDE_negative_root_implies_a_less_than_neg_three_l42_4296

theorem negative_root_implies_a_less_than_neg_three (a : ℝ) :
  (∃ x : ℝ, x < 0 ∧ 5^x = (a + 3) / (a - 3)) → a < -3 :=
by sorry

end NUMINAMATH_CALUDE_negative_root_implies_a_less_than_neg_three_l42_4296


namespace NUMINAMATH_CALUDE_l_shape_placements_l42_4275

/-- Represents a 3x3 grid --/
def Grid := Fin 3 → Fin 3 → Bool

/-- Represents an L-shaped figure composed of 3 small squares --/
structure LShape :=
  (orientation : Fin 4)
  (position : Fin 3 × Fin 3)

/-- Checks if an L-shaped figure is valid within the grid --/
def isValidPlacement (g : Grid) (l : LShape) : Bool :=
  sorry

/-- Counts the number of valid placements of the L-shaped figure in the grid --/
def countValidPlacements (g : Grid) : Nat :=
  sorry

/-- The main theorem stating that there are 48 ways to place the L-shaped figure --/
theorem l_shape_placements :
  ∀ g : Grid, countValidPlacements g = 48 :=
sorry

end NUMINAMATH_CALUDE_l_shape_placements_l42_4275


namespace NUMINAMATH_CALUDE_kay_family_age_difference_l42_4295

/-- Given Kay's family information, prove the age difference. -/
theorem kay_family_age_difference :
  ∀ (kay_age youngest_age oldest_age : ℕ),
    kay_age = 32 →
    oldest_age = 44 →
    oldest_age = 4 * youngest_age →
    (kay_age / 2 : ℚ) - youngest_age = 5 := by
  sorry

end NUMINAMATH_CALUDE_kay_family_age_difference_l42_4295


namespace NUMINAMATH_CALUDE_books_sold_in_garage_sale_l42_4221

theorem books_sold_in_garage_sale 
  (initial_books : ℝ)
  (books_given_to_friend : ℝ)
  (final_books : ℝ)
  (h1 : initial_books = 284.5)
  (h2 : books_given_to_friend = 63.7)
  (h3 : final_books = 112.3) :
  initial_books - books_given_to_friend - final_books = 108.5 :=
by
  sorry

#eval 284.5 - 63.7 - 112.3  -- This should evaluate to 108.5

end NUMINAMATH_CALUDE_books_sold_in_garage_sale_l42_4221


namespace NUMINAMATH_CALUDE_train_length_calculation_l42_4205

/-- Calculates the length of a train given its speed, bridge length, and time to pass the bridge. -/
theorem train_length_calculation (train_speed : Real) (bridge_length : Real) (time_to_pass : Real) :
  let speed_m_s : Real := train_speed * 1000 / 3600
  let total_distance : Real := speed_m_s * time_to_pass
  let train_length : Real := total_distance - bridge_length
  train_speed = 60 ∧ bridge_length = 800 ∧ time_to_pass = 72 →
  (train_length ≥ 400.24 ∧ train_length ≤ 400.25) := by
  sorry

#check train_length_calculation

end NUMINAMATH_CALUDE_train_length_calculation_l42_4205


namespace NUMINAMATH_CALUDE_triangle_problem_l42_4273

/-- Given a triangle ABC with sides a, b, c opposite to angles A, B, C respectively,
    prove the values of b and cos(2B - π/3) under specific conditions. -/
theorem triangle_problem (A B C : ℝ) (a b c : ℝ) :
  b * Real.sin A = 3 * c * Real.sin B →
  a = 3 →
  Real.cos B = 2/3 →
  b = Real.sqrt 6 ∧ Real.cos (2*B - π/3) = (4 * Real.sqrt 15 - 1) / 18 := by
  sorry

end NUMINAMATH_CALUDE_triangle_problem_l42_4273


namespace NUMINAMATH_CALUDE_max_value_sqrt_sum_l42_4217

theorem max_value_sqrt_sum (x : ℝ) (h : 0 ≤ x ∧ x ≤ 18) :
  Real.sqrt (35 - x) + Real.sqrt x + Real.sqrt (18 - x) ≤ Real.sqrt 35 + Real.sqrt 18 := by
  sorry

end NUMINAMATH_CALUDE_max_value_sqrt_sum_l42_4217


namespace NUMINAMATH_CALUDE_boys_usual_time_to_school_l42_4271

/-- Proves that if a boy walks at 7/6 of his usual rate and arrives at school 4 minutes early, 
    his usual time to reach school is 28 minutes. -/
theorem boys_usual_time_to_school (usual_rate : ℝ) (usual_time : ℝ) 
  (h1 : usual_rate > 0) 
  (h2 : usual_time > 0) 
  (h3 : usual_rate * usual_time = (7/6 * usual_rate) * (usual_time - 4)) : 
  usual_time = 28 := by
sorry

end NUMINAMATH_CALUDE_boys_usual_time_to_school_l42_4271


namespace NUMINAMATH_CALUDE_quadratic_two_roots_l42_4207

theorem quadratic_two_roots (m : ℝ) (h : m < (1 : ℝ) / 4) :
  ∃ x₁ x₂ : ℝ, x₁ ≠ x₂ ∧ x₁^2 - x₁ + m = 0 ∧ x₂^2 - x₂ + m = 0 := by
  sorry

end NUMINAMATH_CALUDE_quadratic_two_roots_l42_4207


namespace NUMINAMATH_CALUDE_complex_subtraction_l42_4270

theorem complex_subtraction (a b : ℂ) (h1 : a = 5 - 3*I) (h2 : b = 2 + 3*I) :
  a - 3*b = -1 - 12*I := by
  sorry

end NUMINAMATH_CALUDE_complex_subtraction_l42_4270


namespace NUMINAMATH_CALUDE_west_distance_negative_l42_4218

-- Define a type for direction
inductive Direction
  | East
  | West

-- Define a function to record distance based on direction
def recordDistance (distance : ℝ) (direction : Direction) : ℝ :=
  match direction with
  | Direction.East => distance
  | Direction.West => -distance

-- Theorem statement
theorem west_distance_negative (d : ℝ) :
  d > 0 → recordDistance d Direction.East = d → recordDistance d Direction.West = -d :=
by
  sorry

end NUMINAMATH_CALUDE_west_distance_negative_l42_4218


namespace NUMINAMATH_CALUDE_longFurredBrownCount_l42_4246

/-- Represents the number of dogs in a kennel with specific characteristics. -/
structure DogKennel where
  total : ℕ
  longFurred : ℕ
  brown : ℕ
  neither : ℕ

/-- Calculates the number of long-furred brown dogs in the kennel. -/
def longFurredBrown (k : DogKennel) : ℕ :=
  k.longFurred + k.brown - (k.total - k.neither)

/-- Theorem stating the number of long-furred brown dogs in a specific kennel configuration. -/
theorem longFurredBrownCount :
  let k : DogKennel := {
    total := 45,
    longFurred := 26,
    brown := 30,
    neither := 8
  }
  longFurredBrown k = 27 := by sorry

end NUMINAMATH_CALUDE_longFurredBrownCount_l42_4246


namespace NUMINAMATH_CALUDE_perpendicular_vectors_m_value_l42_4233

/-- Given two vectors a and b in ℝ², prove that if (a - b) is perpendicular
    to (m * a + b), then m = 1/4. -/
theorem perpendicular_vectors_m_value 
  (a b : ℝ × ℝ) 
  (ha : a = (2, 1)) 
  (hb : b = (1, -1)) 
  (h_perp : (a.1 - b.1) * (m * a.1 + b.1) + (a.2 - b.2) * (m * a.2 + b.2) = 0) : 
  m = 1/4 := by
  sorry

end NUMINAMATH_CALUDE_perpendicular_vectors_m_value_l42_4233


namespace NUMINAMATH_CALUDE_cubic_sum_equals_zero_l42_4278

theorem cubic_sum_equals_zero (a b c : ℝ) :
  a^2 + b^2 + c^2 - 2*(a + b + c) + 3 = 0 →
  a^3 + b^3 + c^3 - 3*a*b*c = 0 := by
  sorry

end NUMINAMATH_CALUDE_cubic_sum_equals_zero_l42_4278


namespace NUMINAMATH_CALUDE_quadrilateral_trapezoid_or_parallelogram_l42_4204

/-- A quadrilateral with areas of triangles formed by diagonals -/
structure Quadrilateral where
  s₁ : ℝ
  s₂ : ℝ
  s₃ : ℝ
  s₄ : ℝ
  area_positive : s₁ > 0 ∧ s₂ > 0 ∧ s₃ > 0 ∧ s₄ > 0

/-- Definition of a trapezoid or parallelogram based on triangle areas -/
def is_trapezoid_or_parallelogram (q : Quadrilateral) : Prop :=
  q.s₁ = q.s₃ ∨ q.s₂ = q.s₄

/-- The main theorem -/
theorem quadrilateral_trapezoid_or_parallelogram (q : Quadrilateral) :
  (q.s₁ + q.s₂) * (q.s₃ + q.s₄) = (q.s₁ + q.s₄) * (q.s₂ + q.s₃) →
  is_trapezoid_or_parallelogram q :=
by sorry


end NUMINAMATH_CALUDE_quadrilateral_trapezoid_or_parallelogram_l42_4204


namespace NUMINAMATH_CALUDE_constant_curvature_curves_l42_4263

/-- A plane curve is a continuous function from ℝ to ℝ² --/
def PlaneCurve := ℝ → ℝ × ℝ

/-- The curvature of a plane curve at a point --/
noncomputable def curvature (γ : PlaneCurve) (t : ℝ) : ℝ := sorry

/-- A curve has constant curvature if its curvature is the same at all points --/
def has_constant_curvature (γ : PlaneCurve) : Prop :=
  ∃ k : ℝ, ∀ t : ℝ, curvature γ t = k

/-- A straight line --/
def is_straight_line (γ : PlaneCurve) : Prop :=
  ∃ a b : ℝ × ℝ, ∀ t : ℝ, γ t = a + t • (b - a)

/-- A circle --/
def is_circle (γ : PlaneCurve) : Prop :=
  ∃ c : ℝ × ℝ, ∃ r : ℝ, r > 0 ∧ ∀ t : ℝ, ‖γ t - c‖ = r

/-- Theorem: The only plane curves with constant curvature are straight lines and circles --/
theorem constant_curvature_curves (γ : PlaneCurve) :
  has_constant_curvature γ ↔ is_straight_line γ ∨ is_circle γ :=
sorry

end NUMINAMATH_CALUDE_constant_curvature_curves_l42_4263


namespace NUMINAMATH_CALUDE_tree_age_at_height_l42_4241

/-- Represents the growth of a tree over time. -/
def tree_growth (initial_height : ℝ) (growth_rate : ℝ) (initial_age : ℝ) (years : ℝ) : ℝ :=
  initial_height + growth_rate * years

/-- Theorem stating the age of the tree when it reaches a specific height. -/
theorem tree_age_at_height (initial_height : ℝ) (growth_rate : ℝ) (initial_age : ℝ) (final_height : ℝ) :
  initial_height = 5 →
  growth_rate = 3 →
  initial_age = 1 →
  final_height = 23 →
  ∃ (years : ℝ), tree_growth initial_height growth_rate initial_age years = final_height ∧ initial_age + years = 7 :=
by
  sorry


end NUMINAMATH_CALUDE_tree_age_at_height_l42_4241


namespace NUMINAMATH_CALUDE_range_of_a_l42_4262

theorem range_of_a (a : ℝ) : 
  (¬∀ x : ℝ, |1 - x| - |x - 5| < a → False) → a > 4 := by
  sorry

end NUMINAMATH_CALUDE_range_of_a_l42_4262


namespace NUMINAMATH_CALUDE_quadratic_function_inequality_l42_4210

/-- Given a quadratic function f(x) = ax² + bx + c, where a, b, c are constants,
    and its derivative f'(x), if f(x) ≥ f'(x) for all x ∈ ℝ,
    then the maximum value of b²/(a² + c²) is 2√2 - 2. -/
theorem quadratic_function_inequality (a b c : ℝ) : 
  (∀ x, a * x^2 + b * x + c ≥ 2 * a * x + b) → 
  a > 0 → 
  (∃ M, M = 2 * Real.sqrt 2 - 2 ∧ 
    b^2 / (a^2 + c^2) ≤ M ∧ 
    ∀ N, (∀ a' b' c', (∀ x, a' * x^2 + b' * x + c' ≥ 2 * a' * x + b') → 
      a' > 0 → b'^2 / (a'^2 + c'^2) ≤ N) → 
    M ≤ N) :=
sorry

end NUMINAMATH_CALUDE_quadratic_function_inequality_l42_4210


namespace NUMINAMATH_CALUDE_cubic_root_ratio_l42_4287

theorem cubic_root_ratio (a b c d : ℝ) (h : ∀ x : ℝ, a * x^3 + b * x^2 + c * x + d = 0 ↔ x = 3 ∨ x = 4 ∨ x = 5) :
  c / d = 47 / 60 := by
sorry

end NUMINAMATH_CALUDE_cubic_root_ratio_l42_4287


namespace NUMINAMATH_CALUDE_smaller_number_in_ratio_l42_4242

theorem smaller_number_in_ratio (a b c x y : ℝ) : 
  0 < a → a < b → x > 0 → y > 0 → x / y = a / b → x * y = c → 
  x < y ∧ x = Real.sqrt (a * c / b) := by
  sorry

end NUMINAMATH_CALUDE_smaller_number_in_ratio_l42_4242


namespace NUMINAMATH_CALUDE_class_outing_minimum_fee_l42_4253

/-- Calculates the minimum rental fee for a class outing --/
def minimum_rental_fee (total_students : ℕ) (small_boat_capacity : ℕ) (small_boat_cost : ℕ) 
  (large_boat_capacity : ℕ) (large_boat_cost : ℕ) : ℕ :=
  sorry

/-- Theorem stating the minimum rental fee for the given conditions --/
theorem class_outing_minimum_fee : 
  minimum_rental_fee 48 3 16 5 24 = 232 := by
  sorry

end NUMINAMATH_CALUDE_class_outing_minimum_fee_l42_4253


namespace NUMINAMATH_CALUDE_rectangle_cut_and_rearrange_l42_4228

/-- Represents a rectangle with width and height -/
structure Rectangle where
  width : ℕ
  height : ℕ

/-- Calculates the area of a rectangle -/
def Rectangle.area (r : Rectangle) : ℕ := r.width * r.height

/-- Represents a cut of a rectangle into two parts -/
structure Cut where
  original : Rectangle
  part1 : Rectangle
  part2 : Rectangle

/-- Checks if a cut is valid (preserves area) -/
def Cut.isValid (c : Cut) : Prop :=
  c.original.area = c.part1.area + c.part2.area

/-- Theorem: A 14x6 rectangle can be cut into two parts that form a 21x4 rectangle -/
theorem rectangle_cut_and_rearrange :
  ∃ (c : Cut),
    c.original = { width := 14, height := 6 } ∧
    c.isValid ∧
    ∃ (new : Rectangle),
      new = { width := 21, height := 4 } ∧
      new.area = c.part1.area + c.part2.area :=
sorry

end NUMINAMATH_CALUDE_rectangle_cut_and_rearrange_l42_4228


namespace NUMINAMATH_CALUDE_leak_emptying_time_l42_4291

/-- Given a tank with specified capacity and inlet rate, proves the time taken for a leak to empty the tank. -/
theorem leak_emptying_time (tank_capacity : ℝ) (inlet_rate_per_minute : ℝ) (emptying_time_with_inlet : ℝ) 
  (h1 : tank_capacity = 1440)
  (h2 : inlet_rate_per_minute = 6)
  (h3 : emptying_time_with_inlet = 12) :
  (tank_capacity / (inlet_rate_per_minute * 60 + tank_capacity / emptying_time_with_inlet)) = 3 := by
  sorry

end NUMINAMATH_CALUDE_leak_emptying_time_l42_4291


namespace NUMINAMATH_CALUDE_delta_u_zero_l42_4235

def u (n : ℕ) : ℤ := n^3 - n

def delta (k : ℕ) : (ℕ → ℤ) → (ℕ → ℤ) :=
  match k with
  | 0 => id
  | k+1 => fun f n => f (n+1) - f n

theorem delta_u_zero (k : ℕ) :
  (∀ n, delta k u n = 0) ↔ k ≥ 4 :=
sorry

end NUMINAMATH_CALUDE_delta_u_zero_l42_4235
