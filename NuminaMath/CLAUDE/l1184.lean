import Mathlib

namespace NUMINAMATH_CALUDE_second_guldin_theorem_l1184_118434

/-- A plate with an arbitrary boundary -/
structure ArbitraryPlate where
  area : ℝ
  centerOfMass : ℝ × ℝ × ℝ

/-- The volume generated by rotating an arbitrary plate around an axis -/
def rotationVolume (plate : ArbitraryPlate) (axisDistance : ℝ) : ℝ := sorry

/-- The second Guldin's theorem for an arbitrary plate -/
theorem second_guldin_theorem (plate : ArbitraryPlate) (axisDistance : ℝ) :
  rotationVolume plate axisDistance = 2 * Real.pi * plate.area * axisDistance := by
  sorry

end NUMINAMATH_CALUDE_second_guldin_theorem_l1184_118434


namespace NUMINAMATH_CALUDE_least_people_for_cheaper_second_service_l1184_118485

/-- Represents a catering service with a basic fee and per-person charge -/
structure CateringService where
  basicFee : ℕ
  perPersonCharge : ℕ

/-- Calculates the total cost for a catering service given the number of people -/
def totalCost (service : CateringService) (people : ℕ) : ℕ :=
  service.basicFee + service.perPersonCharge * people

/-- The first catering service -/
def service1 : CateringService := { basicFee := 150, perPersonCharge := 18 }

/-- The second catering service -/
def service2 : CateringService := { basicFee := 250, perPersonCharge := 15 }

/-- Theorem stating that 34 is the least number of people for which the second service is cheaper -/
theorem least_people_for_cheaper_second_service :
  (∀ n : ℕ, n < 34 → totalCost service1 n ≤ totalCost service2 n) ∧
  totalCost service2 34 < totalCost service1 34 := by
  sorry

end NUMINAMATH_CALUDE_least_people_for_cheaper_second_service_l1184_118485


namespace NUMINAMATH_CALUDE_subset_quadratic_linear_l1184_118420

theorem subset_quadratic_linear (a : ℝ) : 
  let M : Set ℝ := {x | x^2 + x - 6 = 0}
  let N : Set ℝ := {x | a*x - 1 = 0}
  N ⊆ M → (a = 1/2 ∨ a = -1/3) :=
by
  sorry

#check subset_quadratic_linear

end NUMINAMATH_CALUDE_subset_quadratic_linear_l1184_118420


namespace NUMINAMATH_CALUDE_first_student_time_l1184_118453

/-- Given a race with 4 students, if the average time of the last 3 students is 35 seconds,
    and the average time of all 4 students is 30 seconds, 
    then the time of the first student is 15 seconds. -/
theorem first_student_time (time_first : ℝ) (time_last_three : ℝ → ℝ → ℝ → ℝ) : 
  (∀ t₁ t₂ t₃, (time_last_three t₁ t₂ t₃) / 3 = 35) →
  (time_first + (time_last_three (35 : ℝ) 35 35)) / 4 = 30 →
  time_first = 15 := by
sorry

end NUMINAMATH_CALUDE_first_student_time_l1184_118453


namespace NUMINAMATH_CALUDE_solution_set_of_inequality_l1184_118417

theorem solution_set_of_inequality (x : ℝ) : 
  (2 * x) / (3 * x - 1) > 1 ↔ 1/3 < x ∧ x < 1 := by
  sorry

end NUMINAMATH_CALUDE_solution_set_of_inequality_l1184_118417


namespace NUMINAMATH_CALUDE_distance_from_origin_l1184_118467

theorem distance_from_origin (x : ℝ) : 
  |x| = Real.sqrt 5 ↔ x = Real.sqrt 5 ∨ x = -Real.sqrt 5 := by sorry

end NUMINAMATH_CALUDE_distance_from_origin_l1184_118467


namespace NUMINAMATH_CALUDE_divisibility_by_seventeen_l1184_118452

theorem divisibility_by_seventeen (x : ℤ) (y z w : ℕ) 
  (hy : Odd y) (hz : Odd z) (hw : Odd w) : 
  17 ∣ (x^(y^(y^w)) - x^(y^2)) :=
sorry

end NUMINAMATH_CALUDE_divisibility_by_seventeen_l1184_118452


namespace NUMINAMATH_CALUDE_scooter_profit_percentage_l1184_118411

theorem scooter_profit_percentage 
  (C : ℝ)  -- Cost of the scooter
  (h1 : C * 0.1 = 500)  -- 10% of cost spent on repairs
  (h2 : C + 1100 = C * 1.22)  -- Sold for a profit of $1100, which is 22% more than cost
  : (1100 / C) * 100 = 22 :=
by sorry

end NUMINAMATH_CALUDE_scooter_profit_percentage_l1184_118411


namespace NUMINAMATH_CALUDE_min_value_of_2a_plus_b_l1184_118433

/-- Given a line x/a + y/b = 1 where a > 0 and b > 0, and the line passes through the point (1, 2),
    the minimum value of 2a + b is 8. -/
theorem min_value_of_2a_plus_b (a b : ℝ) (ha : a > 0) (hb : b > 0) 
  (h_line : ∀ x y : ℝ, x / a + y / b = 1 → x = 1 ∧ y = 2) :
  (∀ a' b' : ℝ, a' > 0 → b' > 0 → 
    (∀ x y : ℝ, x / a' + y / b' = 1 → x = 1 ∧ y = 2) → 
    2 * a' + b' ≥ 2 * a + b) ∧
  2 * a + b = 8 :=
sorry

end NUMINAMATH_CALUDE_min_value_of_2a_plus_b_l1184_118433


namespace NUMINAMATH_CALUDE_seven_balls_two_boxes_l1184_118418

def distribute_balls (n : ℕ) : ℕ :=
  Finset.sum (Finset.range (n / 2 + 1)) (λ k => Nat.choose n k)

theorem seven_balls_two_boxes : distribute_balls 7 = 64 := by
  sorry

end NUMINAMATH_CALUDE_seven_balls_two_boxes_l1184_118418


namespace NUMINAMATH_CALUDE_pentagon_section_probability_l1184_118474

/-- The probability of an arrow stopping in a specific section of a pentagon divided into 5 equal sections is 1/5. -/
theorem pentagon_section_probability :
  ∀ (n : ℕ) (sections : ℕ),
    sections = 5 →
    n ≤ sections →
    (n : ℚ) / (sections : ℚ) = 1 / 5 :=
by sorry

end NUMINAMATH_CALUDE_pentagon_section_probability_l1184_118474


namespace NUMINAMATH_CALUDE_max_abc_value_l1184_118415

theorem max_abc_value (a b c : ℕ+) 
  (h1 : a * b + b * c = 518)
  (h2 : a * b - a * c = 360) :
  (∀ x y z : ℕ+, x * y + y * z = 518 → x * y - x * z = 360 → a * b * c ≥ x * y * z) ∧ 
  a * b * c = 1008 :=
sorry

end NUMINAMATH_CALUDE_max_abc_value_l1184_118415


namespace NUMINAMATH_CALUDE_abc_inequality_l1184_118497

theorem abc_inequality : 
  let a : ℝ := -(0.3^2)
  let b : ℝ := 3⁻¹
  let c : ℝ := (-1/3)^0
  a < b ∧ b < c := by sorry

end NUMINAMATH_CALUDE_abc_inequality_l1184_118497


namespace NUMINAMATH_CALUDE_certain_number_proof_l1184_118484

theorem certain_number_proof (h : 2994 / 14.5 = 171) : 
  ∃ x : ℝ, x / 1.45 = 17.1 ∧ x = 24.795 := by
sorry

end NUMINAMATH_CALUDE_certain_number_proof_l1184_118484


namespace NUMINAMATH_CALUDE_folded_paper_sum_l1184_118459

/-- Represents a point in 2D space -/
structure Point where
  x : ℚ
  y : ℚ

/-- Represents a folded piece of graph paper -/
structure FoldedPaper where
  p1 : Point
  p2 : Point
  p3 : Point
  p4 : Point
  h1 : p1 = ⟨3, 3⟩
  h2 : p2 = ⟨7, 1⟩
  h3 : p3 = ⟨9, 4⟩

/-- The theorem to be proven -/
theorem folded_paper_sum (paper : FoldedPaper) : paper.p4.x + paper.p4.y = 28/3 := by
  sorry


end NUMINAMATH_CALUDE_folded_paper_sum_l1184_118459


namespace NUMINAMATH_CALUDE_parabola_equation_l1184_118423

-- Define a parabola
structure Parabola where
  equation : ℝ → ℝ → Prop

-- Define the condition that the parabola passes through a point
def passes_through (p : Parabola) (x y : ℝ) : Prop :=
  p.equation x y

-- Define the condition that the vertex is at the origin
def vertex_at_origin (p : Parabola) : Prop :=
  p.equation 0 0

-- Define the condition that the axis of symmetry is a coordinate axis
def axis_is_coordinate (p : Parabola) : Prop :=
  (∀ x y : ℝ, p.equation x y ↔ p.equation x (-y)) ∨
  (∀ x y : ℝ, p.equation x y ↔ p.equation (-x) y)

-- Theorem statement
theorem parabola_equation 
  (p : Parabola) 
  (h1 : vertex_at_origin p) 
  (h2 : axis_is_coordinate p) 
  (h3 : passes_through p (-2) (-4)) :
  (∀ x y : ℝ, p.equation x y ↔ y^2 = -8*x) ∨
  (∀ x y : ℝ, p.equation x y ↔ x^2 = -y) :=
sorry

end NUMINAMATH_CALUDE_parabola_equation_l1184_118423


namespace NUMINAMATH_CALUDE_mechanics_total_charge_l1184_118481

/-- Calculates the total charge for two mechanics given their hourly rates, total combined work time, and the second mechanic's work time. -/
theorem mechanics_total_charge 
  (rate1 : ℕ) 
  (rate2 : ℕ) 
  (total_hours : ℕ) 
  (hours2 : ℕ) : 
  rate1 = 45 → 
  rate2 = 85 → 
  total_hours = 20 → 
  hours2 = 5 → 
  rate1 * (total_hours - hours2) + rate2 * hours2 = 1100 := by
sorry

end NUMINAMATH_CALUDE_mechanics_total_charge_l1184_118481


namespace NUMINAMATH_CALUDE_nonzero_terms_count_l1184_118437

def expression (x : ℝ) : ℝ := (2*x + 5)*(3*x^2 + 4*x + 8) - 4*(x^3 - x^2 + 5*x + 2)

theorem nonzero_terms_count : 
  ∃ (a b c d : ℝ), ∀ x : ℝ, 
    expression x = a*x^3 + b*x^2 + c*x + d ∧ 
    a ≠ 0 ∧ b ≠ 0 ∧ c ≠ 0 ∧ d ≠ 0 :=
sorry

end NUMINAMATH_CALUDE_nonzero_terms_count_l1184_118437


namespace NUMINAMATH_CALUDE_square_58_sexagesimal_l1184_118438

/-- Represents a number in sexagesimal form a•b, where the value is a*60 + b -/
structure Sexagesimal where
  a : ℕ
  b : ℕ
  h : b < 60

/-- Converts a natural number to its sexagesimal representation -/
def to_sexagesimal (n : ℕ) : Sexagesimal :=
  ⟨n / 60, n % 60, sorry⟩

/-- The statement to be proved -/
theorem square_58_sexagesimal : 
  to_sexagesimal (58^2) = Sexagesimal.mk 56 4 sorry := by sorry

end NUMINAMATH_CALUDE_square_58_sexagesimal_l1184_118438


namespace NUMINAMATH_CALUDE_lcm_16_24_l1184_118499

theorem lcm_16_24 : Nat.lcm 16 24 = 48 := by
  sorry

end NUMINAMATH_CALUDE_lcm_16_24_l1184_118499


namespace NUMINAMATH_CALUDE_smallest_mu_inequality_l1184_118462

theorem smallest_mu_inequality (a b c d : ℝ) (ha : a ≥ 0) (hb : b ≥ 0) (hc : c ≥ 0) (hd : d ≥ 0) :
  (∀ μ : ℝ, (∀ a b c d : ℝ, a ≥ 0 → b ≥ 0 → c ≥ 0 → d ≥ 0 → 
    a^2 + b^2 + c^2 + d^2 + 2*a*d ≥ μ*(a*b + b*c + c*d)) → μ ≥ 2) ∧
  (∀ a b c d : ℝ, a ≥ 0 → b ≥ 0 → c ≥ 0 → d ≥ 0 → 
    a^2 + b^2 + c^2 + d^2 + 2*a*d ≥ 2*(a*b + b*c + c*d)) :=
by sorry

end NUMINAMATH_CALUDE_smallest_mu_inequality_l1184_118462


namespace NUMINAMATH_CALUDE_least_prime_factor_of_N_l1184_118427

def N : ℕ := 10^2011 + 1

theorem least_prime_factor_of_N :
  (Nat.minFac N = 11) := by sorry

end NUMINAMATH_CALUDE_least_prime_factor_of_N_l1184_118427


namespace NUMINAMATH_CALUDE_number_division_problem_l1184_118404

theorem number_division_problem (x : ℝ) : (x / 2.5) / 3.1 + 3.1 = 8.9 → x = 44.95 := by
  sorry

end NUMINAMATH_CALUDE_number_division_problem_l1184_118404


namespace NUMINAMATH_CALUDE_solution_triples_l1184_118448

theorem solution_triples : ∀ (a b c : ℝ),
  (a^2 + a*b + c = 0 ∧ b^2 + b*c + a = 0 ∧ c^2 + c*a + b = 0) →
  ((a = 0 ∧ b = 0 ∧ c = 0) ∨ (a = -1/2 ∧ b = -1/2 ∧ c = -1/2)) :=
by sorry

end NUMINAMATH_CALUDE_solution_triples_l1184_118448


namespace NUMINAMATH_CALUDE_numerical_trick_l1184_118430

theorem numerical_trick (x : ℝ) : ((6 * x - 21) / 3) - 2 * x = -7 := by
  sorry

end NUMINAMATH_CALUDE_numerical_trick_l1184_118430


namespace NUMINAMATH_CALUDE_profit_percentage_problem_l1184_118413

/-- Given that the cost price of 20 articles equals the selling price of x articles,
    and the profit percentage is 25%, prove that x equals 16. -/
theorem profit_percentage_problem (x : ℝ) 
  (h1 : 20 * cost_price = x * selling_price)
  (h2 : selling_price = 1.25 * cost_price) : 
  x = 16 := by
  sorry

end NUMINAMATH_CALUDE_profit_percentage_problem_l1184_118413


namespace NUMINAMATH_CALUDE_muffin_division_l1184_118435

theorem muffin_division (total_muffins : ℕ) (friends : ℕ) (muffins_per_person : ℕ) :
  total_muffins = 20 →
  friends = 4 →
  muffins_per_person * (friends + 1) = total_muffins →
  muffins_per_person = 4 :=
by
  sorry


end NUMINAMATH_CALUDE_muffin_division_l1184_118435


namespace NUMINAMATH_CALUDE_cube_sum_divisibility_l1184_118496

theorem cube_sum_divisibility (x y z : ℤ) (h : x^3 + y^3 = z^3) :
  3 ∣ x ∨ 3 ∣ y ∨ 3 ∣ z := by
  sorry

end NUMINAMATH_CALUDE_cube_sum_divisibility_l1184_118496


namespace NUMINAMATH_CALUDE_photo_arrangements_l1184_118490

/-- The number of male students -/
def num_male : Nat := 4

/-- The number of female students -/
def num_female : Nat := 3

/-- The total number of students -/
def total_students : Nat := num_male + num_female

/-- Calculates the number of arrangements with male student A at one end -/
def arrangements_A_at_end : Nat :=
  2 * Nat.factorial (total_students - 1)

/-- Calculates the number of arrangements where female student B is not to the left of female student C -/
def arrangements_B_not_left_of_C : Nat :=
  Nat.factorial total_students / 2

/-- Calculates the number of arrangements where female student B is not at the ends and female student C is not in the middle -/
def arrangements_B_not_ends_C_not_middle : Nat :=
  Nat.factorial (total_students - 1) + 4 * 5 * Nat.factorial (total_students - 2)

theorem photo_arrangements :
  arrangements_A_at_end = 1440 ∧
  arrangements_B_not_left_of_C = 2520 ∧
  arrangements_B_not_ends_C_not_middle = 3120 := by
  sorry

end NUMINAMATH_CALUDE_photo_arrangements_l1184_118490


namespace NUMINAMATH_CALUDE_math_textbooks_in_one_box_l1184_118461

def total_textbooks : ℕ := 15
def math_textbooks : ℕ := 4
def num_boxes : ℕ := 3
def box_capacities : Fin 3 → ℕ := ![4, 5, 6]

def probability_all_math_in_one_box : ℚ := 1 / 143

theorem math_textbooks_in_one_box :
  let total_arrangements := (total_textbooks.choose (box_capacities 0)) * 
                            ((total_textbooks - box_capacities 0).choose (box_capacities 1)) * 
                            ((total_textbooks - box_capacities 0 - box_capacities 1).choose (box_capacities 2))
  let favorable_outcomes := (box_capacities 0).choose math_textbooks * 
                            ((total_textbooks - math_textbooks).choose (box_capacities 0 - math_textbooks)) * 
                            ((total_textbooks - box_capacities 0).choose (box_capacities 1)) +
                            (box_capacities 1).choose math_textbooks * 
                            ((total_textbooks - math_textbooks).choose (box_capacities 1 - math_textbooks)) * 
                            ((total_textbooks - box_capacities 1).choose (box_capacities 0)) +
                            (box_capacities 2).choose math_textbooks * 
                            ((total_textbooks - math_textbooks).choose (box_capacities 2 - math_textbooks)) * 
                            ((total_textbooks - box_capacities 2).choose (box_capacities 0))
  (favorable_outcomes : ℚ) / (total_arrangements : ℚ) = probability_all_math_in_one_box := by
  sorry

end NUMINAMATH_CALUDE_math_textbooks_in_one_box_l1184_118461


namespace NUMINAMATH_CALUDE_unique_modular_solution_l1184_118429

theorem unique_modular_solution (m : ℤ) : 
  (5 ≤ m ∧ m ≤ 9) → (m ≡ 5023 [ZMOD 6]) → m = 7 := by
  sorry

end NUMINAMATH_CALUDE_unique_modular_solution_l1184_118429


namespace NUMINAMATH_CALUDE_trig_simplification_l1184_118455

theorem trig_simplification (α : ℝ) : 
  (Real.sin (135 * π / 180 - 2 * α))^2 - 
  (Real.sin (210 * π / 180 - 2 * α))^2 - 
  Real.sin (195 * π / 180) * Real.cos (165 * π / 180 - 4 * α) = 
  Real.sin (4 * α) := by
sorry

end NUMINAMATH_CALUDE_trig_simplification_l1184_118455


namespace NUMINAMATH_CALUDE_cos_30_degree_calculation_l1184_118421

theorem cos_30_degree_calculation : 
  |Real.sqrt 3 - 1| - 2 * (Real.sqrt 3 / 2) = -1 := by sorry

end NUMINAMATH_CALUDE_cos_30_degree_calculation_l1184_118421


namespace NUMINAMATH_CALUDE_triangle_construction_possible_l1184_118428

-- Define the necessary types and structures
structure Point where
  x : ℝ
  y : ℝ

structure Line where
  a : ℝ
  b : ℝ
  c : ℝ

def Midpoint (A B M : Point) : Prop :=
  M.x = (A.x + B.x) / 2 ∧ M.y = (A.y + B.y) / 2

def OnLine (P : Point) (l : Line) : Prop :=
  l.a * P.x + l.b * P.y + l.c = 0

def AngleBisector (A B C : Point) (l : Line) : Prop :=
  -- This is a simplified representation of an angle bisector
  OnLine A l ∧ ∃ (P : Point), OnLine P l ∧ P ≠ A

-- Theorem statement
theorem triangle_construction_possible (l : Line) :
  ∃ (A B C N M : Point),
    Midpoint A C N ∧
    Midpoint B C M ∧
    AngleBisector A B C l :=
sorry

end NUMINAMATH_CALUDE_triangle_construction_possible_l1184_118428


namespace NUMINAMATH_CALUDE_min_value_fraction_sum_l1184_118464

theorem min_value_fraction_sum (a b : ℝ) (ha : a > 0) (hb : b > 0) (hab : a + b = 2) :
  (1 / a + 9 / b ≥ 8) ∧
  (1 / a + 9 / b = 8 ↔ a = 1/2 ∧ b = 3/2) :=
by sorry

end NUMINAMATH_CALUDE_min_value_fraction_sum_l1184_118464


namespace NUMINAMATH_CALUDE_south_movement_l1184_118406

-- Define a type for direction
inductive Direction
  | North
  | South

-- Define a function to represent movement
def movement (d : Direction) (distance : ℝ) : ℝ :=
  match d with
  | Direction.North => distance
  | Direction.South => -distance

-- Theorem statement
theorem south_movement :
  movement Direction.North 8 = 8 →
  movement Direction.South 5 = -5 :=
by
  sorry

end NUMINAMATH_CALUDE_south_movement_l1184_118406


namespace NUMINAMATH_CALUDE_inequality_proof_l1184_118412

theorem inequality_proof (a b c : ℝ) 
  (h_pos_a : 0 < a) (h_pos_b : 0 < b) (h_pos_c : 0 < c)
  (h_sum : a + b + c = 1) : 
  (1 + 9*a^2)/(1 + 2*a + 2*b^2 + 2*c^2) + 
  (1 + 9*b^2)/(1 + 2*b + 2*c^2 + 2*a^2) + 
  (1 + 9*c^2)/(1 + 2*c + 2*a^2 + 2*b^2) < 4 := by
  sorry

end NUMINAMATH_CALUDE_inequality_proof_l1184_118412


namespace NUMINAMATH_CALUDE_digit_seven_place_value_l1184_118422

theorem digit_seven_place_value (n : ℕ) (p : ℕ) : 
  7 * 10^p - 7 = 693 → p = 2 := by sorry

end NUMINAMATH_CALUDE_digit_seven_place_value_l1184_118422


namespace NUMINAMATH_CALUDE_range_of_b_l1184_118470

-- Define the circles and line
def circle_O (x y : ℝ) : Prop := x^2 + y^2 = 1
def circle_O1 (x y : ℝ) : Prop := (x - 4)^2 + y^2 = 4
def line_P (x y b : ℝ) : Prop := x + Real.sqrt 3 * y - b = 0

-- Define the condition for P satisfying PB = 2PA
def condition_P (x y : ℝ) : Prop := x^2 + y^2 + (8/3) * x - 16/3 = 0

-- Theorem statement
theorem range_of_b :
  ∀ b : ℝ, (∃! (p1 p2 : ℝ × ℝ), 
    p1 ≠ p2 ∧ 
    line_P p1.1 p1.2 b ∧ 
    line_P p2.1 p2.2 b ∧ 
    condition_P p1.1 p1.2 ∧ 
    condition_P p2.1 p2.2) ↔ 
  -20/3 < b ∧ b < 4 := by
sorry

end NUMINAMATH_CALUDE_range_of_b_l1184_118470


namespace NUMINAMATH_CALUDE_g_composition_of_2_l1184_118479

def g (x : ℕ) : ℕ :=
  if x % 3 = 0 then x / 3 else 5 * x + 1

theorem g_composition_of_2 : g (g (g (g 2))) = 1406 := by
  sorry

end NUMINAMATH_CALUDE_g_composition_of_2_l1184_118479


namespace NUMINAMATH_CALUDE_power_in_denominator_l1184_118495

theorem power_in_denominator (x : ℕ) : (10 ^ 655 / 10 ^ x = 100000) → x = 650 := by
  sorry

end NUMINAMATH_CALUDE_power_in_denominator_l1184_118495


namespace NUMINAMATH_CALUDE_min_distance_is_14000_l1184_118442

/-- Represents the problem of transporting and planting poles along a road -/
structure PolePlantingProblem where
  numPoles : ℕ
  startDistance : ℕ
  poleSpacing : ℕ
  maxPolesPerTrip : ℕ

/-- Calculates the minimum total distance traveled for a given pole planting problem -/
def minTotalDistance (p : PolePlantingProblem) : ℕ :=
  sorry

/-- The specific pole planting problem instance -/
def specificProblem : PolePlantingProblem :=
  { numPoles := 20
  , startDistance := 500
  , poleSpacing := 50
  , maxPolesPerTrip := 3 }

/-- Theorem stating that the minimum total distance for the specific problem is 14000 meters -/
theorem min_distance_is_14000 :
  minTotalDistance specificProblem = 14000 :=
sorry

end NUMINAMATH_CALUDE_min_distance_is_14000_l1184_118442


namespace NUMINAMATH_CALUDE_cubic_function_properties_l1184_118463

/-- A cubic function f(x) = ax³ - bx² + c with a > 0 -/
def f (a b c x : ℝ) : ℝ := a * x^3 - b * x^2 + c

/-- The derivative of f with respect to x -/
def f_deriv (a b x : ℝ) : ℝ := 3 * a * x^2 - 2 * b * x

theorem cubic_function_properties
  (a b c : ℝ)
  (ha : a > 0) :
  -- 1. Extreme points when b = 3a
  (b = 3 * a → (∀ x : ℝ, f_deriv a b x = 0 ↔ x = 0 ∨ x = 2)) ∧
  -- 2. Range of b when a = 1 and x²ln(x) ≥ f(x) - 2x - c for x ∈ [3,4]
  (a = 1 → (∀ x : ℝ, x ∈ Set.Icc 3 4 → x^2 * Real.log x ≥ f 1 b c x - 2*x - c) →
    b ≥ 7/2 - Real.log 4) ∧
  -- 3. Existence of three tangent lines
  (b = 3 * a → 5 * a < c → c < 6 * a →
    ∃ x₁ x₂ x₃ : ℝ, x₁ ≠ x₂ ∧ x₁ ≠ x₃ ∧ x₂ ≠ x₃ ∧
      f a b c x₁ + f_deriv a b x₁ * (2 - x₁) = a ∧
      f a b c x₂ + f_deriv a b x₂ * (2 - x₂) = a ∧
      f a b c x₃ + f_deriv a b x₃ * (2 - x₃) = a) :=
by sorry

end NUMINAMATH_CALUDE_cubic_function_properties_l1184_118463


namespace NUMINAMATH_CALUDE_circle_area_from_circumference_l1184_118403

theorem circle_area_from_circumference : 
  ∀ (r : ℝ), 
    (2 * π * r = 18 * π) → 
    (π * r^2 = 81 * π) := by
  sorry

end NUMINAMATH_CALUDE_circle_area_from_circumference_l1184_118403


namespace NUMINAMATH_CALUDE_problem_statement_l1184_118458

-- Define the set X
def X : Set ℕ := {n | 1 ≤ n ∧ n ≤ 2017}

-- Define the set S
def S : Set (ℕ × ℕ × ℕ) :=
  {t | t.1 ∈ X ∧ t.2.1 ∈ X ∧ t.2.2 ∈ X ∧
    ((t.1 < t.2.1 ∧ t.2.1 < t.2.2) ∨
     (t.2.1 < t.2.2 ∧ t.2.2 < t.1) ∨
     (t.2.2 < t.1 ∧ t.1 < t.2.1)) ∧
    ¬((t.1 < t.2.1 ∧ t.2.1 < t.2.2) ∧
      (t.2.1 < t.2.2 ∧ t.2.2 < t.1)) ∧
    ¬((t.1 < t.2.1 ∧ t.2.1 < t.2.2) ∧
      (t.2.2 < t.1 ∧ t.1 < t.2.1)) ∧
    ¬((t.2.1 < t.2.2 ∧ t.2.2 < t.1) ∧
      (t.2.2 < t.1 ∧ t.1 < t.2.1))}

-- Theorem statement
theorem problem_statement (x y z w : ℕ) 
  (h1 : (x, y, z) ∈ S) (h2 : (z, w, x) ∈ S) :
  (y, z, w) ∈ S ∧ (x, y, w) ∈ S := by
  sorry

end NUMINAMATH_CALUDE_problem_statement_l1184_118458


namespace NUMINAMATH_CALUDE_die_volume_l1184_118424

theorem die_volume (side_area : ℝ) (h : side_area = 64) : 
  side_area^(3/2) = 512 := by
  sorry

end NUMINAMATH_CALUDE_die_volume_l1184_118424


namespace NUMINAMATH_CALUDE_sqrt_225_equals_15_l1184_118402

theorem sqrt_225_equals_15 : Real.sqrt 225 = 15 := by
  sorry

end NUMINAMATH_CALUDE_sqrt_225_equals_15_l1184_118402


namespace NUMINAMATH_CALUDE_q_range_l1184_118400

def q (x : ℝ) : ℝ := (3 * x^2 + 1)^2

theorem q_range :
  ∀ y : ℝ, y ∈ Set.range q ↔ y ≥ 1 := by sorry

end NUMINAMATH_CALUDE_q_range_l1184_118400


namespace NUMINAMATH_CALUDE_simplify_expression_l1184_118491

theorem simplify_expression (x : ℝ) : (2*x + 20) + (150*x + 20) = 152*x + 40 := by
  sorry

end NUMINAMATH_CALUDE_simplify_expression_l1184_118491


namespace NUMINAMATH_CALUDE_point_on_line_l1184_118443

/-- A point in 2D space -/
structure Point where
  x : ℝ
  y : ℝ

/-- Check if three points are collinear -/
def collinear (p1 p2 p3 : Point) : Prop :=
  (p2.y - p1.y) * (p3.x - p1.x) = (p3.y - p1.y) * (p2.x - p1.x)

theorem point_on_line (p1 p2 p3 : Point) 
  (h1 : p1 = ⟨6, 12⟩) 
  (h2 : p2 = ⟨0, -6⟩) 
  (h3 : p3 = ⟨3, 3⟩) : 
  collinear p1 p2 p3 := by
  sorry


end NUMINAMATH_CALUDE_point_on_line_l1184_118443


namespace NUMINAMATH_CALUDE_quadratic_inequality_solution_set_l1184_118492

theorem quadratic_inequality_solution_set :
  {x : ℝ | x^2 + x - 12 < 0} = Set.Ioo (-4) 3 := by sorry

end NUMINAMATH_CALUDE_quadratic_inequality_solution_set_l1184_118492


namespace NUMINAMATH_CALUDE_subset_implies_a_range_l1184_118480

-- Define the sets S and P
def S : Set ℝ := {x | x^2 - 3*x - 10 < 0}
def P (a : ℝ) : Set ℝ := {x | a + 1 < x ∧ x < 2*a + 15}

-- Theorem statement
theorem subset_implies_a_range (a : ℝ) : S ⊆ P a → a ∈ Set.Icc (-5) (-3) := by
  sorry

end NUMINAMATH_CALUDE_subset_implies_a_range_l1184_118480


namespace NUMINAMATH_CALUDE_quadratic_positive_iff_not_one_l1184_118489

/-- Given a quadratic function f(x) = x^2 + bx + 1 where f(-1) = f(3),
    prove that f(x) > 0 if and only if x ≠ 1 -/
theorem quadratic_positive_iff_not_one (b : ℝ) (f : ℝ → ℝ) 
    (h1 : ∀ x, f x = x^2 + b*x + 1)
    (h2 : f (-1) = f 3) :
    ∀ x, f x > 0 ↔ x ≠ 1 := by
  sorry

end NUMINAMATH_CALUDE_quadratic_positive_iff_not_one_l1184_118489


namespace NUMINAMATH_CALUDE_beau_and_sons_ages_equality_l1184_118441

/-- Represents the problem of finding when Beau's age equaled the sum of his sons' ages --/
theorem beau_and_sons_ages_equality (beau_age_today : ℕ) (sons_age_today : ℕ) : 
  beau_age_today = 42 →
  sons_age_today = 16 →
  ∃ (years_ago : ℕ), 
    beau_age_today - years_ago = 3 * (sons_age_today - years_ago) ∧
    years_ago = 3 := by
sorry

end NUMINAMATH_CALUDE_beau_and_sons_ages_equality_l1184_118441


namespace NUMINAMATH_CALUDE_arctan_tan_difference_l1184_118454

theorem arctan_tan_difference (θ : Real) : 
  0 ≤ θ ∧ θ ≤ 180 ∧ θ = Real.arctan (Real.tan (70 * π / 180) - 2 * Real.tan (45 * π / 180)) * 180 / π :=
by sorry

end NUMINAMATH_CALUDE_arctan_tan_difference_l1184_118454


namespace NUMINAMATH_CALUDE_remaining_jet_bars_to_sell_l1184_118416

def weekly_goal : ℕ := 90
def monday_sales : ℕ := 45
def tuesday_sales_difference : ℕ := 16

theorem remaining_jet_bars_to_sell :
  weekly_goal - (monday_sales + (monday_sales - tuesday_sales_difference)) = 16 := by
  sorry

end NUMINAMATH_CALUDE_remaining_jet_bars_to_sell_l1184_118416


namespace NUMINAMATH_CALUDE_tan_ratio_theorem_l1184_118482

theorem tan_ratio_theorem (x y : ℝ) 
  (h1 : (Real.sin x / Real.cos y) + (Real.sin y / Real.cos x) = 2)
  (h2 : (Real.cos x / Real.sin y) + (Real.cos y / Real.sin x) = 8) :
  (Real.tan x * Real.tan y) / (Real.tan x / Real.tan y + Real.tan y / Real.tan x) = 31 / 13 := by
  sorry

end NUMINAMATH_CALUDE_tan_ratio_theorem_l1184_118482


namespace NUMINAMATH_CALUDE_sequence_is_arithmetic_l1184_118449

def is_arithmetic_sequence (a : ℕ → ℝ) (d : ℝ) : Prop :=
  ∀ n, a (n + 1) - a n = d

theorem sequence_is_arithmetic (a : ℕ → ℝ) 
    (h : ∀ n, 3 * a (n + 1) = 3 * a n + 1) : 
    is_arithmetic_sequence a (1/3) := by
  sorry

end NUMINAMATH_CALUDE_sequence_is_arithmetic_l1184_118449


namespace NUMINAMATH_CALUDE_solution_sum_l1184_118439

noncomputable def f (x : ℝ) : ℝ := (x - 1) / (x + 1)

theorem solution_sum (a b : ℝ) :
  a > b →
  f (a^2) * f a = 0.72 →
  f (b^2) * f b = 0.72 →
  19 * a + 7 * b = 134 := by
sorry

end NUMINAMATH_CALUDE_solution_sum_l1184_118439


namespace NUMINAMATH_CALUDE_negative_four_cubed_equality_l1184_118445

theorem negative_four_cubed_equality : (-4)^3 = -4^3 := by
  sorry

end NUMINAMATH_CALUDE_negative_four_cubed_equality_l1184_118445


namespace NUMINAMATH_CALUDE_factorization_equality_l1184_118465

theorem factorization_equality (a b : ℝ) : 2*a*b - a^2 - b^2 + 4 = (2 + a - b)*(2 - a + b) := by
  sorry

end NUMINAMATH_CALUDE_factorization_equality_l1184_118465


namespace NUMINAMATH_CALUDE_unique_solution_l1184_118436

theorem unique_solution : ∃! x : ℝ, x * 3 + 3 * 13 + 3 * 16 + 11 = 134 := by
  sorry

end NUMINAMATH_CALUDE_unique_solution_l1184_118436


namespace NUMINAMATH_CALUDE_kristin_income_l1184_118478

/-- Represents the tax structure and Kristin's income --/
structure TaxSystem where
  p : ℝ  -- base tax rate in decimal form
  income : ℝ  -- Kristin's annual income

/-- Calculates the total tax paid based on the given tax structure --/
def totalTax (ts : TaxSystem) : ℝ :=
  ts.p * 28000 + (ts.p + 0.02) * (ts.income - 28000)

/-- Theorem stating that Kristin's income is $32000 given the tax conditions --/
theorem kristin_income (ts : TaxSystem) :
  (totalTax ts = (ts.p + 0.0025) * ts.income) → ts.income = 32000 := by
  sorry


end NUMINAMATH_CALUDE_kristin_income_l1184_118478


namespace NUMINAMATH_CALUDE_sqrt_25_equals_5_l1184_118473

theorem sqrt_25_equals_5 : Real.sqrt 25 = 5 := by
  sorry

end NUMINAMATH_CALUDE_sqrt_25_equals_5_l1184_118473


namespace NUMINAMATH_CALUDE_elena_and_alex_money_l1184_118446

theorem elena_and_alex_money : (5 : ℚ) / 6 + (7 : ℚ) / 15 = (13 : ℚ) / 10 := by
  sorry

end NUMINAMATH_CALUDE_elena_and_alex_money_l1184_118446


namespace NUMINAMATH_CALUDE_one_and_one_third_problem_l1184_118468

theorem one_and_one_third_problem :
  ∀ x : ℝ, (4/3 : ℝ) * x = 45 ↔ x = 33.75 := by sorry

end NUMINAMATH_CALUDE_one_and_one_third_problem_l1184_118468


namespace NUMINAMATH_CALUDE_sqrt_two_expression_l1184_118475

theorem sqrt_two_expression : Real.sqrt 2 * (Real.sqrt 2 + 2) - |Real.sqrt 2 - 2| = 3 * Real.sqrt 2 := by
  sorry

end NUMINAMATH_CALUDE_sqrt_two_expression_l1184_118475


namespace NUMINAMATH_CALUDE_dennis_initial_money_l1184_118477

def shirt_cost : ℕ := 27
def ten_dollar_bills : ℕ := 2
def loose_coins : ℕ := 3

theorem dennis_initial_money : 
  shirt_cost + ten_dollar_bills * 10 + loose_coins = 50 := by
  sorry

end NUMINAMATH_CALUDE_dennis_initial_money_l1184_118477


namespace NUMINAMATH_CALUDE_equation_solution_l1184_118486

theorem equation_solution :
  ∃ y : ℝ, ∀ x : ℝ, x + 0.35 * y - (x + y) = 200 :=
by
  -- The proof would go here
  sorry

end NUMINAMATH_CALUDE_equation_solution_l1184_118486


namespace NUMINAMATH_CALUDE_min_n_is_minimum_l1184_118469

/-- The minimum positive integer n for which the expansion of (2x - 1/∛x)^n contains a constant term -/
def min_n : ℕ := 4

/-- Predicate to check if the expansion of (2x - 1/∛x)^n contains a constant term -/
def has_constant_term (n : ℕ) : Prop :=
  ∃ r : ℕ, n = 4 * r / 3 ∧ r > 0

/-- Theorem stating that min_n is the minimum positive integer satisfying the condition -/
theorem min_n_is_minimum :
  (∀ k : ℕ, k > 0 ∧ k < min_n → ¬(has_constant_term k)) ∧
  has_constant_term min_n :=
sorry

end NUMINAMATH_CALUDE_min_n_is_minimum_l1184_118469


namespace NUMINAMATH_CALUDE_total_rabbits_caught_l1184_118425

/-- Represents the number of rabbits caught on a given day -/
def rabbits_caught (day : ℕ) : ℕ :=
  203 - 3 * day

/-- Represents the number of squirrels caught on a given day -/
def squirrels_caught (day : ℕ) : ℕ :=
  16 + 2 * day

/-- The day when more squirrels are caught than rabbits -/
def crossover_day : ℕ :=
  38

/-- Sum of an arithmetic sequence -/
def arithmetic_sum (n : ℕ) (a : ℤ) (d : ℤ) : ℤ :=
  n * (2 * a + (n - 1) * d) / 2

theorem total_rabbits_caught : 
  arithmetic_sum crossover_day 200 (-3) = 5491 := by
  sorry

end NUMINAMATH_CALUDE_total_rabbits_caught_l1184_118425


namespace NUMINAMATH_CALUDE_town_distance_proof_l1184_118432

/-- The distance between two towns on a map in inches -/
def map_distance : ℝ := 18

/-- The scale of the map in inches -/
def scale_inches : ℝ := 0.5

/-- The scale of the map in miles -/
def scale_miles : ℝ := 6

/-- The actual distance between the towns in miles -/
def actual_distance : ℝ := 216

theorem town_distance_proof :
  (map_distance * scale_miles) / scale_inches = actual_distance := by
  sorry

end NUMINAMATH_CALUDE_town_distance_proof_l1184_118432


namespace NUMINAMATH_CALUDE_bowling_ball_weighs_16_pounds_l1184_118409

/-- The weight of a single bowling ball in pounds. -/
def bowling_ball_weight : ℝ := sorry

/-- The weight of a single canoe in pounds. -/
def canoe_weight : ℝ := sorry

/-- Theorem stating that a bowling ball weighs 16 pounds under given conditions. -/
theorem bowling_ball_weighs_16_pounds : bowling_ball_weight = 16 := by
  have h1 : 8 * bowling_ball_weight = 4 * canoe_weight := by sorry
  have h2 : 2 * canoe_weight = 64 := by sorry
  sorry

end NUMINAMATH_CALUDE_bowling_ball_weighs_16_pounds_l1184_118409


namespace NUMINAMATH_CALUDE_student_A_consecutive_days_probability_l1184_118447

/-- The number of days for the volunteer activity -/
def total_days : ℕ := 5

/-- The total number of students participating -/
def total_students : ℕ := 4

/-- The number of days student A participates -/
def student_A_days : ℕ := 2

/-- The number of days each other student participates -/
def other_student_days : ℕ := 1

/-- The probability that student A participates for two consecutive days -/
def consecutive_days_probability : ℚ := 2 / 5

/-- Theorem stating that the probability of student A participating for two consecutive days is 2/5 -/
theorem student_A_consecutive_days_probability :
  consecutive_days_probability = 2 / 5 := by sorry

end NUMINAMATH_CALUDE_student_A_consecutive_days_probability_l1184_118447


namespace NUMINAMATH_CALUDE_smaller_type_pages_l1184_118457

theorem smaller_type_pages 
  (total_words : ℕ) 
  (larger_type_words_per_page : ℕ) 
  (smaller_type_words_per_page : ℕ) 
  (total_pages : ℕ) 
  (h1 : total_words = 48000)
  (h2 : larger_type_words_per_page = 1800)
  (h3 : smaller_type_words_per_page = 2400)
  (h4 : total_pages = 21) :
  ∃ (x y : ℕ), 
    x + y = total_pages ∧ 
    larger_type_words_per_page * x + smaller_type_words_per_page * y = total_words ∧
    y = 17 := by
  sorry

end NUMINAMATH_CALUDE_smaller_type_pages_l1184_118457


namespace NUMINAMATH_CALUDE_operation_not_equal_33_l1184_118410

/-- Given single digit positive integers a and b, where x = 1/5 a and z = 1/5 b,
    prove that (10a + b) - (10x + z) ≠ 33 -/
theorem operation_not_equal_33 (a b : ℕ) (x z : ℕ) 
  (ha : 0 < a ∧ a < 10) (hb : 0 < b ∧ b < 10)
  (hx : x = a / 5) (hz : z = b / 5)
  (hx_pos : 0 < x) (hz_pos : 0 < z) : 
  (10 * a + b) - (10 * x + z) ≠ 33 := by
  sorry

end NUMINAMATH_CALUDE_operation_not_equal_33_l1184_118410


namespace NUMINAMATH_CALUDE_range_of_a_l1184_118451

-- Define the propositions p and q
def p (x : ℝ) : Prop := |x + 1| ≥ 1
def q (x a : ℝ) : Prop := x ≤ a

-- Define the necessary but not sufficient condition
def necessary_not_sufficient (p q : Prop) : Prop :=
  (q → p) ∧ ¬(p → q)

-- Theorem statement
theorem range_of_a (x a : ℝ) :
  (∀ x, necessary_not_sufficient (p x) (q x a)) →
  a ≤ -2 :=
by sorry

end NUMINAMATH_CALUDE_range_of_a_l1184_118451


namespace NUMINAMATH_CALUDE_square_difference_div_product_equals_four_l1184_118408

theorem square_difference_div_product_equals_four :
  ((0.137 + 0.098)^2 - (0.137 - 0.098)^2) / (0.137 * 0.098) = 4 := by
  sorry

end NUMINAMATH_CALUDE_square_difference_div_product_equals_four_l1184_118408


namespace NUMINAMATH_CALUDE_inequality_implies_sign_conditions_l1184_118440

theorem inequality_implies_sign_conditions (a b : ℝ) 
  (h : (|abs a - (a + b)| : ℝ) < |a - abs (a + b)|) : 
  a < 0 ∧ b > 0 := by
  sorry

end NUMINAMATH_CALUDE_inequality_implies_sign_conditions_l1184_118440


namespace NUMINAMATH_CALUDE_water_added_to_tank_l1184_118405

theorem water_added_to_tank (tank_capacity : ℚ) 
  (initial_fraction : ℚ) (final_fraction : ℚ) : 
  tank_capacity = 72 ∧ initial_fraction = 3/4 ∧ final_fraction = 7/8 →
  (final_fraction - initial_fraction) * tank_capacity = 9 := by
  sorry

end NUMINAMATH_CALUDE_water_added_to_tank_l1184_118405


namespace NUMINAMATH_CALUDE_parallel_line_length_l1184_118431

/-- Given a triangle with base 15 inches and two parallel lines dividing it into three equal areas,
    the length of the parallel line closer to the base is 5√3 inches. -/
theorem parallel_line_length (base : ℝ) (parallel_line : ℝ) : 
  base = 15 →
  (parallel_line / base)^2 = 1/3 →
  parallel_line = 5 * Real.sqrt 3 :=
by sorry

end NUMINAMATH_CALUDE_parallel_line_length_l1184_118431


namespace NUMINAMATH_CALUDE_complex_number_quadrant_z_in_second_quadrant_l1184_118483

theorem complex_number_quadrant : Complex → Prop :=
  fun z => ∃ (a b : ℝ), z = Complex.mk a b ∧ a < 0 ∧ b > 0

def i : Complex := Complex.I

def z : Complex := (1 + 2 * i) * i

theorem z_in_second_quadrant : complex_number_quadrant z := by
  sorry

end NUMINAMATH_CALUDE_complex_number_quadrant_z_in_second_quadrant_l1184_118483


namespace NUMINAMATH_CALUDE_number_property_l1184_118444

def is_valid_number (n : ℕ) : Prop :=
  ∃ (k : ℕ) (a : ℕ),
    0 < k ∧ 
    1 ≤ a ∧ a ≤ 9 ∧
    n = 12 * a ∧
    n % 10 ≠ 0

theorem number_property :
  ∀ (N : ℕ),
    (N % 10 ≠ 0) →
    (∃ (N' : ℕ), 
      (∃ (k : ℕ) (m : ℕ) (n : ℕ),
        N = m + 10^k * (N' / 10^k % 10) + 10^(k+1) * n ∧
        N' = m + 10^(k+1) * n ∧
        m < 10^k) ∧
      N = 6 * N') →
    is_valid_number N :=
sorry

end NUMINAMATH_CALUDE_number_property_l1184_118444


namespace NUMINAMATH_CALUDE_investment_proof_l1184_118401

/-- Compound interest calculation -/
def compound_interest (principal : ℝ) (rate : ℝ) (time : ℕ) : ℝ :=
  principal * (1 + rate) ^ time

/-- Proof of the investment problem -/
theorem investment_proof (principal : ℝ) (rate : ℝ) (time : ℕ) 
  (h1 : principal = 6000)
  (h2 : rate = 0.1)
  (h3 : time = 2) :
  compound_interest principal rate time = 7260 := by
  sorry

end NUMINAMATH_CALUDE_investment_proof_l1184_118401


namespace NUMINAMATH_CALUDE_true_absolute_error_example_l1184_118494

/-- The true absolute error of a₀ with respect to a -/
def trueAbsoluteError (a₀ a : ℝ) : ℝ := |a - a₀|

theorem true_absolute_error_example : 
  trueAbsoluteError 245.2 246 = 0.8 := by sorry

end NUMINAMATH_CALUDE_true_absolute_error_example_l1184_118494


namespace NUMINAMATH_CALUDE_probability_three_white_balls_l1184_118419

/-- The probability of drawing 3 white balls from a box containing 8 white balls and 7 black balls -/
theorem probability_three_white_balls (total_balls : ℕ) (white_balls : ℕ) (black_balls : ℕ) 
  (h1 : total_balls = white_balls + black_balls)
  (h2 : white_balls = 8)
  (h3 : black_balls = 7)
  (h4 : total_balls ≥ 3) :
  (Nat.choose white_balls 3 : ℚ) / (Nat.choose total_balls 3) = 8 / 65 := by
sorry

end NUMINAMATH_CALUDE_probability_three_white_balls_l1184_118419


namespace NUMINAMATH_CALUDE_symmetry_of_curves_l1184_118450

-- Define the original curve
def original_curve (x y : ℝ) : Prop := x^2 + 4*y^2 = 4

-- Define the point of symmetry
def point_of_symmetry : ℝ × ℝ := (3, 5)

-- Define the symmetric curve
def symmetric_curve (x y : ℝ) : Prop := (x - 6)^2 + 4*(y - 10)^2 = 4

-- Theorem statement
theorem symmetry_of_curves :
  ∀ (x y : ℝ), original_curve x y ↔ symmetric_curve (2*point_of_symmetry.1 - x) (2*point_of_symmetry.2 - y) :=
by sorry

end NUMINAMATH_CALUDE_symmetry_of_curves_l1184_118450


namespace NUMINAMATH_CALUDE_largest_increase_2006_2007_largest_increase_years_l1184_118460

/-- Represents the number of students participating in AMC contests each year -/
def amc_participants : Fin 6 → ℕ
  | 0 => 50  -- 2002
  | 1 => 55  -- 2003
  | 2 => 63  -- 2004
  | 3 => 70  -- 2005
  | 4 => 75  -- 2006
  | 5 => 105 -- 2007 (90 AMC 10 + 15 AMC 12)

/-- Calculates the percentage increase between two consecutive years -/
def percentage_increase (year : Fin 5) : ℚ :=
  (amc_participants (year.succ) - amc_participants year) / amc_participants year * 100

/-- States that the percentage increase between 2006 and 2007 is the largest -/
theorem largest_increase_2006_2007 :
  ∀ year : Fin 5, percentage_increase 4 ≥ percentage_increase year :=
sorry

/-- The main theorem stating that 2006 to 2007 had the largest percentage increase -/
theorem largest_increase_years : 
  ∃ (y : Fin 5), (∀ (year : Fin 5), percentage_increase y ≥ percentage_increase year) ∧ y = 4 :=
sorry

end NUMINAMATH_CALUDE_largest_increase_2006_2007_largest_increase_years_l1184_118460


namespace NUMINAMATH_CALUDE_quadrant_I_solution_range_l1184_118472

theorem quadrant_I_solution_range (c x y : ℝ) : 
  (x - 2*y = 4) → 
  (2*c*x + y = 5) → 
  (x > 0 ∧ y > 0) ↔ 
  (-1/4 < c ∧ c < 5/8) :=
sorry

end NUMINAMATH_CALUDE_quadrant_I_solution_range_l1184_118472


namespace NUMINAMATH_CALUDE_power_of_two_equation_l1184_118498

theorem power_of_two_equation (y : ℤ) : (1 / 8 : ℚ) * 2^36 = 2^y → y = 33 := by
  sorry

end NUMINAMATH_CALUDE_power_of_two_equation_l1184_118498


namespace NUMINAMATH_CALUDE_rectangle_area_y_l1184_118407

theorem rectangle_area_y (y : ℝ) : y > 0 →
  let E : ℝ × ℝ := (0, 0)
  let F : ℝ × ℝ := (0, 6)
  let G : ℝ × ℝ := (y, 6)
  let H : ℝ × ℝ := (y, 0)
  let area := (G.1 - E.1) * (F.2 - E.2)
  area = 42 →
  y = 7 := by sorry

end NUMINAMATH_CALUDE_rectangle_area_y_l1184_118407


namespace NUMINAMATH_CALUDE_sum_one_implies_not_both_greater_than_one_l1184_118493

theorem sum_one_implies_not_both_greater_than_one (a b : ℝ) :
  a + b = 1 → ¬(a > 1 ∧ b > 1) := by
sorry

end NUMINAMATH_CALUDE_sum_one_implies_not_both_greater_than_one_l1184_118493


namespace NUMINAMATH_CALUDE_smallest_a_inequality_l1184_118487

theorem smallest_a_inequality (x y z : ℝ) (hx : x ≥ 0) (hy : y ≥ 0) (hz : z ≥ 0) (hsum : x + y + z = 1) :
  (2/9 : ℝ) * (x^2 + y^2 + z^2) + x*y*z ≥ 10/27 ∧
  ∀ a < 2/9, ∃ x' y' z' : ℝ, x' ≥ 0 ∧ y' ≥ 0 ∧ z' ≥ 0 ∧ x' + y' + z' = 1 ∧
    a * (x'^2 + y'^2 + z'^2) + x'*y'*z' < 10/27 :=
by sorry

end NUMINAMATH_CALUDE_smallest_a_inequality_l1184_118487


namespace NUMINAMATH_CALUDE_total_seeds_l1184_118476

/-- The number of seeds Emily planted in the big garden. -/
def big_garden_seeds : ℕ := 36

/-- The number of small gardens Emily had. -/
def small_gardens : ℕ := 3

/-- The number of seeds Emily planted in each small garden. -/
def seeds_per_small_garden : ℕ := 2

/-- Theorem stating the total number of seeds Emily started with. -/
theorem total_seeds : 
  big_garden_seeds + small_gardens * seeds_per_small_garden = 42 := by
  sorry

end NUMINAMATH_CALUDE_total_seeds_l1184_118476


namespace NUMINAMATH_CALUDE_triangular_cross_section_solids_l1184_118414

/-- Enumeration of geometric solids -/
inductive GeometricSolid
  | Cube
  | Cylinder
  | Cone
  | RegularTriangularPrism

/-- Predicate to determine if a geometric solid can have a triangular cross-section -/
def has_triangular_cross_section (solid : GeometricSolid) : Prop :=
  match solid with
  | GeometricSolid.Cube => True
  | GeometricSolid.Cylinder => False
  | GeometricSolid.Cone => True
  | GeometricSolid.RegularTriangularPrism => True

/-- Theorem stating which geometric solids can have a triangular cross-section -/
theorem triangular_cross_section_solids :
  ∀ (solid : GeometricSolid),
    has_triangular_cross_section solid ↔
      (solid = GeometricSolid.Cube ∨
       solid = GeometricSolid.Cone ∨
       solid = GeometricSolid.RegularTriangularPrism) :=
by sorry

end NUMINAMATH_CALUDE_triangular_cross_section_solids_l1184_118414


namespace NUMINAMATH_CALUDE_strawberry_bucket_problem_l1184_118456

/-- Proves that the number of buckets used is 5 given the conditions of the strawberry problem -/
theorem strawberry_bucket_problem (total_strawberries : ℕ) (removed_per_bucket : ℕ) (remaining_per_bucket : ℕ) 
  (h1 : total_strawberries = 300)
  (h2 : removed_per_bucket = 20)
  (h3 : remaining_per_bucket = 40) :
  (total_strawberries / (removed_per_bucket + remaining_per_bucket) : ℕ) = 5 := by
  sorry

end NUMINAMATH_CALUDE_strawberry_bucket_problem_l1184_118456


namespace NUMINAMATH_CALUDE_parallel_lines_coefficient_l1184_118466

/-- Two lines are parallel if and only if their slopes are equal -/
axiom parallel_lines_equal_slopes {m1 m2 : ℝ} : 
  (∃ b1 b2 : ℝ, ∀ x y : ℝ, y = m1 * x + b1 ↔ y = m2 * x + b2) → m1 = m2

/-- The slope of a line ax + by + c = 0 is -a/b when b ≠ 0 -/
axiom slope_of_line {a b c : ℝ} (h : b ≠ 0) :
  ∃ m : ℝ, m = -a/b ∧ ∀ x y : ℝ, a*x + b*y + c = 0 ↔ y = m*x + (-c/b)

theorem parallel_lines_coefficient (a : ℝ) :
  (∀ x y : ℝ, a*x + 2*y + 2 = 0 ↔ 3*x - y - 2 = 0) → a = -6 :=
by sorry

end NUMINAMATH_CALUDE_parallel_lines_coefficient_l1184_118466


namespace NUMINAMATH_CALUDE_circle_equation_and_tangent_and_symmetry_l1184_118426

-- Define the circle C
def circle_C (x y : ℝ) : Prop := (x - 2)^2 + (y + 3)^2 = 5

-- Define the line that contains the center of C
def center_line (x y : ℝ) : Prop := 2*x - y - 7 = 0

-- Define the points A and B where C intersects the y-axis
def point_A : ℝ × ℝ := (0, -4)
def point_B : ℝ × ℝ := (0, -2)

-- Define the tangent line l
def line_l (k x y : ℝ) : Prop := k*x - y + k = 0

-- Define the line l₁ for symmetry
def line_l1 (x y : ℝ) : Prop := y = 2*x + 1

-- Define the symmetric circle
def symmetric_circle (x y : ℝ) : Prop := (x + 22/5)^2 + (y - 1/5)^2 = 5

theorem circle_equation_and_tangent_and_symmetry :
  ∃ (k : ℝ),
    (∀ x y, circle_C x y ↔ (x - 2)^2 + (y + 3)^2 = 5) ∧
    (k = (-9 + Real.sqrt 65) / 4 ∨ k = (-9 - Real.sqrt 65) / 4) ∧
    (∀ x y, symmetric_circle x y ↔ (x + 22/5)^2 + (y - 1/5)^2 = 5) :=
by sorry

end NUMINAMATH_CALUDE_circle_equation_and_tangent_and_symmetry_l1184_118426


namespace NUMINAMATH_CALUDE_odot_calculation_l1184_118488

def odot (a b : ℝ) : ℝ := a * b + (a - b)

theorem odot_calculation : odot (odot 3 2) 4 = 31 := by
  sorry

end NUMINAMATH_CALUDE_odot_calculation_l1184_118488


namespace NUMINAMATH_CALUDE_problem_statement_l1184_118471

theorem problem_statement (a b : ℝ) (h1 : a + b = 1) (h2 : a * b = 108) :
  a^2 * b + a * b^2 = 108 := by sorry

end NUMINAMATH_CALUDE_problem_statement_l1184_118471
