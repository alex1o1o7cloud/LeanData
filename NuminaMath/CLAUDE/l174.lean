import Mathlib

namespace bernoulli_zero_success_l174_17413

/-- The number of trials -/
def n : ℕ := 7

/-- The probability of success in each trial -/
def p : ℚ := 2/7

/-- The probability of failure in each trial -/
def q : ℚ := 1 - p

/-- The number of successes we're interested in -/
def k : ℕ := 0

/-- 
Theorem: In a series of 7 Bernoulli trials with a success probability of 2/7, 
the probability of 0 successes is equal to (5/7)^7.
-/
theorem bernoulli_zero_success : 
  (n.choose k) * p^k * q^(n-k) = (5/7)^7 := by
  sorry

end bernoulli_zero_success_l174_17413


namespace electricity_scientific_notation_equality_l174_17491

/-- The amount of electricity generated by a wind power station per day -/
def electricity_per_day : ℝ := 74850000

/-- The scientific notation representation of the electricity generated per day -/
def scientific_notation : ℝ := 7.485 * (10^7)

/-- Theorem stating that the electricity_per_day is equal to its scientific notation representation -/
theorem electricity_scientific_notation_equality :
  electricity_per_day = scientific_notation := by
  sorry

end electricity_scientific_notation_equality_l174_17491


namespace digit_410_of_7_29_l174_17474

/-- The decimal expansion of 7/29 has a repeating cycle of 28 digits -/
def cycle_length : ℕ := 28

/-- The repeating cycle of digits in the decimal expansion of 7/29 -/
def repeating_cycle : List ℕ := [2, 4, 1, 3, 7, 9, 3, 1, 0, 3, 4, 4, 8, 2, 7, 5, 8, 6, 2, 0, 6, 8, 9, 6, 5, 5, 1, 7]

/-- The position we're interested in -/
def target_position : ℕ := 410

theorem digit_410_of_7_29 : 
  (repeating_cycle.get! ((target_position - 1) % cycle_length)) = 8 := by
  sorry

end digit_410_of_7_29_l174_17474


namespace system_solution_l174_17459

theorem system_solution : ∃! (x y : ℝ), 
  (x + y = (7 - x) + (7 - y)) ∧ 
  (x - y = (x - 2) + (y - 2)) ∧ 
  x = 3 ∧ y = 4 := by
  sorry

end system_solution_l174_17459


namespace remainder_98_102_div_12_l174_17494

theorem remainder_98_102_div_12 : (98 * 102) % 12 = 0 := by
  sorry

end remainder_98_102_div_12_l174_17494


namespace rationalize_denominator_l174_17440

-- Define the cube root function
noncomputable def cubeRoot (x : ℝ) : ℝ := Real.rpow x (1/3)

-- State the theorem
theorem rationalize_denominator :
  (1 : ℝ) / (cubeRoot 2 + cubeRoot 16) = cubeRoot 4 / 6 :=
by sorry

end rationalize_denominator_l174_17440


namespace ratio_problem_l174_17489

theorem ratio_problem (x y z : ℚ) (h1 : x / y = 3) (h2 : z / y = 4) :
  (y + z) / (x + z) = 5 / 7 := by sorry

end ratio_problem_l174_17489


namespace fraction_cube_sum_l174_17418

theorem fraction_cube_sum : 
  (10 / 11) ^ 3 * (1 / 3) ^ 3 + (1 / 2) ^ 3 = 5492 / 35937 := by
  sorry

end fraction_cube_sum_l174_17418


namespace jinsu_work_rate_l174_17470

/-- Given that Jinsu completes a task in 4 hours, prove that the amount of work he can do in one hour is 1/4 of the task. -/
theorem jinsu_work_rate (total_time : ℝ) (total_work : ℝ) (h : total_time = 4) :
  total_work / total_time = 1/4 := by
  sorry

end jinsu_work_rate_l174_17470


namespace interest_rate_calculation_l174_17452

/-- Proves that the rate of interest is 8% given the specified loan conditions -/
theorem interest_rate_calculation (principal : ℝ) (interest : ℝ) 
  (h1 : principal = 1100)
  (h2 : interest = 704)
  (h3 : ∀ r t, interest = principal * r * t / 100 → r = t) :
  ∃ r : ℝ, r = 8 ∧ interest = principal * r * r / 100 := by
  sorry


end interest_rate_calculation_l174_17452


namespace fraction_equals_26_11_l174_17437

def numerator : ℕ → ℚ
| 0 => 15
| n + 1 => (numerator n) * (1 + 14 / (n + 2))

def denominator : ℕ → ℚ
| 0 => 13
| n + 1 => (denominator n) * (1 + 12 / (n + 2))

def fraction : ℚ := (numerator 11) / (denominator 9)

theorem fraction_equals_26_11 : fraction = 26 / 11 := by
  sorry

end fraction_equals_26_11_l174_17437


namespace complement_of_M_l174_17421

def U : Set ℕ := {1,2,3,4,5,6}
def M : Set ℕ := {1,2,4}

theorem complement_of_M : Mᶜ = {3,5,6} := by sorry

end complement_of_M_l174_17421


namespace paul_age_in_12_years_l174_17471

/-- Represents the ages of people in the problem -/
structure Ages where
  brian : ℝ
  christian : ℝ
  margaret : ℝ
  paul : ℝ

/-- The conditions of the problem -/
def problem_conditions (ages : Ages) : Prop :=
  ages.christian = 3.5 * ages.brian ∧
  ages.brian + 12 = 45 ∧
  ages.margaret = 2 * ages.brian ∧
  ages.christian = ages.margaret + 15 ∧
  ages.paul = (ages.margaret + ages.christian) / 2

/-- The theorem to be proved -/
theorem paul_age_in_12_years (ages : Ages) :
  problem_conditions ages → ages.paul + 12 = 102.75 := by
  sorry

end paul_age_in_12_years_l174_17471


namespace pancake_accumulation_time_l174_17444

/-- Represents the pancake baking and eating scenario -/
structure PancakeScenario where
  mom_rate : ℚ     -- Mom's baking rate in pancakes per minute
  anya_rate : ℚ    -- Anya's baking rate in pancakes per minute
  andrey_rate : ℚ  -- Andrey's eating rate in pancakes per minute

/-- Calculates the time needed to accumulate a given number of pancakes -/
def time_to_accumulate (scenario : PancakeScenario) (target : ℚ) : ℚ :=
  target / (scenario.mom_rate + scenario.anya_rate - scenario.andrey_rate)

/-- Theorem stating the time to accumulate 100 pancakes is 24 minutes -/
theorem pancake_accumulation_time :
  let scenario : PancakeScenario := {
    mom_rate := 100 / 30,    -- 100 pancakes in 30 minutes
    anya_rate := 100 / 40,   -- 100 pancakes in 40 minutes
    andrey_rate := 100 / 60  -- 100 pancakes in 60 minutes
  }
  time_to_accumulate scenario 100 = 24 := by sorry

end pancake_accumulation_time_l174_17444


namespace right_triangle_sides_l174_17463

theorem right_triangle_sides : ∃ (a b c : ℝ), 
  (a = 1 ∧ b = Real.sqrt 3 ∧ c = 2) ∧ 
  (a^2 + b^2 = c^2) ∧
  ¬(3^2 + 4^2 = 6^2) ∧
  ¬(5^2 + 12^2 = 14^2) ∧
  ¬((Real.sqrt 2)^2 + (Real.sqrt 3)^2 = 2^2) :=
by sorry

end right_triangle_sides_l174_17463


namespace trees_on_road_l174_17439

theorem trees_on_road (road_length : ℕ) (interval : ℕ) (trees : ℕ) : 
  road_length = 156 ∧ 
  interval = 6 ∧ 
  trees = road_length / interval + 1 →
  trees = 27 :=
by sorry

end trees_on_road_l174_17439


namespace remainder_1234567_div_256_l174_17408

theorem remainder_1234567_div_256 : 1234567 % 256 = 57 := by
  sorry

end remainder_1234567_div_256_l174_17408


namespace vann_teeth_cleaning_l174_17478

/-- The number of teeth a dog has -/
def dog_teeth : ℕ := 42

/-- The number of teeth a cat has -/
def cat_teeth : ℕ := 30

/-- The number of teeth a pig has -/
def pig_teeth : ℕ := 28

/-- The number of dogs Vann will clean -/
def num_dogs : ℕ := 5

/-- The number of cats Vann will clean -/
def num_cats : ℕ := 10

/-- The number of pigs Vann will clean -/
def num_pigs : ℕ := 7

/-- The total number of teeth Vann will clean -/
def total_teeth : ℕ := dog_teeth * num_dogs + cat_teeth * num_cats + pig_teeth * num_pigs

theorem vann_teeth_cleaning :
  total_teeth = 706 := by
  sorry

end vann_teeth_cleaning_l174_17478


namespace unique_solution_trigonometric_equation_l174_17475

theorem unique_solution_trigonometric_equation :
  ∃! x : Real, 0 < x ∧ x < 180 ∧
  Real.tan ((150 : Real) * degree - x * degree) = 
    (Real.sin ((150 : Real) * degree) - Real.sin (x * degree)) / 
    (Real.cos ((150 : Real) * degree) - Real.cos (x * degree)) ∧
  x = 105 := by
  sorry

end unique_solution_trigonometric_equation_l174_17475


namespace quadratic_roots_range_l174_17447

theorem quadratic_roots_range (k : ℝ) : 
  (∃ x y : ℝ, x ≠ y ∧ x^2 - 4*x + 1 = -2*k ∧ y^2 - 4*y + 1 = -2*k) → k < 3/2 :=
by sorry

end quadratic_roots_range_l174_17447


namespace imaginary_part_of_one_minus_i_cubed_l174_17445

theorem imaginary_part_of_one_minus_i_cubed (i : ℂ) : 
  Complex.im ((1 - i)^3) = -2 :=
by sorry

end imaginary_part_of_one_minus_i_cubed_l174_17445


namespace fraction_sum_and_simplification_l174_17451

theorem fraction_sum_and_simplification : 
  (11 : ℚ) / 12 + 7 / 8 + 3 / 4 = 61 / 24 ∧ 
  ∀ (a b : ℤ), (b ≠ 0 ∧ (61 : ℚ) / 24 = a / b) → (|a| = 61 ∧ |b| = 24) := by
  sorry

end fraction_sum_and_simplification_l174_17451


namespace f_above_half_g_l174_17415

/-- The function f(x) = 2x - 1 -/
def f (x : ℝ) : ℝ := 2 * x - 1

/-- The function g(x) = -2x + m, where m is a parameter -/
def g (m : ℝ) (x : ℝ) : ℝ := -2 * x + m

/-- The only integer solution to x ≥ 1 is 2 -/
axiom integer_solution (m : ℝ) : ∀ (x : ℤ), x ≥ 1 → (g m x ≥ 1 ↔ x = 2)

/-- The main theorem: f(x) is always above (1/2)g(x) if and only if a ∈ [3, +∞) -/
theorem f_above_half_g (a m : ℝ) :
  (∀ x : ℝ, f x > (1/2) * g m x) ↔ a ∈ Set.Ici 3 :=
sorry

end f_above_half_g_l174_17415


namespace martaFamily_childless_count_marta_childless_count_l174_17434

/-- Represents a woman in Marta's family tree -/
structure Woman where
  daughters : Nat

/-- Marta's family tree -/
structure MartaFamily where
  marta : Woman
  daughters : Finset Woman

theorem martaFamily_childless_count (f : MartaFamily) : Nat :=
  let total_women := f.daughters.card + (f.daughters.sum fun d => d.daughters)
  let daughters_with_children := f.daughters.filter fun d => d.daughters > 0
  let childless_count := f.daughters.card + (f.daughters.sum fun d => d.daughters) - daughters_with_children.card
  childless_count

/-- The number of Marta's daughters and granddaughters without daughters is 37 -/
theorem marta_childless_count : ∃ (f : MartaFamily),
  f.marta.daughters = 0 ∧
  f.daughters.card = 7 ∧
  (f.daughters.card + (f.daughters.sum fun d => d.daughters) = 42) ∧
  (∀ d ∈ f.daughters, d.daughters = 0 ∨ d.daughters = 6) ∧
  (∀ d ∈ f.daughters, ∀ g ∈ f.daughters, g.daughters = 0) →
  martaFamily_childless_count f = 37 := by
  sorry

end martaFamily_childless_count_marta_childless_count_l174_17434


namespace klinker_double_age_l174_17429

/-- The age difference between Mr. Klinker and his daughter -/
def age_difference : ℕ := 35 - 10

/-- The current age of Mr. Klinker -/
def klinker_age : ℕ := 35

/-- The current age of Mr. Klinker's daughter -/
def daughter_age : ℕ := 10

/-- The number of years until Mr. Klinker is twice as old as his daughter -/
def years_until_double : ℕ := 15

theorem klinker_double_age :
  klinker_age + years_until_double = 2 * (daughter_age + years_until_double) :=
sorry

end klinker_double_age_l174_17429


namespace trivia_team_score_l174_17423

theorem trivia_team_score :
  let total_members : ℕ := 7
  let absent_members : ℕ := 2
  let present_members : ℕ := total_members - absent_members
  let scores : List ℕ := [5, 9, 7, 5, 3]
  scores.length = present_members →
  scores.sum = 29 := by
sorry

end trivia_team_score_l174_17423


namespace savings_percentage_increase_l174_17422

theorem savings_percentage_increase (initial_salary : ℝ) : 
  let last_year_savings := 0.10 * initial_salary
  let this_year_salary := 1.10 * initial_salary
  let this_year_savings := 0.15 * this_year_salary
  (this_year_savings / last_year_savings) * 100 = 165 := by
sorry

end savings_percentage_increase_l174_17422


namespace line_not_in_third_quadrant_implies_k_nonnegative_l174_17406

/-- A line is defined by its slope and y-intercept -/
structure Line where
  slope : ℝ
  intercept : ℝ

/-- Predicate to check if a point (x, y) is in the third quadrant -/
def in_third_quadrant (x y : ℝ) : Prop := x < 0 ∧ y < 0

/-- Predicate to check if a line passes through the third quadrant -/
def passes_through_third_quadrant (l : Line) : Prop :=
  ∃ x y : ℝ, y = l.slope * x + l.intercept ∧ in_third_quadrant x y

/-- Theorem: If a line with slope -3 and y-intercept k does not pass through the third quadrant, then k ≥ 0 -/
theorem line_not_in_third_quadrant_implies_k_nonnegative :
  ∀ k : ℝ, ¬passes_through_third_quadrant ⟨-3, k⟩ → k ≥ 0 := by
  sorry

end line_not_in_third_quadrant_implies_k_nonnegative_l174_17406


namespace log_power_base_equality_l174_17455

theorem log_power_base_equality (a N m n : ℝ) 
  (ha : a > 0) (hN : N > 0) (hm : m ≠ 0) :
  Real.log N^n / Real.log a^m = n / m * Real.log N / Real.log a := by
  sorry

end log_power_base_equality_l174_17455


namespace parallel_planes_line_condition_l174_17465

-- Define the types for planes and lines
variable (Plane Line : Type)

-- Define the relationships between planes and lines
variable (subset : Line → Plane → Prop)
variable (parallel : Plane → Plane → Prop)
variable (lineParallel : Line → Plane → Prop)

-- State the theorem
theorem parallel_planes_line_condition
  (α β : Plane) (m : Line)
  (h_different : α ≠ β)
  (h_subset : subset m α) :
  (∀ α β m, parallel α β → lineParallel m β) ∧
  (∃ α β m, lineParallel m β ∧ ¬parallel α β) :=
sorry

end parallel_planes_line_condition_l174_17465


namespace angle_measure_l174_17469

theorem angle_measure (A B : ℝ) (h1 : A + B = 180) (h2 : A = 7 * B) : A = 157.5 := by
  sorry

end angle_measure_l174_17469


namespace minimum_bills_for_exchange_l174_17488

/-- Represents the count of bills for each denomination --/
structure BillCounts where
  hundred : ℕ
  fifty : ℕ
  twenty : ℕ
  ten : ℕ
  five : ℕ
  two : ℕ

/-- Calculates the total value of bills --/
def total_value (bills : BillCounts) : ℕ :=
  100 * bills.hundred + 50 * bills.fifty + 20 * bills.twenty +
  10 * bills.ten + 5 * bills.five + 2 * bills.two

/-- Checks if the bill counts satisfy the given constraints --/
def satisfies_constraints (bills : BillCounts) : Prop :=
  bills.hundred ≥ 3 ∧ bills.fifty ≥ 2 ∧ bills.twenty ≤ 4

/-- Initial bill counts --/
def initial_bills : BillCounts :=
  { hundred := 0, fifty := 12, twenty := 10, ten := 8, five := 15, two := 5 }

/-- Theorem stating the minimum number of bills needed for exchange --/
theorem minimum_bills_for_exchange :
  ∃ (exchange_bills : BillCounts),
    total_value exchange_bills = 3000 ∧
    satisfies_constraints exchange_bills ∧
    exchange_bills.hundred = 18 ∧
    exchange_bills.fifty = 3 ∧
    exchange_bills.twenty = 4 ∧
    exchange_bills.five = 1 ∧
    exchange_bills.ten = 0 ∧
    exchange_bills.two = 0 ∧
    (∀ (other_bills : BillCounts),
      total_value other_bills = 3000 →
      satisfies_constraints other_bills →
      total_value other_bills ≥ total_value exchange_bills) :=
sorry

end minimum_bills_for_exchange_l174_17488


namespace ball_probabilities_l174_17430

def total_balls : ℕ := 6
def white_balls : ℕ := 2
def red_balls : ℕ := 2
def yellow_balls : ℕ := 2

def prob_two_red : ℚ := 1 / 15
def prob_same_color : ℚ := 1 / 5
def prob_one_white : ℚ := 2 / 3

theorem ball_probabilities :
  (total_balls = white_balls + red_balls + yellow_balls) →
  (prob_two_red = (red_balls.choose 2) / (total_balls.choose 2)) ∧
  (prob_same_color = (white_balls.choose 2 + red_balls.choose 2 + yellow_balls.choose 2) / (total_balls.choose 2)) ∧
  (prob_one_white = (white_balls * (total_balls - white_balls)) / (total_balls * (total_balls - 1))) :=
by sorry

end ball_probabilities_l174_17430


namespace birthday_savings_growth_l174_17431

/-- Calculates the final amount in a bank account after one year, given an initial amount and an annual interest rate. -/
def final_amount (initial_amount : ℝ) (interest_rate : ℝ) : ℝ :=
  initial_amount * (1 + interest_rate)

/-- Theorem: Given an initial amount of $90 and an annual interest rate of 10%, 
    the final amount after 1 year with no withdrawals is $99. -/
theorem birthday_savings_growth : final_amount 90 0.1 = 99 := by
  sorry

end birthday_savings_growth_l174_17431


namespace equal_distribution_of_items_l174_17425

theorem equal_distribution_of_items (pencils erasers friends : ℕ) 
  (h1 : pencils = 35) 
  (h2 : erasers = 5) 
  (h3 : friends = 5) : 
  (pencils + erasers) / friends = 8 := by
  sorry

end equal_distribution_of_items_l174_17425


namespace chess_tournament_players_l174_17428

/-- Represents a chess tournament with the given conditions -/
structure ChessTournament where
  n : ℕ  -- number of players not in the lowest 8
  /-- Total number of players is n + 8 -/
  total_players : ℕ := n + 8
  /-- Each player played exactly one game against each other player -/
  total_games : ℕ := (total_players * (total_players - 1)) / 2
  /-- Points earned by n players against each other -/
  n_vs_n_points : ℕ := (n * (n - 1)) / 2
  /-- Points earned by n players against 8 lowest players -/
  n_vs_8_points : ℕ := n_vs_n_points
  /-- Points earned by 8 lowest players among themselves -/
  lowest_8_points : ℕ := 28
  /-- Total points in the tournament -/
  total_points : ℕ := 2 * n_vs_n_points + 2 * lowest_8_points

/-- The theorem stating that the total number of players is 22 -/
theorem chess_tournament_players : ∀ t : ChessTournament, t.total_players = 22 := by
  sorry

end chess_tournament_players_l174_17428


namespace triangle_area_l174_17405

theorem triangle_area (A B C : ℝ) (a b c : ℝ) :
  B = 60 * π / 180 →
  c = 3 →
  b = Real.sqrt 7 →
  (1/2 * a * c * Real.sin B = 3 * Real.sqrt 3 / 4) ∨
  (1/2 * a * c * Real.sin B = 3 * Real.sqrt 3 / 2) :=
sorry

end triangle_area_l174_17405


namespace consecutive_good_numbers_l174_17477

/-- A number is good if it can be expressed as 2^x + y^2 for nonnegative integers x and y. -/
def IsGood (n : ℕ) : Prop :=
  ∃ x y : ℕ, n = 2^x + y^2

/-- A set of 5 consecutive numbers is a good set if all numbers in the set are good. -/
def IsGoodSet (s : Fin 5 → ℕ) : Prop :=
  (∀ i : Fin 5, IsGood (s i)) ∧ (∀ i : Fin 4, s (Fin.succ i) = s i + 1)

/-- The theorem states that there are only six sets of 5 consecutive good numbers. -/
theorem consecutive_good_numbers :
  ∀ s : Fin 5 → ℕ, IsGoodSet s →
    (s = ![1, 2, 3, 4, 5]) ∨
    (s = ![2, 3, 4, 5, 6]) ∨
    (s = ![8, 9, 10, 11, 12]) ∨
    (s = ![9, 10, 11, 12, 13]) ∨
    (s = ![288, 289, 290, 291, 292]) ∨
    (s = ![289, 290, 291, 292, 293]) :=
by sorry


end consecutive_good_numbers_l174_17477


namespace greatest_power_of_five_l174_17461

/-- The number of divisors function -/
noncomputable def num_divisors (n : ℕ) : ℕ := sorry

theorem greatest_power_of_five (n : ℕ) 
  (h1 : n > 0)
  (h2 : num_divisors n = 72)
  (h3 : num_divisors (5 * n) = 90) :
  ∃ (k : ℕ) (m : ℕ), n = 5^k * m ∧ m % 5 ≠ 0 ∧ k = 3 :=
sorry

end greatest_power_of_five_l174_17461


namespace f_2022_is_zero_l174_17493

def is_even_function (f : ℝ → ℝ) : Prop :=
  ∀ x, f x = f (-x)

def is_odd_function (f : ℝ → ℝ) : Prop :=
  ∀ x, f x = -f (-x)

theorem f_2022_is_zero (f : ℝ → ℝ) 
  (h1 : is_even_function (fun x ↦ f (2*x + 1)))
  (h2 : is_odd_function (fun x ↦ f (x + 2))) :
  f 2022 = 0 := by
  sorry

end f_2022_is_zero_l174_17493


namespace statement_b_not_always_true_l174_17411

/-- A line in 3D space -/
structure Line3D where
  -- Add necessary fields

/-- A plane in 3D space -/
structure Plane3D where
  -- Add necessary fields

/-- Parallel relation between a line and a plane -/
def parallel_line_plane (l : Line3D) (p : Plane3D) : Prop :=
  sorry

/-- Parallel relation between two lines -/
def parallel_lines (l1 l2 : Line3D) : Prop :=
  sorry

/-- Intersection of two planes -/
def plane_intersection (p1 p2 : Plane3D) : Line3D :=
  sorry

/-- Statement B is not always true -/
theorem statement_b_not_always_true :
  ∃ (a : Line3D) (α β : Plane3D),
    parallel_line_plane a α ∧
    plane_intersection α β = b ∧
    ¬ parallel_lines a b :=
  sorry

end statement_b_not_always_true_l174_17411


namespace smallest_part_in_ratio_l174_17458

/-- Given a total amount of (3000 + b) divided in the ratio 5:6:8, where the smallest part is c, then c = 100 -/
theorem smallest_part_in_ratio (b : ℝ) (c : ℝ) : 
  (c = (5 : ℝ) / (5 + 6 + 8 : ℝ) * (3000 + b)) → c = 100 :=
by
  sorry

end smallest_part_in_ratio_l174_17458


namespace smallest_real_number_l174_17401

theorem smallest_real_number (S : Set ℝ) (h : S = {-2, 2, 0, 1}) : 
  ∃ m ∈ S, ∀ x ∈ S, m ≤ x ∧ m = -2 := by sorry

end smallest_real_number_l174_17401


namespace compound_molecular_weight_l174_17404

/-- Calculates the molecular weight of a compound given the number of atoms and their atomic weights -/
def molecular_weight (carbon_atoms hydrogen_atoms oxygen_atoms : ℕ) 
  (carbon_weight hydrogen_weight oxygen_weight : ℝ) : ℝ :=
  (carbon_atoms : ℝ) * carbon_weight + 
  (hydrogen_atoms : ℝ) * hydrogen_weight + 
  (oxygen_atoms : ℝ) * oxygen_weight

/-- The molecular weight of a compound with 7 Carbon, 6 Hydrogen, and 2 Oxygen atoms is approximately 122.118 g/mol -/
theorem compound_molecular_weight : 
  ∀ (ε : ℝ), ε > 0 → 
  |molecular_weight 7 6 2 12.01 1.008 16.00 - 122.118| < ε :=
by sorry

end compound_molecular_weight_l174_17404


namespace inequality_solution_range_l174_17454

theorem inequality_solution_range (a : ℝ) : 
  (∃ x : ℝ, x ∈ Set.Icc 1 5 ∧ x^2 + a*x + 4 < 0) → a < -4 := by
  sorry

end inequality_solution_range_l174_17454


namespace oil_price_reduction_l174_17468

/-- Represents the price reduction problem for oil -/
def OilPriceReduction (original_price reduced_price : ℝ) : Prop :=
  reduced_price = 0.8 * original_price

/-- Represents the relationship between price and quantity before and after reduction -/
def QuantityIncrease (original_price reduced_price : ℝ) : Prop :=
  ∃ (original_quantity : ℝ),
    800 = original_quantity * original_price ∧
    800 = (original_quantity + 5) * reduced_price

theorem oil_price_reduction (original_price reduced_price : ℝ) 
  (h1 : OilPriceReduction original_price reduced_price)
  (h2 : QuantityIncrease original_price reduced_price) :
  reduced_price = 32 := by
  sorry

end oil_price_reduction_l174_17468


namespace steps_ratio_second_to_first_day_l174_17473

/-- Proves that the ratio of steps walked on the second day to the first day is 1:1 -/
theorem steps_ratio_second_to_first_day (
  first_day_steps : ℕ) 
  (second_day_steps : ℕ) 
  (third_day_steps : ℕ) 
  (h1 : first_day_steps = 200 + 300)
  (h2 : third_day_steps = second_day_steps + 100)
  (h3 : first_day_steps + second_day_steps + third_day_steps = 1600) :
  second_day_steps = first_day_steps :=
sorry

end steps_ratio_second_to_first_day_l174_17473


namespace quadratic_minimum_l174_17420

/-- Given a > 0 and f(x) = ax² + bx + c, with x₀ satisfying 2ax + b = 0,
    prove that f(x) ≥ f(x₀) for all x ∈ ℝ -/
theorem quadratic_minimum (a b c : ℝ) (ha : a > 0) :
  let f := fun x => a * x^2 + b * x + c
  let x₀ := -b / (2 * a)
  ∀ x, f x ≥ f x₀ := by
  sorry

end quadratic_minimum_l174_17420


namespace small_cuboid_height_l174_17435

/-- Proves that the height of small cuboids is 3 meters given the dimensions of a large cuboid
    and the dimensions of small cuboids that can be formed from it. -/
theorem small_cuboid_height
  (large_length large_width large_height : ℝ)
  (small_length small_width : ℝ)
  (num_small_cuboids : ℕ)
  (h_large_length : large_length = 18)
  (h_large_width : large_width = 15)
  (h_large_height : large_height = 2)
  (h_small_length : small_length = 5)
  (h_small_width : small_width = 2)
  (h_num_small_cuboids : num_small_cuboids = 18)
  : ∃ (small_height : ℝ),
    small_height = 3 ∧
    large_length * large_width * large_height =
    num_small_cuboids * small_length * small_width * small_height :=
by sorry

end small_cuboid_height_l174_17435


namespace multiplicative_inverse_123_mod_455_l174_17499

theorem multiplicative_inverse_123_mod_455 : ∃ x : ℕ, x < 455 ∧ (123 * x) % 455 = 1 :=
by
  use 223
  sorry

end multiplicative_inverse_123_mod_455_l174_17499


namespace landscape_breadth_l174_17438

/-- Given a rectangular landscape with a playground, proves that the breadth is 420 meters -/
theorem landscape_breadth (length breadth : ℝ) (playground_area : ℝ) : 
  breadth = 6 * length →
  playground_area = 4200 →
  playground_area = (1 / 7) * (length * breadth) →
  breadth = 420 := by
sorry

end landscape_breadth_l174_17438


namespace first_half_speed_l174_17480

/-- Proves that given a 60-mile trip where the speed increases by 16 mph halfway through,
    and the average speed for the entire trip is 30 mph,
    the average speed during the first half of the trip is 24 mph. -/
theorem first_half_speed (v : ℝ) : 
  (60 : ℝ) / ((30 / v) + (30 / (v + 16))) = 30 → v = 24 := by
  sorry

end first_half_speed_l174_17480


namespace total_pencils_l174_17419

/-- The number of colors in a rainbow -/
def rainbow_colors : ℕ := 7

/-- The number of people who bought the color box -/
def num_people : ℕ := 3

/-- Theorem: The total number of pencils Serenity and her two friends have -/
theorem total_pencils : rainbow_colors * num_people = 21 := by
  sorry

end total_pencils_l174_17419


namespace combined_perimeters_of_squares_l174_17450

theorem combined_perimeters_of_squares (square1 square2 : Real) 
  (h1 : square1 * square1 = 36) 
  (h2 : square2 * square2 = 49) : 
  4 * square1 + 4 * square2 = 52 := by
  sorry

end combined_perimeters_of_squares_l174_17450


namespace line_circle_intersection_range_l174_17486

/-- The equation of the circle C -/
def circle_equation (x y : ℝ) : Prop :=
  x^2 + y^2 + 8*x + 12 = 0

/-- The equation of the line -/
def line_equation (x y k : ℝ) : Prop :=
  y = k*x - 2

/-- The condition for the line to have at least one common point with the circle -/
def has_common_point (k : ℝ) : Prop :=
  ∃ x y : ℝ, circle_equation x y ∧ line_equation x y k

/-- The theorem stating the range of k for which the line has at least one common point with the circle -/
theorem line_circle_intersection_range :
  ∀ k : ℝ, has_common_point k ↔ -4/3 ≤ k ∧ k ≤ 0 :=
sorry

end line_circle_intersection_range_l174_17486


namespace linoleum_cut_theorem_l174_17492

/-- Represents a square on the linoleum piece -/
inductive Square
| White
| Black

/-- Represents the modified 8x8 grid with two additional white squares -/
def ModifiedGrid := Array (Array Square)

/-- Represents a cut on the grid -/
structure Cut where
  start_row : Nat
  start_col : Nat
  end_row : Nat
  end_col : Nat

/-- Represents a transformation (rotation and translation) -/
structure Transform where
  rotation : Nat  -- 0, 1, 2, or 3 for 0, 90, 180, 270 degrees
  translation_row : Int
  translation_col : Int

/-- Checks if a grid is a proper 8x8 chessboard -/
def is_proper_chessboard (grid : Array (Array Square)) : Bool :=
  sorry

/-- Applies a cut to the grid, returning two pieces -/
def apply_cut (grid : ModifiedGrid) (cut : Cut) : (ModifiedGrid × ModifiedGrid) :=
  sorry

/-- Applies a transformation to a grid piece -/
def apply_transform (piece : ModifiedGrid) (transform : Transform) : ModifiedGrid :=
  sorry

/-- Combines two grid pieces -/
def combine_pieces (piece1 piece2 : ModifiedGrid) : ModifiedGrid :=
  sorry

theorem linoleum_cut_theorem (original_grid : ModifiedGrid) :
  ∃ (cut : Cut) (transform : Transform),
    let (piece1, piece2) := apply_cut original_grid cut
    let transformed_piece := apply_transform piece1 transform
    let result := combine_pieces transformed_piece piece2
    is_proper_chessboard result :=
  sorry

end linoleum_cut_theorem_l174_17492


namespace multiple_inequalities_l174_17417

theorem multiple_inequalities :
  (∃ a b : ℝ, a + b < 2 * Real.sqrt (a * b)) ∧
  (∃ a : ℝ, a + 1 / a ≤ 2) ∧
  (∀ a b : ℝ, a > 0 → b > 0 → b / a + a / b ≥ 2) ∧
  (∀ x y : ℝ, x > 0 → y > 0 → x + 2 * y = 1 → 2 / x + 1 / y ≥ 8) := by
  sorry

end multiple_inequalities_l174_17417


namespace subset_implies_a_in_set_l174_17496

def A : Set ℝ := {x | x^2 = 1}
def B (a : ℝ) : Set ℝ := {x | a * x = 1}

theorem subset_implies_a_in_set (a : ℝ) : B a ⊆ A → a ∈ ({-1, 0, 1} : Set ℝ) := by
  sorry

end subset_implies_a_in_set_l174_17496


namespace arithmetic_sequence_properties_l174_17446

/-- An arithmetic sequence with the given properties -/
structure ArithmeticSequence where
  a : ℕ+ → ℚ
  a_1_eq_1 : a 1 = 1
  is_arithmetic : ∃ d ≠ 0, ∀ n : ℕ+, a (n + 1) = a n + d
  is_geometric : (a 2)^2 = a 1 * a 5

/-- The b_n sequence derived from the arithmetic sequence -/
def b (seq : ArithmeticSequence) (n : ℕ+) : ℚ :=
  1 / (seq.a n * seq.a (n + 1))

/-- The sum of the first n terms of the b sequence -/
def T (seq : ArithmeticSequence) (n : ℕ+) : ℚ :=
  (Finset.range n).sum (λ i => b seq ⟨i + 1, Nat.succ_pos i⟩)

theorem arithmetic_sequence_properties (seq : ArithmeticSequence) :
  (∀ n : ℕ+, seq.a n = 2 * n - 1) ∧
  (∀ n : ℕ+, T seq n = n / (2 * n + 1)) := by
  sorry

end arithmetic_sequence_properties_l174_17446


namespace tv_watching_days_l174_17427

/-- The number of days per week children are allowed to watch TV -/
def days_per_week : ℕ := sorry

/-- The number of minutes children watch TV each day they are allowed -/
def minutes_per_day : ℕ := 45

/-- The total number of hours children watch TV in 2 weeks -/
def total_hours_in_two_weeks : ℕ := 6

/-- The number of minutes in an hour -/
def minutes_per_hour : ℕ := 60

theorem tv_watching_days : 
  days_per_week * minutes_per_day * 2 = total_hours_in_two_weeks * minutes_per_hour :=
sorry

end tv_watching_days_l174_17427


namespace clue_distance_range_l174_17441

-- Define the distance to the nearest clue
variable (d : ℝ)

-- Define the statements of Adam, Bianca, and Cole
def adam_statement := d ≥ 8
def bianca_statement := d ≤ 7
def cole_statement := d ≤ 9

-- Theorem to prove the correct range for d
theorem clue_distance_range 
  (h1 : ¬adam_statement d) 
  (h2 : ¬bianca_statement d) 
  (h3 : ¬cole_statement d) : 
  7 < d ∧ d < 8 := by
  sorry


end clue_distance_range_l174_17441


namespace virus_spread_l174_17433

/-- Given that one infected computer leads to 121 infected computers after two rounds of infection,
    prove that the average number of computers infected by one computer in each round is 10. -/
theorem virus_spread (x : ℝ) : (1 + x + x * x = 121) → x = 10 := by
  sorry

end virus_spread_l174_17433


namespace coefficients_of_2x2_plus_x_minus_5_l174_17442

/-- Given a quadratic equation ax² + bx + c = 0, returns a tuple (a, b, c) of its coefficients -/
def quadratic_coefficients (a b c : ℝ) : ℝ × ℝ × ℝ := (a, b, c)

theorem coefficients_of_2x2_plus_x_minus_5 :
  quadratic_coefficients 2 1 (-5) = (2, 1, -5) := by sorry

end coefficients_of_2x2_plus_x_minus_5_l174_17442


namespace rhombus_perimeter_from_diagonals_l174_17466

/-- The perimeter of a rhombus given its diagonals -/
theorem rhombus_perimeter_from_diagonals (d1 d2 : ℝ) (h1 : d1 = 24) (h2 : d2 = 16) : 
  4 * Real.sqrt ((d1/2)^2 + (d2/2)^2) = 16 * Real.sqrt 13 :=
sorry

end rhombus_perimeter_from_diagonals_l174_17466


namespace line_plane_perpendicularity_l174_17464

-- Define the types for lines and planes
variable (Line Plane : Type)

-- Define the relations
variable (parallel : Line → Plane → Prop)
variable (perpendicular : Line → Plane → Prop)
variable (perpendicularLines : Line → Line → Prop)

-- State the theorem
theorem line_plane_perpendicularity 
  (a b : Line) (α : Plane) 
  (h1 : a ≠ b)
  (h2 : parallel a α) 
  (h3 : perpendicular b α) : 
  perpendicularLines a b :=
sorry

end line_plane_perpendicularity_l174_17464


namespace checkerboard_swap_iff_div_three_l174_17483

/-- Represents the color of a cell -/
inductive Color
  | White
  | Black
  | Green

/-- Represents a grid of size n × n -/
def Grid (n : ℕ) := Fin n → Fin n → Color

/-- Initial checkerboard coloring with at least one corner black -/
def initialGrid (n : ℕ) : Grid n := 
  λ i j => if (i.val + j.val) % 2 = 0 then Color.Black else Color.White

/-- Recoloring rule for a 2×2 subgrid -/
def recolorSubgrid (g : Grid n) (i j : Fin n) : Grid n :=
  λ x y => if (x.val ≥ i.val && x.val < i.val + 2 && y.val ≥ j.val && y.val < j.val + 2)
    then match g x y with
      | Color.White => Color.Black
      | Color.Black => Color.Green
      | Color.Green => Color.White
    else g x y

/-- Check if the grid is in a swapped checkerboard pattern -/
def isSwappedCheckerboard (g : Grid n) : Prop :=
  ∀ i j, g i j = if (i.val + j.val) % 2 = 0 then Color.White else Color.Black

/-- Main theorem: The checkerboard color swap is possible iff n is divisible by 3 -/
theorem checkerboard_swap_iff_div_three (n : ℕ) :
  (∃ (moves : List (Fin n × Fin n)), 
    isSwappedCheckerboard (moves.foldl (λ g (i, j) => recolorSubgrid g i j) (initialGrid n))) 
  ↔ 
  3 ∣ n := by sorry

end checkerboard_swap_iff_div_three_l174_17483


namespace cubic_equation_solution_l174_17490

theorem cubic_equation_solution (x : ℝ) (h : x^3 + 1/x^3 = 110) : x^2 + 1/x^2 = 23 := by
  sorry

end cubic_equation_solution_l174_17490


namespace newspaper_spending_difference_l174_17426

/-- Calculates the difference in yearly newspaper spending between Juanita and Grant -/
theorem newspaper_spending_difference : 
  let grant_yearly_spending : ℚ := 200
  let juanita_daily_spending : ℚ := 0.5
  let juanita_sunday_spending : ℚ := 2
  let days_per_week : ℕ := 7
  let weekdays : ℕ := 6
  let weeks_per_year : ℕ := 52
  
  let juanita_weekly_spending : ℚ := juanita_daily_spending * weekdays + juanita_sunday_spending
  let juanita_yearly_spending : ℚ := juanita_weekly_spending * weeks_per_year
  
  juanita_yearly_spending - grant_yearly_spending = 60
  := by sorry

end newspaper_spending_difference_l174_17426


namespace emilys_journey_l174_17432

theorem emilys_journey (total : ℝ) 
  (h1 : total / 5 + 30 + total / 3 + total / 6 = total) : total = 100 := by
  sorry

end emilys_journey_l174_17432


namespace solve_for_a_l174_17485

def A (a : ℝ) : Set ℝ := {a - 2, a^2 + 4*a, 10}

theorem solve_for_a : ∀ a : ℝ, -3 ∈ A a → a = -3 := by
  sorry

end solve_for_a_l174_17485


namespace quadratic_equivalence_l174_17414

/-- Given a quadratic function y = 2x² - 8x - 1, prove it's equivalent to y = 2(x-2)² - 9 -/
theorem quadratic_equivalence :
  ∀ x y : ℝ, y = 2*x^2 - 8*x - 1 ↔ y = 2*(x-2)^2 - 9 :=
by sorry

end quadratic_equivalence_l174_17414


namespace min_distance_for_three_coloring_l174_17412

-- Define the set of points in and on the regular hexagon
def hexagon_points : Set (ℝ × ℝ) := sorry

-- Define the distance function between two points
def distance (p q : ℝ × ℝ) : ℝ := sorry

-- Define a valid three-coloring scheme
def valid_three_coloring (r : ℝ) : Prop := 
  ∃ (coloring : (ℝ × ℝ) → Fin 3),
    ∀ (p q : hexagon_points), 
      coloring p = coloring q → distance p q < r

-- The main theorem
theorem min_distance_for_three_coloring : 
  (∀ r < 3/2, ¬ valid_three_coloring r) ∧ 
  valid_three_coloring (3/2) := by sorry

end min_distance_for_three_coloring_l174_17412


namespace quadratic_inequality_sum_l174_17472

/-- Given a quadratic inequality ax^2 - 5x + b > 0 with solution set {x | -3 < x < 2}, prove that a + b = 25 -/
theorem quadratic_inequality_sum (a b : ℝ) : 
  (∀ x, ax^2 - 5*x + b > 0 ↔ -3 < x ∧ x < 2) → 
  a + b = 25 := by
sorry

end quadratic_inequality_sum_l174_17472


namespace place_mat_length_l174_17410

theorem place_mat_length (r : ℝ) (n : ℕ) (y : ℝ) : 
  r = 5 → n = 8 → y = 2 * r * Real.sin (π / (2 * n)) → y = 5 * Real.sqrt (2 - Real.sqrt 2) := by
  sorry

#check place_mat_length

end place_mat_length_l174_17410


namespace age_difference_l174_17409

theorem age_difference (X Y Z : ℕ) : X + Y = Y + Z + 12 → (X - Z : ℚ) / 10 = 1.2 := by
  sorry

end age_difference_l174_17409


namespace saras_result_unique_l174_17498

/-- Represents a student's exam results -/
structure ExamResult where
  correct : ℕ
  wrong : ℕ
  unanswered : ℕ

/-- Calculates the score based on the exam result -/
def calculateScore (result : ExamResult) : ℕ :=
  30 + 5 * result.correct - 2 * result.wrong - result.unanswered

/-- Theorem: Sara's exam result is uniquely determined -/
theorem saras_result_unique :
  ∃! result : ExamResult,
    result.correct + result.wrong + result.unanswered = 30 ∧
    calculateScore result = 90 ∧
    (∀ s : ℕ, 85 < s ∧ s < 90 → 
      ∃ r1 r2 : ExamResult, r1 ≠ r2 ∧ 
        calculateScore r1 = s ∧ 
        calculateScore r2 = s ∧
        r1.correct + r1.wrong + r1.unanswered = 30 ∧
        r2.correct + r2.wrong + r2.unanswered = 30) ∧
    result.correct = 12 := by
  sorry

#check saras_result_unique

end saras_result_unique_l174_17498


namespace books_in_wrong_place_l174_17462

theorem books_in_wrong_place
  (initial_books : ℕ)
  (books_left : ℕ)
  (history_books : ℕ)
  (fiction_books : ℕ)
  (children_books : ℕ)
  (h1 : initial_books = 51)
  (h2 : books_left = 16)
  (h3 : history_books = 12)
  (h4 : fiction_books = 19)
  (h5 : children_books = 8) :
  history_books + fiction_books + children_books - (initial_books - books_left) = 4 :=
by sorry

end books_in_wrong_place_l174_17462


namespace xy_squared_sum_l174_17402

theorem xy_squared_sum (x y : ℝ) 
  (h1 : 1/x + 1/y = 3) 
  (h2 : x*y + x + y = 4) : 
  x^2*y + x*y^2 = 3 := by
sorry

end xy_squared_sum_l174_17402


namespace minus_one_circle_plus_minus_four_l174_17453

-- Define the ⊕ operation
def circle_plus (a b : ℝ) : ℝ := a + b - a * b

-- Theorem statement
theorem minus_one_circle_plus_minus_four :
  circle_plus (-1) (-4) = -9 := by
  sorry

end minus_one_circle_plus_minus_four_l174_17453


namespace football_practice_kicks_l174_17400

/-- The number of penalty kicks in a football practice session. -/
def penalty_kicks (total_players : ℕ) (goalkeepers : ℕ) : ℕ :=
  goalkeepers * (total_players - 1)

/-- Theorem: In a football club with 22 players including 4 goalkeepers,
    where each outfield player shoots once against each goalkeeper,
    the total number of penalty kicks is 84. -/
theorem football_practice_kicks :
  penalty_kicks 22 4 = 84 := by
  sorry

end football_practice_kicks_l174_17400


namespace smallest_addition_for_divisibility_by_11_l174_17495

theorem smallest_addition_for_divisibility_by_11 (n : ℕ) (h : n = 8261955) :
  ∃ k : ℕ, k > 0 ∧ (n + k) % 11 = 0 ∧ ∀ m : ℕ, m > 0 → (n + m) % 11 = 0 → k ≤ m :=
by
  -- The proof goes here
  sorry

end smallest_addition_for_divisibility_by_11_l174_17495


namespace insulation_cost_theorem_l174_17403

def surface_area (l w h : ℝ) : ℝ := 2 * (l * w + l * h + w * h)

def tank_a_area : ℝ := surface_area 3 5 2
def tank_b_area : ℝ := surface_area 4 6 3
def tank_c_area : ℝ := surface_area 6 8 4

def total_area : ℝ := 5 * tank_a_area + 3 * tank_b_area + 2 * tank_c_area

def cost_per_sq_ft : ℝ := 20

def discount_rate : ℝ := 0.2

theorem insulation_cost_theorem :
  let cost_before_discount := total_area * cost_per_sq_ft
  let discount := discount_rate * cost_before_discount
  cost_before_discount - discount = 16800 := by sorry

end insulation_cost_theorem_l174_17403


namespace intersection_of_A_and_B_l174_17497

def A : Set ℝ := {y | ∃ x : ℝ, y = x + 1}
def B : Set ℝ := {y | ∃ x : ℝ, y = 2 * x}

theorem intersection_of_A_and_B :
  A ∩ B = {y : ℝ | y ≥ 0} := by sorry

end intersection_of_A_and_B_l174_17497


namespace problem_solution_l174_17443

theorem problem_solution (x y : ℝ) 
  (h1 : x + Real.sin y = 2008)
  (h2 : x + 2008 * Real.cos y = 2007)
  (h3 : 0 ≤ y ∧ y ≤ Real.pi / 2) :
  x + y = 2007 + Real.pi / 2 := by
  sorry

end problem_solution_l174_17443


namespace product_xy_equals_nine_sqrt_three_l174_17479

-- Define the variables
variable (x y a b : ℝ)

-- State the theorem
theorem product_xy_equals_nine_sqrt_three
  (h1 : x = b^(3/2))
  (h2 : y = a)
  (h3 : a + a = b^2)
  (h4 : y = b)
  (h5 : a + a = b^(3/2))
  (h6 : b = 3) :
  x * y = 9 * Real.sqrt 3 := by
  sorry

end product_xy_equals_nine_sqrt_three_l174_17479


namespace book_pages_sum_l174_17457

theorem book_pages_sum (chapter1 chapter2 chapter3 : ℕ) 
  (h1 : chapter1 = 66)
  (h2 : chapter2 = 35)
  (h3 : chapter3 = 24) :
  chapter1 + chapter2 + chapter3 = 125 := by
  sorry

end book_pages_sum_l174_17457


namespace log_function_not_in_fourth_quadrant_l174_17416

-- Define the logarithm function
noncomputable def log_base (a : ℝ) (x : ℝ) : ℝ := Real.log x / Real.log a

-- Define the function y = log_a(x+b)
noncomputable def f (a b x : ℝ) : ℝ := log_base a (x + b)

-- Theorem statement
theorem log_function_not_in_fourth_quadrant (a b : ℝ) 
  (ha : a > 1) (hb : b < -1) :
  ∀ x y : ℝ, f a b x = y → ¬(x > 0 ∧ y < 0) :=
by sorry

end log_function_not_in_fourth_quadrant_l174_17416


namespace dog_reachable_area_l174_17467

/-- The area a dog can reach when tethered to a vertex of a regular octagonal doghouse -/
theorem dog_reachable_area (side_length : ℝ) (rope_length : ℝ) : 
  side_length = 1 →
  rope_length = 3 →
  ∃ (area : ℝ), area = 6.5 * Real.pi ∧ 
  area = (rope_length^2 * Real.pi * (240 / 360)) + (2 * (side_length^2 * Real.pi * (45 / 360))) :=
sorry

end dog_reachable_area_l174_17467


namespace largest_lower_bound_l174_17449

theorem largest_lower_bound (x y : ℝ) (h1 : x ≠ y) (h2 : x * y = 2) :
  ((x + y)^2 - 6) * ((x - y)^2 + 8) / (x - y)^2 ≥ 2 ∧
  ∀ C > 2, ∃ x y : ℝ, x ≠ y ∧ x * y = 2 ∧ ((x + y)^2 - 6) * ((x - y)^2 + 8) / (x - y)^2 < C :=
by sorry

end largest_lower_bound_l174_17449


namespace total_questions_in_contest_l174_17481

/-- Represents a participant in the spelling contest -/
structure Participant where
  name : String
  round1_correct : Nat
  round1_wrong : Nat
  round2_correct : Nat
  round2_wrong : Nat
  round3_correct : Nat
  round3_wrong : Nat

/-- Calculates the total number of questions for a participant in all rounds -/
def totalQuestions (p : Participant) : Nat :=
  p.round1_correct + p.round1_wrong +
  p.round2_correct + p.round2_wrong +
  p.round3_correct + p.round3_wrong

/-- Represents the spelling contest -/
structure SpellingContest where
  drew : Participant
  carla : Participant
  blake : Participant

/-- Theorem stating the total number of questions in the spelling contest -/
theorem total_questions_in_contest (contest : SpellingContest)
  (h1 : contest.drew.round1_correct = 20)
  (h2 : contest.drew.round1_wrong = 6)
  (h3 : contest.carla.round1_correct = 14)
  (h4 : contest.carla.round1_wrong = 2 * contest.drew.round1_wrong)
  (h5 : contest.drew.round2_correct = 24)
  (h6 : contest.drew.round2_wrong = 9)
  (h7 : contest.carla.round2_correct = 21)
  (h8 : contest.carla.round2_wrong = 8)
  (h9 : contest.blake.round2_correct = 18)
  (h10 : contest.blake.round2_wrong = 11)
  (h11 : contest.drew.round3_correct = 28)
  (h12 : contest.drew.round3_wrong = 14)
  (h13 : contest.carla.round3_correct = 22)
  (h14 : contest.carla.round3_wrong = 10)
  (h15 : contest.blake.round3_correct = 15)
  (h16 : contest.blake.round3_wrong = 16)
  : totalQuestions contest.drew + totalQuestions contest.carla + totalQuestions contest.blake = 248 := by
  sorry


end total_questions_in_contest_l174_17481


namespace percentage_difference_l174_17476

theorem percentage_difference : (0.80 * 45) - ((4 : ℚ) / 5 * 25) = 16 := by
  sorry

end percentage_difference_l174_17476


namespace circle_properties_l174_17448

-- Define the circle equation
def circle_equation (x y : ℝ) : Prop := x^2 + (y - 2)^2 = 1

-- Theorem statement
theorem circle_properties :
  -- The center is on the y-axis
  ∃ (y₀ : ℝ), circle_equation 0 y₀
  -- The radius is 1
  ∧ ∀ (x y : ℝ), circle_equation x y → (x^2 + (y - 2)^2 = 1)
  -- The circle passes through (1,2)
  ∧ circle_equation 1 2 := by
sorry

end circle_properties_l174_17448


namespace asia_highest_population_l174_17460

-- Define the structure for continent population data
structure ContinentPopulation where
  name : String
  population1950 : ℝ
  population2000 : ℝ

-- Define Asia's population data
def asia : ContinentPopulation := {
  name := "Asia",
  population1950 := 1.402,
  population2000 := 3.683
}

-- Define a function to check if a continent has the highest population
def hasHighestPopulation (continent : ContinentPopulation) (allContinents : List ContinentPopulation) (year : Nat) : Prop :=
  match year with
  | 1950 => ∀ c ∈ allContinents, continent.population1950 ≥ c.population1950
  | 2000 => ∀ c ∈ allContinents, continent.population2000 ≥ c.population2000
  | _ => False

-- Theorem statement
theorem asia_highest_population (allContinents : List ContinentPopulation) :
  asia ∈ allContinents →
  hasHighestPopulation asia allContinents 1950 ∧ hasHighestPopulation asia allContinents 2000 := by
  sorry

end asia_highest_population_l174_17460


namespace problem_solution_l174_17484

theorem problem_solution (x y : ℝ) (hx : x = 3) (hy : y = 4) :
  3 * (x^4 + 2*y^2) / 9 = 113/3 := by sorry

end problem_solution_l174_17484


namespace arithmetic_sequence_terms_count_l174_17424

/-- 
Given an arithmetic sequence with:
- First term: a = -48
- Last term: l = 72
- Common difference: d = 6

Prove that the number of terms in the sequence is 21.
-/
theorem arithmetic_sequence_terms_count : 
  ∀ (a l d : ℤ) (n : ℕ),
  a = -48 →
  l = 72 →
  d = 6 →
  l = a + (n - 1) * d →
  n = 21 := by
sorry


end arithmetic_sequence_terms_count_l174_17424


namespace sqrt_product_equals_sqrt_of_product_l174_17482

theorem sqrt_product_equals_sqrt_of_product :
  Real.sqrt 2 * Real.sqrt 3 = Real.sqrt 6 := by
  sorry

end sqrt_product_equals_sqrt_of_product_l174_17482


namespace line_segment_lattice_points_l174_17436

/-- The number of lattice points on a line segment --/
def latticePointCount (x1 y1 x2 y2 : Int) : Nat :=
  sorry

/-- Theorem: The line segment from (5, 5) to (65, 290) contains 16 lattice points --/
theorem line_segment_lattice_points :
  latticePointCount 5 5 65 290 = 16 := by
  sorry

end line_segment_lattice_points_l174_17436


namespace g_lower_bound_l174_17487

-- Define the function f
def f (a x : ℝ) : ℝ := |x - a|

-- Define the function g
def g (a x : ℝ) : ℝ := f a x + f a (x + 2)

-- Theorem statement
theorem g_lower_bound (a : ℝ) (h : ∀ x, f a x ≤ 1 ↔ 0 ≤ x ∧ x ≤ 2) :
  ∀ x, g a x ≥ 2 := by
  sorry

end g_lower_bound_l174_17487


namespace expression_value_l174_17407

theorem expression_value (m n a b x : ℝ) 
  (h1 : m = -n)  -- m and n are opposites
  (h2 : a * b = -1)  -- a and b are negative reciprocals
  (h3 : |x| = 3)  -- absolute value of x equals 3
  : x^3 - (1 + m + n + a*b) * x^2 + (m + n) * x^2004 + (a*b)^2005 = 26 ∨ 
    x^3 - (1 + m + n + a*b) * x^2 + (m + n) * x^2004 + (a*b)^2005 = -28 :=
by sorry

end expression_value_l174_17407


namespace gift_contributors_l174_17456

theorem gift_contributors (total : ℝ) (min_contribution : ℝ) (max_contribution : ℝ) :
  total = 20 →
  min_contribution = 1 →
  max_contribution = 9 →
  (∃ (n : ℕ), n ≥ 1 ∧ n * min_contribution ≤ total ∧ total ≤ n * max_contribution) →
  (∀ (m : ℕ), m ≥ 1 → m * min_contribution ≤ total → total ≤ m * max_contribution → m ≥ 12) :=
by sorry

end gift_contributors_l174_17456
