import Mathlib

namespace surface_area_upper_bound_l2995_299579

/-- A convex broken line in 3D space -/
structure ConvexBrokenLine where
  points : List (Real × Real × Real)
  is_convex : Bool
  length : Real

/-- The surface area generated by rotating a convex broken line around an axis -/
def surface_area_of_rotation (line : ConvexBrokenLine) (axis : Real × Real × Real) : Real :=
  sorry

/-- The theorem stating the upper bound of the surface area of rotation -/
theorem surface_area_upper_bound (line : ConvexBrokenLine) (axis : Real × Real × Real) :
  surface_area_of_rotation line axis ≤ Real.pi * line.length ^ 2 / 2 := by
  sorry

end surface_area_upper_bound_l2995_299579


namespace light_bulb_probability_l2995_299550

theorem light_bulb_probability (pass_rate : ℝ) (h1 : 0 ≤ pass_rate ∧ pass_rate ≤ 1) :
  pass_rate = 0.99 → 
  ∃ (P : Set ℝ → ℝ), 
    (∀ A, 0 ≤ P A ∧ P A ≤ 1) ∧ 
    (P ∅ = 0) ∧ 
    (P univ = 1) ∧
    P {x | x ≤ pass_rate} = 0.99 :=
by sorry

end light_bulb_probability_l2995_299550


namespace find_a_value_l2995_299529

-- Define the polynomial expansion
def polynomial_expansion (n : ℕ) (a b c : ℤ) (x : ℝ) : Prop :=
  (x + 2) ^ n = x ^ n + a * x ^ (n - 1) + (b * x + c)

-- State the theorem
theorem find_a_value (n : ℕ) (a b c : ℤ) :
  n ≥ 3 →
  polynomial_expansion n a b c x →
  b = 4 * c →
  a = 16 := by
  sorry


end find_a_value_l2995_299529


namespace linear_equation_condition_l2995_299505

theorem linear_equation_condition (a : ℝ) : 
  (|a - 1| = 1 ∧ a - 2 ≠ 0) ↔ a = 0 :=
by sorry

end linear_equation_condition_l2995_299505


namespace rectangle_max_area_l2995_299588

/-- Given a rectangle with perimeter 40 units and length twice its width, 
    the maximum area of the rectangle is 800/9 square units. -/
theorem rectangle_max_area : 
  ∀ w l : ℝ, 
  w > 0 → 
  l > 0 → 
  2 * (w + l) = 40 → 
  l = 2 * w → 
  ∀ a : ℝ, a = w * l → a ≤ 800 / 9 :=
by
  sorry

end rectangle_max_area_l2995_299588


namespace quadratic_root_implies_k_l2995_299557

theorem quadratic_root_implies_k (k : ℚ) : 
  (4 * ((-15 - Real.sqrt 165) / 8)^2 + 15 * ((-15 - Real.sqrt 165) / 8) + k = 0) → 
  k = 15/4 := by
  sorry

end quadratic_root_implies_k_l2995_299557


namespace sinusoidal_function_parameters_l2995_299582

open Real

theorem sinusoidal_function_parameters 
  (f : ℝ → ℝ)
  (ω φ : ℝ)
  (h1 : ∀ x, f x = 2 * sin (ω * x + φ))
  (h2 : ω > 0)
  (h3 : abs φ < π)
  (h4 : f (5 * π / 8) = 2)
  (h5 : f (11 * π / 8) = 0)
  (h6 : ∀ T > 0, (∀ x, f (x + T) = f x) → T ≥ 3 * π) :
  ω = 2 / 3 ∧ φ = π / 12 := by
sorry

end sinusoidal_function_parameters_l2995_299582


namespace z_in_fourth_quadrant_l2995_299519

-- Define the complex number i
def i : ℂ := Complex.I

-- Define the equation that z satisfies
def equation (z : ℂ) : Prop := (-1 + i) * z = (1 + i)^2

-- Define what it means for a complex number to be in the fourth quadrant
def in_fourth_quadrant (z : ℂ) : Prop :=
  z.re > 0 ∧ z.im < 0

-- Theorem statement
theorem z_in_fourth_quadrant :
  ∃ z : ℂ, equation z ∧ in_fourth_quadrant z :=
sorry

end z_in_fourth_quadrant_l2995_299519


namespace quadratic_inequality_range_l2995_299549

theorem quadratic_inequality_range (a : ℝ) : 
  (∀ x : ℝ, a * x^2 + a * x + 1 > 0) ↔ a ∈ Set.Ici 0 ∩ Set.Iio 4 :=
sorry

end quadratic_inequality_range_l2995_299549


namespace three_statements_imply_negation_l2995_299592

theorem three_statements_imply_negation (p q : Prop) :
  let statement1 := p ∨ q
  let statement2 := p ∨ ¬q
  let statement3 := p ∧ ¬q
  let statement4 := ¬p ∨ ¬q
  let negation_of_both_false := ¬(¬p ∧ ¬q)
  (statement1 → negation_of_both_false) ∧
  (statement2 → negation_of_both_false) ∧
  (statement3 → negation_of_both_false) ∧
  ¬(statement4 → negation_of_both_false) := by
  sorry

end three_statements_imply_negation_l2995_299592


namespace wage_difference_proof_l2995_299541

/-- Proves that the difference between hourly wages of two candidates is $5 
    given specific conditions about their pay and work hours. -/
theorem wage_difference_proof (total_pay hours_p hours_q wage_p wage_q : ℝ) 
  (h1 : total_pay = 300)
  (h2 : wage_p = 1.5 * wage_q)
  (h3 : hours_q = hours_p + 10)
  (h4 : wage_p * hours_p = total_pay)
  (h5 : wage_q * hours_q = total_pay) :
  wage_p - wage_q = 5 := by
sorry

end wage_difference_proof_l2995_299541


namespace P_sufficient_not_necessary_for_Q_l2995_299553

def P : Set ℝ := {1, 2, 3, 4}
def Q : Set ℝ := {x : ℝ | 0 < x ∧ x < 5}

theorem P_sufficient_not_necessary_for_Q :
  (∀ x, x ∈ P → x ∈ Q) ∧ (∃ x, x ∈ Q ∧ x ∉ P) := by
  sorry

end P_sufficient_not_necessary_for_Q_l2995_299553


namespace cloud_9_diving_bookings_l2995_299531

/-- Cloud 9 Diving Company bookings problem -/
theorem cloud_9_diving_bookings 
  (total_after_cancellations : ℕ) 
  (group_bookings : ℕ) 
  (cancellation_returns : ℕ) 
  (h1 : total_after_cancellations = 26400)
  (h2 : group_bookings = 16000)
  (h3 : cancellation_returns = 1600) :
  total_after_cancellations + cancellation_returns - group_bookings = 12000 :=
by sorry

end cloud_9_diving_bookings_l2995_299531


namespace count_divisible_by_11_equals_v_l2995_299593

/-- Concatenates the squares of integers from 1 to n -/
def b (n : ℕ) : ℕ := sorry

/-- Counts how many numbers b_k are divisible by 11 for 1 ≤ k ≤ 50 -/
def count_divisible_by_11 : ℕ := sorry

/-- The correct count of numbers b_k divisible by 11 for 1 ≤ k ≤ 50 -/
def v : ℕ := sorry

theorem count_divisible_by_11_equals_v : count_divisible_by_11 = v := by sorry

end count_divisible_by_11_equals_v_l2995_299593


namespace car_journey_speed_l2995_299515

/-- Represents the average speed between two towns -/
structure AverageSpeed where
  value : ℝ
  unit : String

/-- Represents the distance between two towns -/
structure Distance where
  value : ℝ
  unit : String

/-- Theorem: Given the conditions of the car journey, prove that the average speed from Town C to Town D is 36 mph -/
theorem car_journey_speed (d_ab d_bc d_cd : Distance) (s_ab s_bc s_total : AverageSpeed) :
  d_ab.value = 120 ∧ d_ab.unit = "miles" →
  d_bc.value = 60 ∧ d_bc.unit = "miles" →
  d_cd.value = 90 ∧ d_cd.unit = "miles" →
  s_ab.value = 40 ∧ s_ab.unit = "mph" →
  s_bc.value = 30 ∧ s_bc.unit = "mph" →
  s_total.value = 36 ∧ s_total.unit = "mph" →
  ∃ (s_cd : AverageSpeed), s_cd.value = 36 ∧ s_cd.unit = "mph" := by
  sorry


end car_journey_speed_l2995_299515


namespace sin_sixty_degrees_l2995_299509

theorem sin_sixty_degrees : Real.sin (π / 3) = Real.sqrt 3 / 2 := by
  sorry

end sin_sixty_degrees_l2995_299509


namespace cost_function_correct_l2995_299599

/-- The cost function for shipping a parcel -/
def cost (P : ℕ) : ℕ :=
  if P ≤ 5 then
    12 + 4 * (P - 1)
  else
    27 + 4 * P - 21

/-- Theorem stating the correctness of the cost function -/
theorem cost_function_correct (P : ℕ) :
  (P ≤ 5 → cost P = 12 + 4 * (P - 1)) ∧
  (P > 5 → cost P = 27 + 4 * P - 21) := by
  sorry

end cost_function_correct_l2995_299599


namespace joe_height_difference_l2995_299587

/-- Proves that Joe is 6 inches taller than double Sara's height -/
theorem joe_height_difference (sara : ℝ) (joe : ℝ) : 
  sara + joe = 120 →
  joe = 82 →
  joe - 2 * sara = 6 := by
sorry

end joe_height_difference_l2995_299587


namespace irrational_minus_rational_is_irrational_pi_minus_3_14_irrational_l2995_299574

/-- π is irrational -/
axiom pi_irrational : Irrational Real.pi

/-- 3.14 is rational -/
axiom rational_3_14 : ∃ (q : ℚ), (q : ℝ) = 3.14

/-- The difference of an irrational number and a rational number is irrational -/
theorem irrational_minus_rational_is_irrational (x y : ℝ) (hx : Irrational x) (hy : ∃ (q : ℚ), (q : ℝ) = y) :
  Irrational (x - y) :=
sorry

/-- π - 3.14 is irrational -/
theorem pi_minus_3_14_irrational : Irrational (Real.pi - 3.14) :=
  irrational_minus_rational_is_irrational Real.pi 3.14 pi_irrational rational_3_14

end irrational_minus_rational_is_irrational_pi_minus_3_14_irrational_l2995_299574


namespace total_distance_two_trains_l2995_299511

/-- Given two trains A and B traveling for 15 minutes, with speeds of 70 kmph and 90 kmph respectively,
    the total distance covered by both trains is 40 kilometers. -/
theorem total_distance_two_trains (speed_A speed_B : ℝ) (time : ℝ) : 
  speed_A = 70 → speed_B = 90 → time = 0.25 → 
  (speed_A * time + speed_B * time) = 40 := by
sorry

end total_distance_two_trains_l2995_299511


namespace least_five_digit_congruent_to_7_mod_18_l2995_299504

theorem least_five_digit_congruent_to_7_mod_18 :
  ∃ (n : ℕ), 
    (n ≥ 10000 ∧ n < 100000) ∧ 
    (n % 18 = 7) ∧
    (∀ m : ℕ, m ≥ 10000 ∧ m < 100000 ∧ m % 18 = 7 → m ≥ n) ∧
    n = 10015 :=
by sorry

end least_five_digit_congruent_to_7_mod_18_l2995_299504


namespace triangle_properties_l2995_299501

-- Define the triangle ABC
structure Triangle where
  a : ℝ
  b : ℝ
  c : ℝ
  A : ℝ
  B : ℝ
  C : ℝ

-- Define the conditions
def satisfies_conditions (t : Triangle) : Prop :=
  t.b * Real.cos t.A = (2 * t.c + t.a) * Real.cos (Real.pi - t.B) ∧
  t.b = 4 ∧
  (1 / 2) * t.a * t.c * Real.sin t.B = Real.sqrt 3

-- Theorem statement
theorem triangle_properties (t : Triangle) 
  (h : satisfies_conditions t) : 
  t.B = (2 / 3) * Real.pi ∧ t.a + t.c = 2 * Real.sqrt 5 := by
  sorry

end triangle_properties_l2995_299501


namespace trig_fraction_equality_l2995_299584

theorem trig_fraction_equality (x : ℝ) (h : (1 - Real.sin x) / Real.cos x = 3/5) :
  Real.cos x / (1 + Real.sin x) = 3/5 := by
  sorry

end trig_fraction_equality_l2995_299584


namespace cookie_baking_time_l2995_299535

/-- Represents the cookie-making process with given times -/
structure CookieProcess where
  total_time : ℕ
  white_icing_time : ℕ
  chocolate_icing_time : ℕ

/-- Calculates the remaining time for batter, baking, and cooling -/
def remaining_time (process : CookieProcess) : ℕ :=
  process.total_time - (process.white_icing_time + process.chocolate_icing_time)

/-- Theorem: The remaining time for batter, baking, and cooling is 60 minutes -/
theorem cookie_baking_time (process : CookieProcess)
    (h1 : process.total_time = 120)
    (h2 : process.white_icing_time = 30)
    (h3 : process.chocolate_icing_time = 30) :
    remaining_time process = 60 := by
  sorry

#eval remaining_time { total_time := 120, white_icing_time := 30, chocolate_icing_time := 30 }

end cookie_baking_time_l2995_299535


namespace negation_of_proposition_l2995_299569

theorem negation_of_proposition (p : Prop) :
  (¬ (∃ m : ℝ, (m^2 + m - 6)⁻¹ > 0)) ↔ 
  (∀ m : ℝ, (m^2 + m - 6)⁻¹ < 0 ∨ m^2 + m - 6 = 0) :=
by sorry

end negation_of_proposition_l2995_299569


namespace platform_length_l2995_299563

/-- The length of a platform given train specifications -/
theorem platform_length (train_length : ℝ) (cross_platform_time : ℝ) (cross_pole_time : ℝ)
  (h1 : train_length = 300)
  (h2 : cross_platform_time = 39)
  (h3 : cross_pole_time = 8) :
  let train_speed := train_length / cross_pole_time
  let platform_length := train_speed * cross_platform_time - train_length
  platform_length = 1162.5 := by sorry

end platform_length_l2995_299563


namespace percentage_to_pass_l2995_299520

/-- Given a student's marks and passing conditions, prove the percentage needed to pass -/
theorem percentage_to_pass
  (marks_obtained : ℕ)
  (marks_to_pass : ℕ)
  (max_marks : ℕ)
  (h1 : marks_obtained = 130)
  (h2 : marks_to_pass = marks_obtained + 14)
  (h3 : max_marks = 400) :
  (marks_to_pass : ℚ) / max_marks * 100 = 36 := by
  sorry

end percentage_to_pass_l2995_299520


namespace pizza_cost_is_80_l2995_299500

/-- The total cost of pizzas given the number of pizzas, pieces per pizza, and cost per piece. -/
def total_cost (num_pizzas : ℕ) (pieces_per_pizza : ℕ) (cost_per_piece : ℕ) : ℕ :=
  num_pizzas * pieces_per_pizza * cost_per_piece

/-- Theorem stating that the total cost of pizzas is $80 under the given conditions. -/
theorem pizza_cost_is_80 :
  total_cost 4 5 4 = 80 := by
  sorry

end pizza_cost_is_80_l2995_299500


namespace special_triangle_area_l2995_299525

/-- A triangle with specific properties -/
structure SpecialTriangle where
  /-- The height of the triangle -/
  height : ℝ
  /-- The smaller part of the base -/
  smaller_base : ℝ
  /-- The ratio of the divided angle -/
  angle_ratio : ℝ
  /-- The height is 2 -/
  height_is_two : height = 2
  /-- The smaller part of the base is 1 -/
  smaller_base_is_one : smaller_base = 1
  /-- The height divides the angle in the ratio 2:1 -/
  angle_ratio_is_two_to_one : angle_ratio = 2/1

/-- The area of the SpecialTriangle is 11/3 -/
theorem special_triangle_area (t : SpecialTriangle) : 
  (1/2) * t.height * (t.smaller_base + (8/3)) = 11/3 := by
  sorry


end special_triangle_area_l2995_299525


namespace probability_five_heads_seven_flips_l2995_299591

theorem probability_five_heads_seven_flips :
  let n : ℕ := 7  -- total number of flips
  let k : ℕ := 5  -- number of heads we want
  let p : ℚ := 1/2  -- probability of heads on a single flip (fair coin)
  Nat.choose n k * p^k * (1 - p)^(n - k) = 21/128 :=
by sorry

end probability_five_heads_seven_flips_l2995_299591


namespace not_divides_power_diff_l2995_299575

theorem not_divides_power_diff (n : ℕ+) : ¬ ∃ k : ℤ, (2^(n : ℕ) + 65) * k = 5^(n : ℕ) - 3^(n : ℕ) := by
  sorry

end not_divides_power_diff_l2995_299575


namespace certain_number_problem_l2995_299581

theorem certain_number_problem (x y : ℝ) (h1 : x = 180) 
  (h2 : 0.25 * x = 0.10 * y - 5) : y = 500 := by
  sorry

end certain_number_problem_l2995_299581


namespace proposition_logic_l2995_299554

theorem proposition_logic (p q : Prop) : 
  (((p ∧ q) → (p ∨ q)) ∧ ¬((p ∨ q) → (p ∧ q))) ∧
  ((¬(p ∧ q) → p) ∧ ¬(p → ¬(p ∧ q))) := by
  sorry

end proposition_logic_l2995_299554


namespace isosceles_triangle_perimeter_l2995_299507

-- Define the equation
def equation (x : ℝ) : Prop := x^2 - 6*x + 8 = 0

-- Define an isosceles triangle type
structure IsoscelesTriangle where
  side1 : ℝ
  side2 : ℝ
  base : ℝ
  h_isosceles : side1 = side2
  h_equation1 : equation side1
  h_equation2 : equation side2
  h_triangle_inequality : side1 + side2 > base ∧ side1 + base > side2 ∧ side2 + base > side1

-- Theorem statement
theorem isosceles_triangle_perimeter (t : IsoscelesTriangle) : t.side1 + t.side2 + t.base = 10 :=
sorry

end isosceles_triangle_perimeter_l2995_299507


namespace inequality_of_reciprocals_l2995_299522

theorem inequality_of_reciprocals (a b c : ℝ) (ha : a > 0) (hb : b > 0) (hc : c > 0) :
  1/(2*a) + 1/(2*b) + 1/(2*c) ≥ 1/(a+b) + 1/(b+c) + 1/(c+a) := by
  sorry

end inequality_of_reciprocals_l2995_299522


namespace max_value_quadratic_l2995_299590

theorem max_value_quadratic (x : ℝ) :
  let y : ℝ → ℝ := λ x => -3 * x^2 + 4 * x + 6
  ∃ (max_y : ℝ), ∀ (x : ℝ), y x ≤ max_y ∧ max_y = 22/3 :=
by
  sorry

end max_value_quadratic_l2995_299590


namespace probability_at_least_one_woman_l2995_299503

def total_people : ℕ := 15
def num_men : ℕ := 9
def num_women : ℕ := 6
def committee_size : ℕ := 4

theorem probability_at_least_one_woman :
  let prob_all_men := (num_men / total_people) *
                      ((num_men - 1) / (total_people - 1)) *
                      ((num_men - 2) / (total_people - 2)) *
                      ((num_men - 3) / (total_people - 3))
  (1 : ℚ) - prob_all_men = 59 / 65 := by
  sorry

end probability_at_least_one_woman_l2995_299503


namespace accounting_majors_l2995_299576

theorem accounting_majors (p q r s : ℕ+) 
  (h1 : p * q * r * s = 1365)
  (h2 : 1 < p)
  (h3 : p < q)
  (h4 : q < r)
  (h5 : r < s) :
  p = 3 := by sorry

end accounting_majors_l2995_299576


namespace women_in_room_l2995_299526

theorem women_in_room (initial_men : ℕ) (initial_women : ℕ) : 
  initial_men * 5 = initial_women * 4 →
  (initial_men + 2) = 14 →
  2 * (initial_women - 3) = 24 :=
by
  sorry

end women_in_room_l2995_299526


namespace min_value_absolute_sum_l2995_299510

theorem min_value_absolute_sum (x : ℝ) : 
  |x - 4| + |x + 8| + |x - 5| ≥ -25 ∧ ∃ y : ℝ, |y - 4| + |y + 8| + |y - 5| = -25 := by
  sorry

end min_value_absolute_sum_l2995_299510


namespace pen_pencil_ratio_l2995_299513

/-- Proves that given 30 pencils and 5 more pencils than pens, the ratio of pens to pencils is 5:6 -/
theorem pen_pencil_ratio :
  ∀ (num_pens num_pencils : ℕ),
    num_pencils = 30 →
    num_pencils = num_pens + 5 →
    (num_pens : ℚ) / (num_pencils : ℚ) = 5 / 6 := by
  sorry

end pen_pencil_ratio_l2995_299513


namespace marilyn_bottle_caps_l2995_299521

/-- The number of bottle caps Marilyn starts with -/
def initial_caps : ℕ := 51

/-- The number of bottle caps Marilyn shares with Nancy -/
def shared_caps : ℕ := 36

/-- The number of bottle caps Marilyn ends up with -/
def remaining_caps : ℕ := initial_caps - shared_caps

theorem marilyn_bottle_caps : remaining_caps = 15 := by
  sorry

end marilyn_bottle_caps_l2995_299521


namespace focus_to_asymptote_distance_l2995_299562

-- Define the hyperbola C
def hyperbola (x y : ℝ) : Prop := x^2 / 3 - y^2 / 3 = 1

-- Define a focus of the hyperbola
def focus (F : ℝ × ℝ) : Prop := 
  ∃ (x y : ℝ), hyperbola x y ∧ F = (Real.sqrt 6, 0)

-- Define an asymptote of the hyperbola
def asymptote (x y : ℝ) : Prop := y = x

-- Theorem statement
theorem focus_to_asymptote_distance (F : ℝ × ℝ) :
  focus F → (∃ (x y : ℝ), asymptote x y ∧ 
    Real.sqrt ((F.1 - x)^2 + (F.2 - y)^2) / Real.sqrt (1 + 1^2) = Real.sqrt 3) :=
sorry

end focus_to_asymptote_distance_l2995_299562


namespace problem_statement_l2995_299578

theorem problem_statement (x y : ℝ) (h : x^2 * y^2 - x * y - x / y - y / x = 4) :
  (x - 2) * (y - 2) = 3 - 2 * Real.sqrt 2 := by
  sorry

end problem_statement_l2995_299578


namespace special_polygon_area_l2995_299527

/-- A polygon with special properties -/
structure SpecialPolygon where
  sides : ℕ
  perimeter : ℝ
  is_decomposable_into_rectangles : Prop
  all_sides_congruent : Prop
  sides_perpendicular : Prop

/-- The area of a special polygon -/
def area (p : SpecialPolygon) : ℝ := sorry

/-- Theorem stating the area of the specific polygon described in the problem -/
theorem special_polygon_area :
  ∀ (p : SpecialPolygon),
    p.sides = 24 ∧
    p.perimeter = 48 ∧
    p.is_decomposable_into_rectangles ∧
    p.all_sides_congruent ∧
    p.sides_perpendicular →
    area p = 32 := by sorry

end special_polygon_area_l2995_299527


namespace tan_four_implies_expression_equals_21_68_l2995_299518

theorem tan_four_implies_expression_equals_21_68 (θ : Real) (h : Real.tan θ = 4) :
  (Real.sin θ + Real.cos θ) / (17 * Real.sin θ) + Real.sin θ^2 / 4 = 21/68 := by
  sorry

end tan_four_implies_expression_equals_21_68_l2995_299518


namespace inequality_proof_l2995_299564

theorem inequality_proof (x y a : ℝ) 
  (h1 : x + a < y + a) 
  (h2 : a * x > a * y) : 
  x < y ∧ a < 0 := by
sorry

end inequality_proof_l2995_299564


namespace arithmetic_proof_l2995_299545

theorem arithmetic_proof : (56^2 + 56^2) / 28^2 = 8 := by
  sorry

end arithmetic_proof_l2995_299545


namespace systematic_sampling_interval_l2995_299586

/-- Calculates the sampling interval for systematic sampling -/
def samplingInterval (populationSize sampleSize : ℕ) : ℕ :=
  populationSize / sampleSize

/-- Theorem: The sampling interval for a population of 1200 and sample size of 40 is 30 -/
theorem systematic_sampling_interval :
  samplingInterval 1200 40 = 30 := by
  sorry

end systematic_sampling_interval_l2995_299586


namespace gcd_1443_999_l2995_299514

theorem gcd_1443_999 : Nat.gcd 1443 999 = 111 := by
  sorry

end gcd_1443_999_l2995_299514


namespace student_group_assignment_l2995_299533

/-- The number of ways to assign students to groups -/
def assignment_count (num_students : ℕ) (num_groups : ℕ) : ℕ :=
  num_groups ^ num_students

/-- Theorem: The number of ways to assign 4 students to 3 groups is 3^4 -/
theorem student_group_assignment :
  assignment_count 4 3 = 3^4 := by
  sorry

end student_group_assignment_l2995_299533


namespace p_necessary_not_sufficient_for_q_l2995_299552

theorem p_necessary_not_sufficient_for_q :
  (∃ a : ℝ, a > 4 ∧ ¬(5 < a ∧ a < 6)) ∧
  (∀ a : ℝ, 5 < a ∧ a < 6 → a > 4) :=
by sorry

end p_necessary_not_sufficient_for_q_l2995_299552


namespace units_digit_of_seven_power_l2995_299502

theorem units_digit_of_seven_power : ∃ n : ℕ, 7^(6^5) ≡ 1 [ZMOD 10] :=
by sorry

end units_digit_of_seven_power_l2995_299502


namespace correct_scientific_notation_l2995_299523

/-- Scientific notation representation -/
structure ScientificNotation where
  coefficient : ℝ
  exponent : ℤ
  coeff_range : 1 ≤ coefficient ∧ coefficient < 10

/-- Check if a ScientificNotation represents a given number -/
def represents (sn : ScientificNotation) (n : ℝ) : Prop :=
  sn.coefficient * (10 : ℝ) ^ sn.exponent = n

/-- The number we want to represent (5.81 million) -/
def target_number : ℝ := 5.81e6

/-- The proposed scientific notation representation -/
def proposed_notation : ScientificNotation :=
  { coefficient := 5.81
    exponent := 6
    coeff_range := by sorry }

theorem correct_scientific_notation :
  represents proposed_notation target_number :=
sorry

end correct_scientific_notation_l2995_299523


namespace complex_in_third_quadrant_l2995_299542

def complex (a b : ℝ) := a + b * Complex.I

theorem complex_in_third_quadrant (z : ℂ) (h : (1 + 2 * Complex.I) * z = Complex.I ^ 3) :
  (z.re < 0) ∧ (z.im < 0) := by
  sorry

end complex_in_third_quadrant_l2995_299542


namespace survey_respondents_l2995_299543

/-- Represents the number of people preferring each brand in a survey -/
structure BrandPreference where
  x : ℕ
  y : ℕ
  z : ℕ

/-- Calculates the total number of respondents given brand preferences -/
def totalRespondents (pref : BrandPreference) : ℕ :=
  pref.x + pref.y + pref.z

/-- Theorem stating the total number of respondents in the survey -/
theorem survey_respondents :
  ∀ (pref : BrandPreference),
    pref.x = 150 ∧
    5 * pref.z = pref.x ∧
    3 * pref.z = pref.y →
    totalRespondents pref = 270 := by
  sorry


end survey_respondents_l2995_299543


namespace male_students_bound_l2995_299568

/-- Represents the arrangement of students in a grid -/
structure StudentArrangement where
  rows : ℕ
  columns : ℕ
  total_students : ℕ
  same_gender_pairs_bound : ℕ

/-- Counts the number of male students in a given arrangement -/
def count_male_students (arrangement : StudentArrangement) : ℕ := sorry

/-- The main theorem to be proved -/
theorem male_students_bound (arrangement : StudentArrangement) 
  (h1 : arrangement.rows = 22)
  (h2 : arrangement.columns = 75)
  (h3 : arrangement.total_students = 1650)
  (h4 : arrangement.same_gender_pairs_bound = 11) :
  count_male_students arrangement ≤ 928 := by sorry

end male_students_bound_l2995_299568


namespace recurring_decimal_calculation_l2995_299551

theorem recurring_decimal_calculation : ∀ (x y : ℚ),
  x = 1/3 → y = 1 → (8 * x) / y = 8/3 := by sorry

end recurring_decimal_calculation_l2995_299551


namespace unique_solution_l2995_299530

theorem unique_solution : ∃! x : ℝ, 
  (3 * x^2) / (x - 2) - (3 * x + 9) / 4 + (6 - 9 * x) / (x - 2) + 2 = 0 ∧ 
  x^3 ≠ 3 * x + 1 ∧
  x = 13 / 9 := by
  sorry

end unique_solution_l2995_299530


namespace factorization_3mx_6my_factorization_1_25x_squared_l2995_299567

-- For the first expression
theorem factorization_3mx_6my (m x y : ℝ) : 
  3 * m * x - 6 * m * y = 3 * m * (x - 2 * y) := by sorry

-- For the second expression
theorem factorization_1_25x_squared (x : ℝ) :
  1 - 25 * x^2 = (1 + 5 * x) * (1 - 5 * x) := by sorry

end factorization_3mx_6my_factorization_1_25x_squared_l2995_299567


namespace variance_binomial_8_3_4_l2995_299512

/-- The variance of a binomial distribution B(n, p) with n trials and probability p of success. -/
def binomialVariance (n : ℕ) (p : ℝ) : ℝ := n * p * (1 - p)

/-- Proof that the variance of X ~ B(8, 3/4) is 3/2 -/
theorem variance_binomial_8_3_4 :
  binomialVariance 8 (3/4) = 3/2 := by
  sorry

#check variance_binomial_8_3_4

end variance_binomial_8_3_4_l2995_299512


namespace simplify_expression_l2995_299597

theorem simplify_expression (x : ℝ) (h : x ≠ -2) :
  4 / (x + 2) + x - 2 = x^2 / (x + 2) := by
  sorry

end simplify_expression_l2995_299597


namespace equation_solution_l2995_299595

theorem equation_solution : ∃! x : ℝ, (3 / (x - 3) = 4 / (x - 4)) ∧ x ≠ 3 ∧ x ≠ 4 := by
  sorry

end equation_solution_l2995_299595


namespace parallelepiped_volume_and_lateral_area_l2995_299573

/-- 
Given a right parallelepiped with a rhombus base of area Q and diagonal section areas S₁ and S₂,
this theorem proves the formulas for its volume and lateral surface area.
-/
theorem parallelepiped_volume_and_lateral_area (Q S₁ S₂ : ℝ) 
  (hQ : Q > 0) (hS₁ : S₁ > 0) (hS₂ : S₂ > 0) :
  ∃ (V LSA : ℝ),
    V = Real.sqrt ((S₁ * S₂ * Q) / 2) ∧ 
    LSA = 2 * Real.sqrt (S₁^2 + S₂^2) := by
  sorry

end parallelepiped_volume_and_lateral_area_l2995_299573


namespace pages_read_tomorrow_l2995_299594

/-- The number of pages Melody needs to read for her English class -/
def english_pages : ℕ := 50

/-- The number of pages Melody needs to read for her Math class -/
def math_pages : ℕ := 30

/-- The number of pages Melody needs to read for her History class -/
def history_pages : ℕ := 20

/-- The number of pages Melody needs to read for her Chinese class -/
def chinese_pages : ℕ := 40

/-- The fraction of English pages Melody will read tomorrow -/
def english_fraction : ℚ := 1 / 5

/-- The percentage of Math pages Melody will read tomorrow -/
def math_percentage : ℚ := 30 / 100

/-- The fraction of History pages Melody will read tomorrow -/
def history_fraction : ℚ := 1 / 4

/-- The percentage of Chinese pages Melody will read tomorrow -/
def chinese_percentage : ℚ := 125 / 1000

/-- Theorem stating the total number of pages Melody will read tomorrow -/
theorem pages_read_tomorrow :
  (english_fraction * english_pages).floor +
  (math_percentage * math_pages).floor +
  (history_fraction * history_pages).floor +
  (chinese_percentage * chinese_pages).floor = 29 := by
  sorry

end pages_read_tomorrow_l2995_299594


namespace wallace_jerky_production_l2995_299544

/-- Represents the jerky production scenario -/
structure JerkyProduction where
  total_order : ℕ
  already_made : ℕ
  days_to_fulfill : ℕ
  batches_per_day : ℕ

/-- Calculates the number of bags one batch can make -/
def bags_per_batch (jp : JerkyProduction) : ℕ :=
  ((jp.total_order - jp.already_made) / jp.days_to_fulfill) / jp.batches_per_day

/-- Theorem stating that under the given conditions, one batch makes 10 bags -/
theorem wallace_jerky_production :
  ∀ (jp : JerkyProduction),
    jp.total_order = 60 →
    jp.already_made = 20 →
    jp.days_to_fulfill = 4 →
    jp.batches_per_day = 1 →
    bags_per_batch jp = 10 := by
  sorry

end wallace_jerky_production_l2995_299544


namespace probability_is_three_tenths_l2995_299539

/-- A bag containing 5 balls numbered from 1 to 5 -/
def Bag : Finset ℕ := {1, 2, 3, 4, 5}

/-- The set of all possible pairs of balls -/
def AllPairs : Finset (ℕ × ℕ) := (Bag.product Bag).filter (fun p => p.1 < p.2)

/-- The set of pairs whose sum is either 3 or 6 -/
def FavorablePairs : Finset (ℕ × ℕ) := AllPairs.filter (fun p => p.1 + p.2 = 3 ∨ p.1 + p.2 = 6)

/-- The probability of drawing a pair with sum 3 or 6 -/
def ProbabilityOfSum3Or6 : ℚ := (FavorablePairs.card : ℚ) / (AllPairs.card : ℚ)

theorem probability_is_three_tenths : ProbabilityOfSum3Or6 = 3 / 10 := by
  sorry

end probability_is_three_tenths_l2995_299539


namespace quadratic_always_negative_l2995_299583

theorem quadratic_always_negative (m : ℝ) :
  (∀ x : ℝ, -x^2 + (2*m + 6)*x - m - 3 < 0) ↔ -3 < m ∧ m < -2 :=
by sorry

end quadratic_always_negative_l2995_299583


namespace sum_and_round_to_nearest_ten_l2995_299561

-- Define a function to round to the nearest ten
def roundToNearestTen (n : ℤ) : ℤ :=
  10 * ((n + 5) / 10)

-- Theorem statement
theorem sum_and_round_to_nearest_ten :
  roundToNearestTen (54 + 29) = 80 := by
  sorry

end sum_and_round_to_nearest_ten_l2995_299561


namespace triangle_perimeter_is_minimal_l2995_299546

def triangle_side_1 : ℕ := 45
def triangle_side_2 : ℕ := 55
def triangle_side_3 : ℕ := 2 * triangle_side_1

def triangle_perimeter : ℕ := triangle_side_1 + triangle_side_2 + triangle_side_3

theorem triangle_perimeter_is_minimal : 
  triangle_perimeter = 190 ∧ 
  (∀ a b c : ℕ, a = triangle_side_1 → b = triangle_side_2 → c ≥ 2 * triangle_side_1 → 
   a + b > c ∧ a + c > b ∧ b + c > a → a + b + c ≥ triangle_perimeter) := by
  sorry

end triangle_perimeter_is_minimal_l2995_299546


namespace draw_four_from_fifteen_l2995_299585

/-- The number of balls in the bin -/
def n : ℕ := 15

/-- The number of balls to be drawn -/
def k : ℕ := 4

/-- The number of ways to draw k balls from n balls in order, without replacement -/
def drawWithoutReplacement (n k : ℕ) : ℕ :=
  (n - k + 1).factorial / (n - k).factorial

theorem draw_four_from_fifteen :
  drawWithoutReplacement n k = 32760 := by
  sorry

end draw_four_from_fifteen_l2995_299585


namespace min_value_implies_a_l2995_299558

/-- Given a function f(x) = 4x + a/x where x > 0 and a > 0,
    if the function takes its minimum value at x = 2,
    then a = 16 -/
theorem min_value_implies_a (a : ℝ) :
  (a > 0) →
  (∀ x : ℝ, x > 0 → 4*x + a/x ≥ 4*2 + a/2) →
  (∀ x : ℝ, x > 0 → x ≠ 2 → 4*x + a/x > 4*2 + a/2) →
  a = 16 := by
  sorry

end min_value_implies_a_l2995_299558


namespace sum_mod_thirteen_l2995_299538

theorem sum_mod_thirteen : (10247 + 10248 + 10249 + 10250) % 13 = 4 := by
  sorry

end sum_mod_thirteen_l2995_299538


namespace mitzel_allowance_percentage_l2995_299524

theorem mitzel_allowance_percentage (spent : ℝ) (left : ℝ) : 
  spent = 14 → left = 26 → (spent / (spent + left)) * 100 = 35 := by
  sorry

end mitzel_allowance_percentage_l2995_299524


namespace last_home_game_score_l2995_299555

theorem last_home_game_score (H : ℕ) : 
  (H = 2 * (H / 2)) →  -- Last home game score is twice the first away game
  (∃ second_away : ℕ, second_away = H / 2 + 18) →  -- Second away game score
  (∃ third_away : ℕ, third_away = (H / 2 + 18) + 2) →  -- Third away game score
  ((5 * H) / 2 + 38 + 55 = 4 * H) →  -- Cumulative points condition
  H = 62 := by
sorry

end last_home_game_score_l2995_299555


namespace lisa_photos_l2995_299537

theorem lisa_photos (animal_photos : ℕ) 
  (h1 : animal_photos + 3 * animal_photos + (3 * animal_photos - 10) = 45) : 
  animal_photos = 7 := by
sorry

end lisa_photos_l2995_299537


namespace deer_meat_content_deer_meat_content_is_200_l2995_299536

/-- Proves that each deer contains 200 pounds of meat given the hunting conditions -/
theorem deer_meat_content (hunting_wolves : ℕ) (additional_wolves : ℕ) 
  (meat_per_wolf_per_day : ℕ) (hunting_days : ℕ) (deer_per_hunting_wolf : ℕ) : ℕ :=
  let total_wolves := hunting_wolves + additional_wolves
  let total_meat_needed := total_wolves * meat_per_wolf_per_day * hunting_days
  let total_deer := hunting_wolves * deer_per_hunting_wolf
  total_meat_needed / total_deer

#check deer_meat_content 4 16 8 5 1 = 200

/-- Theorem stating that under the given conditions, each deer contains 200 pounds of meat -/
theorem deer_meat_content_is_200 : 
  deer_meat_content 4 16 8 5 1 = 200 := by
  sorry

end deer_meat_content_deer_meat_content_is_200_l2995_299536


namespace characterization_of_n_l2995_299547

-- Define the type of positive integers
def PositiveInt := { n : ℕ | n > 0 }

-- Define a function to get all positive divisors of a number
def positiveDivisors (n : PositiveInt) : List PositiveInt := sorry

-- Define a function to check if a list forms a geometric sequence
def isGeometricSequence (l : List ℝ) : Prop := sorry

-- Define the conditions for n
def satisfiesConditions (n : PositiveInt) : Prop :=
  let divisors := positiveDivisors n
  (divisors.length ≥ 4) ∧
  (isGeometricSequence (List.zipWith (λ a b => b - a) divisors (List.tail divisors)))

-- Define the form pᵃ where p is prime and a ≥ 3
def isPrimePower (n : PositiveInt) : Prop :=
  ∃ (p : ℕ) (a : ℕ), Prime p ∧ a ≥ 3 ∧ n = p^a

-- The main theorem
theorem characterization_of_n (n : PositiveInt) :
  satisfiesConditions n ↔ isPrimePower n := by sorry

end characterization_of_n_l2995_299547


namespace factorization_2x_cubed_minus_8x_l2995_299540

theorem factorization_2x_cubed_minus_8x (x : ℝ) : 2*x^3 - 8*x = 2*x*(x+2)*(x-2) := by
  sorry

end factorization_2x_cubed_minus_8x_l2995_299540


namespace pencils_per_child_l2995_299517

/-- Given a group of children with pencils, prove that each child has 2 pencils. -/
theorem pencils_per_child (num_children : ℕ) (total_pencils : ℕ) 
  (h1 : num_children = 8) 
  (h2 : total_pencils = 16) : 
  total_pencils / num_children = 2 := by
  sorry

end pencils_per_child_l2995_299517


namespace root_in_interval_implies_k_range_l2995_299506

theorem root_in_interval_implies_k_range :
  ∀ k : ℝ, 
  (∃ x : ℝ, x ∈ (Set.Ioo 2 3) ∧ x^2 + (1-k)*x - 2*(k+1) = 0) →
  k ∈ Set.Ioo 1 2 :=
by sorry

end root_in_interval_implies_k_range_l2995_299506


namespace no_daughters_count_l2995_299534

def berthas_family (num_daughters : ℕ) (total_descendants : ℕ) (daughters_with_children : ℕ) : Prop :=
  num_daughters = 8 ∧
  total_descendants = 40 ∧
  daughters_with_children * 4 = total_descendants - num_daughters

theorem no_daughters_count (num_daughters : ℕ) (total_descendants : ℕ) (daughters_with_children : ℕ) :
  berthas_family num_daughters total_descendants daughters_with_children →
  total_descendants - num_daughters = 32 :=
by sorry

end no_daughters_count_l2995_299534


namespace complement_of_A_l2995_299577

def U : Set ℝ := Set.univ

def A : Set ℝ := {x : ℝ | x ≥ 1} ∪ {x : ℝ | x ≤ 0}

theorem complement_of_A : Set.compl A = Set.Ioo 0 1 := by sorry

end complement_of_A_l2995_299577


namespace allowance_equation_l2995_299548

/-- The student's monthly allowance in USD -/
def monthly_allowance : ℝ := 29.65

/-- Proposition: Given the spending pattern, the monthly allowance satisfies the equation -/
theorem allowance_equation : 
  (5 / 42 : ℝ) * monthly_allowance = 3 / 0.85 := by
  sorry

end allowance_equation_l2995_299548


namespace simplify_and_evaluate_l2995_299571

theorem simplify_and_evaluate (a : ℝ) (h : a = 2) : 
  a / (a^2 - 1) - 1 / (a^2 - 1) = 1 / 3 := by
  sorry

end simplify_and_evaluate_l2995_299571


namespace tree_distance_l2995_299532

theorem tree_distance (yard_length : ℝ) (num_trees : ℕ) 
  (h1 : yard_length = 320)
  (h2 : num_trees = 47)
  (h3 : num_trees ≥ 2) :
  let distance := yard_length / (num_trees - 1)
  distance = 320 / 46 := by
sorry

end tree_distance_l2995_299532


namespace sqrt_x_plus_one_over_sqrt_x_l2995_299556

theorem sqrt_x_plus_one_over_sqrt_x (x : ℝ) (h1 : x > 0) (h2 : x + 1/x = 50) : 
  Real.sqrt x + 1 / Real.sqrt x = Real.sqrt 52 := by
  sorry

end sqrt_x_plus_one_over_sqrt_x_l2995_299556


namespace angle_in_second_quadrant_l2995_299566

theorem angle_in_second_quadrant (θ : Real) (h : θ = 27 * Real.pi / 4) :
  0 < θ % (2 * Real.pi) ∧ θ % (2 * Real.pi) < Real.pi :=
by sorry

end angle_in_second_quadrant_l2995_299566


namespace pages_read_initially_l2995_299598

def book_chapters : ℕ := 8
def book_pages : ℕ := 95
def pages_read_later : ℕ := 25
def total_pages_read : ℕ := 62

theorem pages_read_initially : 
  total_pages_read - pages_read_later = 37 := by
  sorry

end pages_read_initially_l2995_299598


namespace tangent_circle_equation_l2995_299572

/-- A circle C tangent to the line x-2=0 at point (2,1) with radius 3 -/
structure TangentCircle where
  /-- The center of the circle -/
  center : ℝ × ℝ
  /-- The radius of the circle -/
  radius : ℝ
  /-- The circle is tangent to the line x-2=0 at point (2,1) -/
  tangent_point : center.1 - 2 = radius ∨ center.1 - 2 = -radius
  /-- The point (2,1) lies on the circle -/
  on_circle : (2 - center.1)^2 + (1 - center.2)^2 = radius^2
  /-- The radius is 3 -/
  radius_is_three : radius = 3

/-- The equation of the circle is either (x+1)^2+(y-1)^2=9 or (x-5)^2+(y-1)^2=9 -/
theorem tangent_circle_equation (c : TangentCircle) :
  (∀ x y, (x - c.center.1)^2 + (y - c.center.2)^2 = c.radius^2) →
  ((∀ x y, (x + 1)^2 + (y - 1)^2 = 9) ∨ (∀ x y, (x - 5)^2 + (y - 1)^2 = 9)) :=
by sorry

end tangent_circle_equation_l2995_299572


namespace quadratic_equation_proof_l2995_299559

/-- Given a quadratic equation x^2 - 3x + k = 0 with one root being 4,
    prove that the other root is -1 and k = -4 -/
theorem quadratic_equation_proof (k : ℝ) : 
  (∃ x : ℝ, x^2 - 3*x + k = 0 ∧ x = 4) → 
  (∃ y : ℝ, y^2 - 3*y + k = 0 ∧ y = -1) ∧ k = -4 :=
by sorry

end quadratic_equation_proof_l2995_299559


namespace min_reciprocal_sum_l2995_299508

theorem min_reciprocal_sum (x y : ℝ) (hx : x > 0) (hy : y > 0) (h : 2 * x + y = 1 / 3) :
  (1 / x + 1 / y) ≥ 9 + 6 * Real.sqrt 2 := by
sorry

end min_reciprocal_sum_l2995_299508


namespace horizontal_asymptote_rational_function_l2995_299565

/-- The function f(x) = (7x^2 - 4) / (4x^2 + 8x - 3) has a horizontal asymptote at y = 7/4 -/
theorem horizontal_asymptote_rational_function :
  let f : ℝ → ℝ := λ x => (7 * x^2 - 4) / (4 * x^2 + 8 * x - 3)
  ∀ ε > 0, ∃ N : ℝ, ∀ x : ℝ, x > N → |f x - 7/4| < ε :=
by sorry

end horizontal_asymptote_rational_function_l2995_299565


namespace distinct_remainders_of_sums_l2995_299560

theorem distinct_remainders_of_sums (n : ℕ) (h : n > 1) :
  let S := Finset.range n
  ∀ (i j k l : ℕ) (hi : i ∈ S) (hj : j ∈ S) (hk : k ∈ S) (hl : l ∈ S)
    (hij : i ≤ j) (hkl : k ≤ l),
  (i + j) % (n * (n + 1) / 2) = (k + l) % (n * (n + 1) / 2) →
  i = k ∧ j = l :=
by sorry

end distinct_remainders_of_sums_l2995_299560


namespace fourth_pile_magazines_l2995_299580

def magazine_sequence (n : ℕ) : ℕ :=
  if n = 1 then 3
  else if n = 2 then 4
  else if n = 3 then 6
  else if n = 5 then 13
  else 0  -- For other values, we don't have information

def difference_sequence (n : ℕ) : ℕ :=
  magazine_sequence (n + 1) - magazine_sequence n

theorem fourth_pile_magazines :
  (∀ n : ℕ, n ≥ 1 ∧ n ≤ 3 → difference_sequence (n + 1) = difference_sequence n + 1) →
  magazine_sequence 4 = 9 := by
  sorry

end fourth_pile_magazines_l2995_299580


namespace log_27_3_l2995_299589

theorem log_27_3 : Real.log 3 / Real.log 27 = 1 / 3 := by
  sorry

end log_27_3_l2995_299589


namespace negation_of_existence_negation_of_quadratic_equation_l2995_299528

theorem negation_of_existence (P : ℝ → Prop) :
  (¬ ∃ x > 0, P x) ↔ (∀ x > 0, ¬ P x) :=
by sorry

theorem negation_of_quadratic_equation :
  (¬ ∃ x > 0, x^2 + 3*x - 5 = 0) ↔ (∀ x > 0, x^2 + 3*x - 5 ≠ 0) :=
by sorry

end negation_of_existence_negation_of_quadratic_equation_l2995_299528


namespace multiply_and_simplify_l2995_299516

theorem multiply_and_simplify (x : ℝ) :
  (x^6 + 64*x^3 + 4096) * (x^3 - 64) = x^9 - 262144 := by sorry

end multiply_and_simplify_l2995_299516


namespace parallelogram_base_length_l2995_299570

/-- Given a parallelogram with area 108 cm² and height 9 cm, its base length is 12 cm. -/
theorem parallelogram_base_length (area : ℝ) (height : ℝ) (base : ℝ) :
  area = 108 ∧ height = 9 ∧ area = base * height → base = 12 := by
  sorry

end parallelogram_base_length_l2995_299570


namespace charity_sale_result_l2995_299596

/-- Represents the number and prices of shirts in a charity sale --/
structure ShirtSale where
  total_shirts : ℕ
  total_cost : ℕ
  black_wholesale : ℕ
  black_retail : ℕ
  white_wholesale : ℕ
  white_retail : ℕ

/-- Calculates the number of black and white shirts and the total profit --/
def calculate_shirts_and_profit (sale : ShirtSale) : 
  (ℕ × ℕ × ℕ) := sorry

/-- Theorem stating the correct results for the given shirt sale --/
theorem charity_sale_result (sale : ShirtSale) 
  (h1 : sale.total_shirts = 200)
  (h2 : sale.total_cost = 3500)
  (h3 : sale.black_wholesale = 25)
  (h4 : sale.black_retail = 50)
  (h5 : sale.white_wholesale = 15)
  (h6 : sale.white_retail = 35) :
  calculate_shirts_and_profit sale = (50, 150, 4250) := by sorry

end charity_sale_result_l2995_299596
